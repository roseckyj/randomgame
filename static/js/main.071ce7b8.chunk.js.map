{"version":3,"sources":["shared/gameObjects/20_AbstractGameEntity.ts","shared/gameObjects/00_AbstractGameObject.ts","shared/gameObjects/controllers/ControllerManager.ts","shared/gameObjects/controllers/controllers/AbstractController.ts","shared/gameObjects/controllers/controllers/deserializers/ImmediateDeserializeController.ts","shared/gameObjects/controllers/controllers/deserializers/SmoothDeserializeController.ts","shared/gameObjects/controllers/controllers/input/KeyboardController.ts","shared/gameObjects/controllers/controllers/input/AbstractInputController.ts","shared/gameObjects/renderers/textures/texturePack.ts","shared/gameObjects/renderers/textures/SimpleTexture.ts","shared/gameObjects/renderers/textures/textureEngine.ts","shared/gameObjects/renderers/textures/AnimatedTexture.ts","shared/constants.ts","shared/gameObjects/renderers/00_AbstractRenderer.ts","shared/gameObjects/renderers/01_AbstractEntityRenderer.ts","shared/gameObjects/renderers/60_PlayerRenderer.ts","shared/gameObjects/60_Player.tsx","shared/colors.ts","shared/gameObjects/renderers/60_ChunkRenderer.ts","shared/gameObjects/10_Chunk.tsx","shared/utils/IndexedList.ts","shared/Scene.ts","frontend/keyBindings.ts","shared/gameObjects/renderers/11_StaticRenderer.ts","shared/gameObjects/60_Tree.tsx","shared/gameObjects/60_Stone.tsx","shared/gameObjects/controllers/controllers/ai/ChickenAIController.ts","shared/gameObjects/renderers/10_SimpleRenderer.ts","shared/gameObjects/60_Chicken.tsx","frontend/gameMechanics/network/Client.ts","frontend/gameMechanics/utils/shadeText.ts","frontend/gameMechanics/GameCore.tsx","frontend/gameMechanics/gui/minimap.ts","frontend/gameMechanics/gui/debugInfo.ts","frontend/App.tsx","serviceWorker.js","index.tsx"],"names":["Platform","AbstractGameObject","gameScene","renderer","position","Vector2","Zero","visibility","babylonScene","this","attached","detach","update","deltaTime","visible","AbstractGameEntity","id","disabled","hitbox","width","height","velocity","controllerManager","dirtyListener","x","y","velocityX","velocityY","type","data","serialized","deserialize","invoke","listener","attachRenderer","entity","ControllerManager","controllers","controller","push","filter","fn","args","forEach","c","AbstractController","object","ImmediateDeserializeController","SmoothDeserializeController","targetX","targetY","finalVelocityX","finalVelocityY","targetTime","smoothTime","time","KeyboardMotionController","keyBindings","up","down","left","right","deltaTimeModified","movingX","movingY","diagonalModifier","Math","sqrt","keysPressed","includes","ogX","ogY","pow","abs","colisions","getColisions","length","colisionX","colisionY","colisionFromBottom","colisionFromLeft","colisionFromTop","colisionFromRight","newBindings","mousePressed","keyCode","key","textures","player","filename","animations","default","start","end","walking","inventory_opening","inventory_open","inventory_closing","equip","unequip","mine","eat","interact","chicken","rock_big","rock_small","bush","tree_small","tree_big","tree_short","tree_tall","grass_water_L","grass_water_R","grass_water_T","grass_water_B","grass_water_TL","grass_water_RB","grass_water_TR","grass_water_BL","grass_water_TBL","grass_water_TRL","grass_water_RBL","grass_water_TRB","grass_water_TRBL","grass_water_corner_BL","grass_water_corner_BR","grass_water_corner_TL","grass_water_corner_TR","SimpleTexture","textureAtlas","scene","texture","Error","t","Texture","RESOURCES_LOCATION","NEAREST_NEAREST","hasAlpha","removeTexture","resourceFiles","Object","values","map","v","i","indexOf","atlases","materials","loaded","getSimpleMaterial","material","createMaterial","getTexture","StandardMaterial","emissiveTexture","opacityTexture","getImage","console","warn","AnimatedTexture","animation","animationQueue","frame","direction","interval","textureScale","uOffset","vOffset","uScale","vScale","queue","setInterval","tick","unskipable","isLast","keys","skippable","framesCount","haveNextAnimation","shift","newAnimation","animationDir","error","CAMERA_ANGLE","PI","AbstractRenderer","mesh","removeMesh","AbstractEntityRenderer","z","getSize","cos","rotation","sin","isPickable","PlayerRenderer","titleTexture","size","MeshBuilder","CreatePlane","sideOrientation","Mesh","FRONTSIDE","title","Vector3","DynamicTexture","LINEAR_LINEAR","parent","ctx","getContext","clearRect","fillStyle","fillRect","font","textBaseline","textAlign","fillText","name","queueOnce","child","getChildMeshes","removeMaterial","Player","sup","platform","me","Server","attach","Client","getTerrainColor","number","ChunkRenderer","drawTexture","drawBasicTiling","ground","drawTransition","tileType","filePrefix","posX","posY","sides","getTile","top","drawImage","bottom","img","corner","shiftX","shiftY","blackList","suffix","reduce","prev","letter","chunk","Chunk","getId","toString","IndexedList","value","detachRenderer","smooth","newObjectCreator","callbackfn","index","result","add","getKeys","GameScene","entities","chunks","calcX","floor","calcY","chunkX","chunkY","get","colidesWith","closest","e","getValues","sort","a","b","distance","CONTROLS_WASD","StaticRenderer","getMaterial","Tree","Stone","ChickenAIController","angle","closestPlayer","getClosestEntityOfType","inLove","rotate","atan2","random","setDirty","SimpleRenderer","Chicken","NetworkClient","apiUrl","getBabylonScene","socket","userId","opened","callbacks","authenticated","updated","invalidPassword","disconnect","event","callback","io","setListeners","on","log","payload","serialize","emit","password","passwordHash","md5","removed","remove","updateOrCreate","createEntity","deserializeImmediatelly","attachControllers","shadeText","text","strokeStyle","lineWidth","strokeText","GameCore","props","guiTexture","networkClient","state","loggedIn","timer","zoom","renderDistance","debug","loginRef","createRef","passwordRef","mouseEntity","initGame","current","classList","setTimeout","document","addEventListener","deltaY","window","resize","open","clearInterval","close","setState","enableDebug","debugLayer","show","sendPlayerUpdate","unloadUnusedComponents","requestChunks","gui","x0","MINIMAP_SCALE","y0","MINIMAP_DISTANCE","getEntityColor","strokeRect","round","minimap","FPS","toFixed","getVisibility","debugInfo","canvas","getElementById","innerWidth","innerHeight","camera","UniversalCamera","skybox","CreateCylinder","CAMERA_DISTANCE","diameterTop","MAX_RENDER_DISTANCE","diameterBottom","tessellation","skyboxMaterial","backFaceCulling","diffuseColor","BABYLON","Color3","specularColor","disableLighting","AdvancedDynamicTexture","CreateFullscreenUI","onPointerDown","pickResult","hit","pickedMesh","startsWith","split","button","onPointerUp","getEngine","runRenderLoop","getDeltaTime","tan","min","ceil","render","distX","distY","setVisibility","setVisibilityAttachRenderer","chunkId","requestChunk","className","placeholder","ref","onClick","auth","antialias","canvasId","onSceneMount","React","Component","App","status","of","location","host","onLoad","onStateChange","Image","onload","onerror","src","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.071ce7b8.chunk.js","sourcesContent":["import { Scene, Vector2 } from 'babylonjs';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameObject } from './00_AbstractGameObject';\r\nimport { ControllerManager } from './controllers/ControllerManager';\r\n\r\nexport interface serializedEntity<T> {\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    velocityX: number;\r\n    velocityY: number;\r\n    type: string;\r\n    data: T;\r\n}\r\n\r\nexport enum Platform {\r\n    Server = 'SERVER',\r\n    Client = 'CLIENT',\r\n}\r\n\r\nexport abstract class AbstractGameEntity extends AbstractGameObject {\r\n    // Should be used for all entities, buildings, trees, etc.\r\n\r\n    public disabled: boolean = false;\r\n    public hitbox: { width: number; height: number } = { width: 0, height: 0 };\r\n    public velocity: Vector2 = Vector2.Zero();\r\n\r\n    public controllerManager: ControllerManager;\r\n\r\n    private dirtyListener: (id: string) => void = (id: string) => {};\r\n\r\n    constructor(public gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<{}> {\r\n        return {\r\n            id: this.id,\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n            velocityX: this.velocity.x,\r\n            velocityY: this.velocity.y,\r\n            type: AbstractGameEntity.type,\r\n            data: {},\r\n        };\r\n    }\r\n\r\n    deserializeImmediatelly(serialized: any): void {\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.velocity.x = serialized.velocityX;\r\n        this.velocity.y = serialized.velocityY;\r\n        this.deserialize(serialized);\r\n        this.update();\r\n    }\r\n\r\n    deserialize(serialized: any): void {\r\n        this.controllerManager.invoke('deserialize', serialized);\r\n        this.update();\r\n    }\r\n\r\n    abstract attachControllers(platform: Platform): void;\r\n\r\n    attachDirtyListener(listener: (id: string) => void) {\r\n        this.dirtyListener = listener;\r\n    }\r\n\r\n    public setDirty() {\r\n        this.dirtyListener(this.id);\r\n    }\r\n\r\n    abstract getSize(): Vector2;\r\n\r\n    static get type(): string {\r\n        return 'unknown';\r\n    }\r\n\r\n    public async setVisibilityAttachRenderer(visible: boolean, babylonScene: Scene) {\r\n        super.setVisibility(visible);\r\n        if (visible && !this.renderer) this.attachRenderer(babylonScene);\r\n    }\r\n\r\n    public colidesWith(entity: AbstractGameEntity) {\r\n        return (\r\n            this.position.x - this.hitbox.width < entity.position.x + entity.hitbox.width &&\r\n            this.position.x + this.hitbox.width > entity.position.x - entity.hitbox.width &&\r\n            this.position.y - this.hitbox.height < entity.position.y + entity.hitbox.height &&\r\n            this.position.y + this.hitbox.height > entity.position.y - entity.hitbox.height\r\n        );\r\n    }\r\n\r\n    tick(deltaTime: number): void {\r\n        this.controllerManager.invoke('tick', deltaTime);\r\n    }\r\n}\r\n","import { Vector2, Scene } from 'babylonjs';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractRenderer } from './renderers/00_AbstractRenderer';\r\n\r\nexport abstract class AbstractGameObject {\r\n    protected renderer: AbstractRenderer | null = null;\r\n    public position: Vector2 = Vector2.Zero();\r\n    protected visibility: boolean = true;\r\n\r\n    constructor(public gameScene: GameScene) {}\r\n\r\n    abstract serialize(): any;\r\n\r\n    abstract deserialize(serialized: any, smooth?: boolean): void;\r\n\r\n    async attachRenderer(babylonScene: Scene) {\r\n        if (this.renderer && this.renderer.attached) {\r\n            this.renderer.detach();\r\n        }\r\n    }\r\n\r\n    async detachRenderer(): Promise<void> {\r\n        if (this.renderer) this.renderer.detach();\r\n    }\r\n\r\n    protected update() {\r\n        if (this.renderer) {\r\n            this.renderer.update();\r\n        }\r\n    }\r\n\r\n    tick(deltaTime: number): void {}\r\n\r\n    setVisibility(visible: boolean) {\r\n        this.visibility = visible;\r\n        if (this.renderer) this.renderer.update();\r\n    }\r\n\r\n    getVisibility() {\r\n        return this.visibility;\r\n    }\r\n\r\n    abstract get id(): string;\r\n}\r\n","import { AbstractController } from './controllers/AbstractController';\r\n\r\nexport class ControllerManager {\r\n    constructor(private controllers: AbstractController[] = []) {}\r\n\r\n    public attach(controller: AbstractController) {\r\n        this.controllers.push(controller);\r\n    }\r\n\r\n    public detach(filter: (controller: AbstractController) => boolean) {\r\n        this.controllers = this.controllers.filter(filter);\r\n    }\r\n\r\n    public invoke(fn: string, ...args: any[]) {\r\n        this.controllers.forEach((c) => (c as any)[fn] && (c as any)[fn](...args));\r\n    }\r\n}\r\n","import { AbstractGameObject } from '../../00_AbstractGameObject';\r\nimport { serializedEntity } from '../../20_AbstractGameEntity';\r\n\r\nexport abstract class AbstractController {\r\n    constructor(protected object: AbstractGameObject) {}\r\n\r\n    public tick(deltaTime: number) {}\r\n    public deserialize(serialized: serializedEntity<any>) {}\r\n}\r\n","import { AbstractGameEntity, serializedEntity } from '../../../20_AbstractGameEntity';\r\nimport { AbstractController } from '../AbstractController';\r\n\r\nexport class ImmediateDeserializeController extends AbstractController {\r\n    constructor(protected object: AbstractGameEntity) {\r\n        super(object);\r\n    }\r\n\r\n    public deserialize(serialized: serializedEntity<any>) {\r\n        this.object.position.x = serialized.x;\r\n        this.object.position.y = serialized.y;\r\n        this.object.velocity.x = serialized.velocityX;\r\n        this.object.velocity.y = serialized.velocityY;\r\n    }\r\n}\r\n","import { AbstractGameEntity, serializedEntity } from '../../../20_AbstractGameEntity';\r\nimport { AbstractController } from '../AbstractController';\r\n\r\nconst SMOOTH_TIME_DEFAULT = 110;\r\n\r\nexport class SmoothDeserializeController extends AbstractController {\r\n    private targetX: number = 0;\r\n    private targetY: number = 0;\r\n    private finalVelocityX: number = 0;\r\n    private finalVelocityY: number = 0;\r\n    private targetTime: number = -1;\r\n\r\n    private smoothTime: number = SMOOTH_TIME_DEFAULT;\r\n\r\n    constructor(protected object: AbstractGameEntity) {\r\n        super(object);\r\n    }\r\n\r\n    public tick(deltaTime: number) {\r\n        if (this.targetTime > 0) {\r\n            this.object.position.x += this.object.velocity.x * deltaTime;\r\n            this.object.position.y += this.object.velocity.y * deltaTime;\r\n            this.targetTime -= deltaTime;\r\n\r\n            if (this.targetTime <= 0) {\r\n                this.object.position.x = this.targetX;\r\n                this.object.position.y = this.targetY;\r\n                this.object.velocity.x = this.finalVelocityX;\r\n                this.object.velocity.y = this.finalVelocityY;\r\n            }\r\n            return;\r\n        } else {\r\n            super.tick(deltaTime);\r\n        }\r\n    }\r\n\r\n    public setSmoothTime(time: number) {\r\n        this.smoothTime = time;\r\n    }\r\n\r\n    public deserialize(serialized: serializedEntity<any>) {\r\n        this.targetX = serialized.x;\r\n        this.targetY = serialized.y;\r\n\r\n        this.finalVelocityX = serialized.velocityX;\r\n        this.finalVelocityY = serialized.velocityY;\r\n        this.targetTime = this.smoothTime;\r\n        this.object.velocity.x = (serialized.x - this.object.position.x) / this.smoothTime;\r\n        this.object.velocity.y = (serialized.y - this.object.position.y) / this.smoothTime;\r\n    }\r\n}\r\n","import { AbstractGameEntity } from '../../../20_AbstractGameEntity';\r\nimport { AbstractInputController } from './AbstractInputController';\r\n\r\nexport interface keyBindings {\r\n    up: number;\r\n    down: number;\r\n    left: number;\r\n    right: number;\r\n}\r\n\r\nconst SPEED_CHANGE = 0.002;\r\nconst SLOWING = 0.95;\r\nconst MODIFIER = 0.1;\r\n\r\nexport class KeyboardMotionController extends AbstractInputController {\r\n    private keyBindings: keyBindings = {\r\n        up: 0,\r\n        down: 0,\r\n        left: 0,\r\n        right: 0,\r\n    };\r\n\r\n    constructor(protected object: AbstractGameEntity) {\r\n        super(object);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        const deltaTimeModified = MODIFIER * deltaTime;\r\n\r\n        let movingX = false;\r\n        let movingY = false;\r\n\r\n        const diagonalModifier = Math.sqrt(2);\r\n\r\n        if (this.keysPressed.includes(this.keyBindings.left) || this.keysPressed.includes(this.keyBindings.right)) {\r\n            movingX = true;\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.up) || this.keysPressed.includes(this.keyBindings.down)) {\r\n            movingY = true;\r\n        }\r\n\r\n        if (this.keysPressed.includes(this.keyBindings.left)) {\r\n            // Left\r\n            this.object.velocity.x -= (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.right)) {\r\n            // Right\r\n            this.object.velocity.x += (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.up)) {\r\n            // Up\r\n            this.object.velocity.y -= (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.down)) {\r\n            // Down\r\n            this.object.velocity.y += (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\r\n        }\r\n\r\n        const ogX = this.object.position.x;\r\n        const ogY = this.object.position.y;\r\n\r\n        this.object.position.x += this.object.velocity.x * deltaTimeModified;\r\n        this.object.position.y += this.object.velocity.y * deltaTimeModified;\r\n\r\n        this.object.velocity.x *= Math.pow(SLOWING, deltaTimeModified);\r\n        this.object.velocity.y *= Math.pow(SLOWING, deltaTimeModified);\r\n\r\n        if (Math.abs(this.object.velocity.x) < 0.001) {\r\n            this.object.velocity.x = 0;\r\n        }\r\n        if (Math.abs(this.object.velocity.y) < 0.001) {\r\n            this.object.velocity.y = 0;\r\n        }\r\n\r\n        // Colisions\r\n        const colisions = this.object.gameScene.getColisions(this.object);\r\n        if (colisions.length() > 0) {\r\n            let colisionX = false;\r\n            let colisionY = false;\r\n\r\n            colisions.forEach((entity) => {\r\n                let colisionFromBottom =\r\n                    !(ogY - this.object.hitbox.height < entity.position.y + entity.hitbox.height) &&\r\n                    this.object.position.y - this.object.hitbox.height < entity.position.y + entity.hitbox.height;\r\n\r\n                let colisionFromLeft =\r\n                    !(ogX + this.object.hitbox.width > entity.position.x - entity.hitbox.width) &&\r\n                    this.object.position.x + this.object.hitbox.width > entity.position.x - entity.hitbox.width;\r\n\r\n                let colisionFromTop =\r\n                    !(ogY + this.object.hitbox.height > entity.position.y - entity.hitbox.height) &&\r\n                    this.object.position.y + this.object.hitbox.height > entity.position.y - entity.hitbox.height;\r\n\r\n                let colisionFromRight =\r\n                    !(ogX - this.object.hitbox.width < entity.position.x + entity.hitbox.width) &&\r\n                    this.object.position.x - this.object.hitbox.width < entity.position.x + entity.hitbox.width;\r\n\r\n                colisionX = colisionX || colisionFromLeft || colisionFromRight;\r\n                colisionY = colisionY || colisionFromBottom || colisionFromTop;\r\n            });\r\n\r\n            if (colisionX) {\r\n                this.object.position.x = ogX;\r\n                this.object.velocity.x = 0;\r\n            }\r\n            if (colisionY) {\r\n                this.object.position.y = ogY;\r\n                this.object.velocity.y = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public bindKeys(newBindings: Partial<keyBindings>) {\r\n        this.keyBindings = { ...this.keyBindings, ...newBindings };\r\n    }\r\n}\r\n","import { AbstractController } from '../AbstractController';\r\n\r\nexport abstract class AbstractInputController extends AbstractController {\r\n    protected keysPressed: number[] = [];\r\n    protected mousePressed: number[] = [];\r\n\r\n    public keyDown(keyCode: number) {\r\n        if (!this.keysPressed.includes(keyCode)) {\r\n            this.keysPressed.push(keyCode);\r\n        }\r\n    }\r\n\r\n    public keyUp(keyCode: number) {\r\n        if (this.keysPressed.includes(keyCode)) {\r\n            this.keysPressed = this.keysPressed.filter((key) => key !== keyCode);\r\n        }\r\n    }\r\n\r\n    public mouseDown(keyCode: number) {\r\n        if (!this.mousePressed.includes(keyCode)) {\r\n            this.mousePressed.push(keyCode);\r\n        }\r\n    }\r\n\r\n    public mouseUp(keyCode: number) {\r\n        if (this.mousePressed.includes(keyCode)) {\r\n            this.mousePressed = this.mousePressed.filter((key) => key !== keyCode);\r\n        }\r\n    }\r\n}\r\n","import { texturePack } from './textureEngine';\r\n\r\nexport const textures: texturePack = {\r\n    player: {\r\n        filename: 'Character.png',\r\n        width: 57,\r\n        animations: {\r\n            default: {\r\n                start: 0,\r\n                end: 0,\r\n                type: 'frame',\r\n            },\r\n            walking: {\r\n                start: 0,\r\n                end: 7,\r\n                type: 'loop',\r\n            },\r\n            inventory_opening: {\r\n                start: 8,\r\n                end: 11,\r\n                type: 'once',\r\n            },\r\n            inventory_open: {\r\n                start: 11,\r\n                end: 11,\r\n                type: 'frame',\r\n            },\r\n            inventory_closing: {\r\n                start: 11,\r\n                end: 8,\r\n                type: 'once',\r\n            },\r\n            equip: {\r\n                start: 12,\r\n                end: 19,\r\n                type: 'once',\r\n            },\r\n            unequip: {\r\n                start: 19,\r\n                end: 12,\r\n                type: 'once',\r\n            },\r\n            mine: {\r\n                start: 20,\r\n                end: 22,\r\n                type: 'boomerang',\r\n            },\r\n            eat: {\r\n                start: 23,\r\n                end: 51,\r\n                type: 'once',\r\n            },\r\n            interact: {\r\n                start: 52,\r\n                end: 56,\r\n                type: 'once',\r\n            },\r\n        },\r\n    },\r\n    chicken: {\r\n        filename: 'chicken.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    rock_big: {\r\n        filename: 'rock_big.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    rock_small: {\r\n        filename: 'rock_small.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    bush: {\r\n        filename: 'bush.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_small: {\r\n        filename: 'tree_small.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_big: {\r\n        filename: 'tree_big.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_short: {\r\n        filename: 'tree_short.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_tall: {\r\n        filename: 'tree_tall.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_L: {\r\n        filename: 'grass_water_L.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_R: {\r\n        filename: 'grass_water_R.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_T: {\r\n        filename: 'grass_water_T.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_B: {\r\n        filename: 'grass_water_B.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TL: {\r\n        filename: 'grass_water_TL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_RB: {\r\n        filename: 'grass_water_RB.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TR: {\r\n        filename: 'grass_water_TR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_BL: {\r\n        filename: 'grass_water_BL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TBL: {\r\n        filename: 'grass_water_TBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRL: {\r\n        filename: 'grass_water_TRL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_RBL: {\r\n        filename: 'grass_water_RBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRB: {\r\n        filename: 'grass_water_TRB.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRBL: {\r\n        filename: 'grass_water_TRBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_BL: {\r\n        filename: 'grass_water_corner_BL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_BR: {\r\n        filename: 'grass_water_corner_BR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_TL: {\r\n        filename: 'grass_water_corner_TL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_TR: {\r\n        filename: 'grass_water_corner_TR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n};\r\n","import { Texture, Scene } from 'babylonjs';\r\nimport { textures } from './texturePack';\r\nimport { RESOURCES_LOCATION } from './textureEngine';\r\n\r\nexport class SimpleTexture {\r\n    private texture: Texture;\r\n    constructor(textureAtlas: string, private scene: Scene) {\r\n        if (!textures[textureAtlas]) {\r\n            throw new Error(\"Texture atlas '\" + textureAtlas + \"' is not defined\");\r\n        }\r\n\r\n        const t = new Texture(\r\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\r\n            scene,\r\n            false,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n        t.hasAlpha = true;\r\n        this.texture = t;\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texture;\r\n    }\r\n\r\n    detach() {\r\n        this.scene.removeTexture(this.texture);\r\n    }\r\n}\r\n","import { Texture, Scene, StandardMaterial, Material } from 'babylonjs';\r\nimport { SimpleTexture } from './SimpleTexture';\r\nimport { textures } from './texturePack';\r\n\r\nexport interface texturePack {\r\n    [name: string]: {\r\n        filename: string;\r\n        width: number;\r\n        animations: { [name: string]: { start: number; end: number; type: 'loop' | 'once' | 'boomerang' | 'frame' } };\r\n    };\r\n}\r\n\r\nlet resourceFiles = Object.values(textures).map((texture) => texture.filename);\r\nresourceFiles = resourceFiles.filter((v, i) => resourceFiles.indexOf(v) === i);\r\n\r\nlet atlases: { [key: string]: HTMLImageElement } = {};\r\nlet materials: { [key: string]: Material } = {};\r\n\r\nlet loaded = 0;\r\n\r\nexport const RESOURCES_LOCATION = '/randomgame/resources/textures/';\r\n\r\nexport function loadTextures(onLoad: () => void, onStateChange?: (loaded: number, of: number) => void) {\r\n    if (resourceFiles.length === 0) {\r\n        onStateChange && onStateChange(0, resourceFiles.length);\r\n        onLoad();\r\n    }\r\n\r\n    resourceFiles.forEach((filename) => {\r\n        atlases[filename] = new Image();\r\n        atlases[filename].onload = () => {\r\n            loaded++;\r\n            onStateChange && onStateChange(loaded, resourceFiles.length);\r\n\r\n            if (loaded === resourceFiles.length) {\r\n                onLoad();\r\n            }\r\n        };\r\n        atlases[filename].onerror = () => {\r\n            console.error('Error loading resource file: ', filename);\r\n        };\r\n        atlases[filename].src = RESOURCES_LOCATION + filename;\r\n    });\r\n\r\n    return resourceFiles.length;\r\n}\r\n\r\nexport function createTexture(texture: string, scene: Scene) {\r\n    const t = new Texture(\r\n        RESOURCES_LOCATION + textures[texture].filename,\r\n        scene,\r\n        false,\r\n        true,\r\n        Texture.NEAREST_SAMPLINGMODE,\r\n    );\r\n    t.uOffset = 0;\r\n    t.vOffset = 0;\r\n    t.uScale = 1 / textures[texture].width;\r\n    t.vScale = 1;\r\n    t.hasAlpha = true;\r\n    return t;\r\n}\r\n\r\nexport function getSimpleMaterial(textureAtlas: string, scene: Scene) {\r\n    if (materials[textureAtlas]) {\r\n        return materials[textureAtlas];\r\n    }\r\n\r\n    const texture = new SimpleTexture(textureAtlas, scene);\r\n    const material = createMaterial(texture.getTexture(), scene);\r\n    materials[textureAtlas] = material;\r\n\r\n    return material;\r\n}\r\n\r\nexport function createMaterial(texture: Texture, scene: Scene) {\r\n    const material = new StandardMaterial('mat', scene);\r\n    material.emissiveTexture = texture;\r\n    material.opacityTexture = texture;\r\n\r\n    return material;\r\n}\r\n\r\nexport function getImage(texture: string): HTMLImageElement | null {\r\n    if (!textures[texture]) {\r\n        console.warn('Image ' + texture + ' not found!');\r\n        return null;\r\n    }\r\n    return atlases[textures[texture].filename];\r\n}\r\n","import { Texture, Scene } from 'babylonjs';\r\nimport { textures } from './texturePack';\r\nimport { RESOURCES_LOCATION } from './textureEngine';\r\n\r\nconst TIME_PER_FRAME = 80;\r\n\r\nexport class AnimatedTexture {\r\n    private textureAtlas: string;\r\n    private texture: Texture;\r\n    private animationQueue: { texture: string; skippable: boolean }[] = [];\r\n    private frame: number = 0;\r\n    private direction: number = 1;\r\n    private interval: NodeJS.Timeout;\r\n\r\n    private textureScale = 1;\r\n\r\n    constructor(textureAtlas: string, private scene: Scene, animation: string = 'default') {\r\n        this.textureAtlas = textureAtlas;\r\n        this.textureScale = 1 / textures[textureAtlas].width;\r\n\r\n        const t = new Texture(\r\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\r\n            scene,\r\n            false,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n        t.uOffset = this.textureScale * textures[textureAtlas].animations[animation].start;\r\n        t.vOffset = 0;\r\n        t.uScale = this.textureScale;\r\n        t.vScale = 1;\r\n        t.hasAlpha = true;\r\n\r\n        this.texture = t;\r\n\r\n        this.queue(animation);\r\n        this.interval = setInterval(() => this.tick(), TIME_PER_FRAME);\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texture;\r\n    }\r\n\r\n    isLast(animation: string) {\r\n        return this.animationQueue[this.animationQueue.length - 1].texture === animation;\r\n    }\r\n\r\n    queueOnce(animation: string, unskipable?: boolean) {\r\n        if (!this.isLast(animation)) {\r\n            this.queue(animation, unskipable);\r\n        }\r\n    }\r\n\r\n    queue(animation: string, unskipable?: boolean) {\r\n        if (!Object.keys(textures[this.textureAtlas].animations).includes(animation)) {\r\n            console.warn('Animation does not exist');\r\n            this.animationQueue.push({ texture: 'default', skippable: true });\r\n            return;\r\n        }\r\n\r\n        if (this.animationQueue.length > 1 && this.animationQueue[this.animationQueue.length - 1].skippable) {\r\n            this.animationQueue[this.animationQueue.length - 1] = { texture: animation, skippable: !unskipable };\r\n        } else {\r\n            this.animationQueue.push({ texture: animation, skippable: !unskipable });\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        if (!this.texture) {\r\n            console.error('Texture is null');\r\n            return;\r\n        }\r\n\r\n        this.frame += this.direction;\r\n\r\n        const animation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\r\n        const framesCount = Math.abs(animation.start - animation.end);\r\n\r\n        const haveNextAnimation = this.animationQueue.length > 1;\r\n\r\n        if (this.frame > framesCount) {\r\n            // At the right end\r\n\r\n            switch (animation.type) {\r\n                case 'loop':\r\n                    this.direction = 1;\r\n                    this.frame = 0;\r\n                    if (haveNextAnimation) {\r\n                        this.animationQueue.shift();\r\n                    }\r\n                    break;\r\n                case 'once':\r\n                    this.direction = 1;\r\n                    if (haveNextAnimation) {\r\n                        this.frame = 0;\r\n                        this.animationQueue.shift();\r\n                    } else {\r\n                        this.frame = framesCount;\r\n                    }\r\n                    break;\r\n                case 'boomerang':\r\n                    this.direction = -1;\r\n                    this.frame -= 2;\r\n                    break;\r\n                case 'frame':\r\n                    this.direction = 1;\r\n                    this.frame = 0;\r\n                    if (haveNextAnimation) {\r\n                        this.animationQueue.shift();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (this.frame < 0) {\r\n            // At the left end - Can happen just with boomerang\r\n            this.direction = 1;\r\n            if (haveNextAnimation) {\r\n                this.frame = 0;\r\n                this.animationQueue.shift();\r\n            } else {\r\n                this.frame = 0;\r\n            }\r\n        }\r\n\r\n        const newAnimation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\r\n        const animationDir = newAnimation.start > newAnimation.end ? -1 : 1;\r\n        this.texture.uOffset = (this.frame * animationDir + newAnimation.start) * this.textureScale;\r\n    }\r\n\r\n    detach() {\r\n        this.scene.removeTexture(this.texture);\r\n    }\r\n}\r\n","export const CAMERA_DISTANCE = 1500;\r\nexport const CAMERA_ANGLE = Math.PI / 4;\r\n","import { Mesh } from \"babylonjs/Meshes/mesh\";\r\nimport { Scene } from \"babylonjs/scene\";\r\nimport { AbstractGameObject } from \"../00_AbstractGameObject\";\r\n\r\nexport abstract class AbstractRenderer {\r\n    public attached: boolean = true;\r\n    protected mesh: Mesh;\r\n    \r\n    constructor(protected object: AbstractGameObject, protected babylonScene: Scene) {}\r\n\r\n    abstract async update(): Promise<void>;\r\n\r\n    detach() {\r\n        if (!this.attached) return;\r\n\r\n        this.babylonScene.removeMesh(this.mesh, true);\r\n        this.attached = false;\r\n    }\r\n}\r\n","import { Scene } from 'babylonjs/scene';\r\nimport { CAMERA_ANGLE } from '../../constants';\r\nimport { AbstractGameEntity } from '../20_AbstractGameEntity';\r\nimport { AbstractRenderer } from './00_AbstractRenderer';\r\n\r\nexport abstract class AbstractEntityRenderer extends AbstractRenderer {\r\n    constructor(protected object: AbstractGameEntity, protected babylonScene: Scene) {\r\n        super(object, babylonScene);\r\n    }\r\n\r\n    async update() {\r\n        if (this.mesh) {\r\n            this.mesh.position.z = -(this.object.getSize().y * Math.cos(CAMERA_ANGLE)) / 2;\r\n            this.mesh.rotation.x = -CAMERA_ANGLE;\r\n\r\n            this.mesh.position.x = this.object.position.x * 100;\r\n            this.mesh.position.y =\r\n                -this.object.position.y * 100 + (this.object.getSize().y * Math.sin(CAMERA_ANGLE)) / 2;\r\n\r\n            this.mesh.isPickable = true;\r\n        }\r\n    }\r\n}\r\n","import { DynamicTexture, Mesh, MeshBuilder, Texture, Vector3 } from 'babylonjs';\r\nimport { Scene } from 'babylonjs/scene';\r\nimport { AnimatedTexture } from './textures/AnimatedTexture';\r\nimport { createMaterial } from './textures/textureEngine';\r\nimport { Player } from '../60_Player';\r\nimport { AbstractEntityRenderer } from './01_AbstractEntityRenderer';\r\n\r\nexport class PlayerRenderer extends AbstractEntityRenderer {\r\n    private texture: AnimatedTexture;\r\n    private titleTexture: DynamicTexture;\r\n\r\n    constructor(protected object: Player, protected babylonScene: Scene) {\r\n        super(object, babylonScene);\r\n\r\n        if (!this.babylonScene) return;\r\n\r\n        const size = object.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            object.id,\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.texture = new AnimatedTexture('player', this.babylonScene, 'default');\r\n        this.mesh.material = createMaterial(this.texture.getTexture(), this.babylonScene);\r\n\r\n        // Player title\r\n        const title = MeshBuilder.CreatePlane(\r\n            'title ' + object.id,\r\n            { width: 200, height: 40, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        title.position = new Vector3(0, 110, -3);\r\n        const titleTexture = new DynamicTexture(\r\n            'titleTexture ' + object.id,\r\n            { width: 200, height: 40 },\r\n            this.babylonScene,\r\n            true,\r\n            Texture.LINEAR_LINEAR,\r\n        );\r\n        this.titleTexture = titleTexture;\r\n\r\n        title.parent = this.mesh;\r\n        title.material = createMaterial(titleTexture, this.babylonScene);\r\n\r\n        this.update();\r\n    }\r\n\r\n    async update() {\r\n        super.update();\r\n\r\n        const ctx = this.titleTexture.getContext();\r\n        ctx.clearRect(0, 0, this.titleTexture.getSize().width, this.titleTexture.getSize().height);\r\n        ctx.fillStyle = '#343434AA';\r\n        ctx.fillRect(0, 0, this.titleTexture.getSize().width, this.titleTexture.getSize().height);\r\n\r\n        ctx.font = '32px pixel';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.fillText(this.object.name, this.titleTexture.getSize().width / 2, this.titleTexture.getSize().height / 2);\r\n        this.titleTexture.update();\r\n\r\n        const WALKING_THRESHOLD = 0.01;\r\n        if (\r\n            Math.abs(this.object.velocity.x) > WALKING_THRESHOLD ||\r\n            Math.abs(this.object.velocity.x) > WALKING_THRESHOLD\r\n        ) {\r\n            this.texture.queueOnce('walking');\r\n        } else {\r\n            this.texture.queueOnce('default');\r\n        }\r\n    }\r\n\r\n    detach() {\r\n        if (this.babylonScene && this.mesh) {\r\n            const child = this.mesh.getChildMeshes()[0];\r\n\r\n            if (this.titleTexture && child && child.material) {\r\n                this.babylonScene.removeTexture(this.titleTexture);\r\n                this.babylonScene.removeMaterial(child.material);\r\n            }\r\n        }\r\n\r\n        // Mesh detached by super\r\n        super.detach();\r\n    }\r\n}\r\n","import { Scene, Vector2 } from 'babylonjs';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameEntity, Platform, serializedEntity } from './20_AbstractGameEntity';\r\nimport { ControllerManager } from './controllers/ControllerManager';\r\nimport { ImmediateDeserializeController } from './controllers/controllers/deserializers/ImmediateDeserializeController';\r\nimport { SmoothDeserializeController } from './controllers/controllers/deserializers/SmoothDeserializeController';\r\nimport { KeyboardMotionController } from './controllers/controllers/input/KeyboardController';\r\nimport { PlayerRenderer } from './renderers/60_PlayerRenderer';\r\n\r\nexport interface serializedPlayer {\r\n    name: string;\r\n}\r\n\r\nexport class Player extends AbstractGameEntity {\r\n    public hitbox = { width: 0.5, height: 0.2 };\r\n\r\n    public name = '';\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene, id);\r\n\r\n        this.controllerManager = new ControllerManager();\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedPlayer> {\r\n        let sup = super.serialize() as serializedEntity<serializedPlayer>;\r\n        sup.type = Player.type;\r\n        sup.data = {\r\n            name: this.name,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedPlayer>): void {\r\n        if (serialized.type !== Player.type) return;\r\n\r\n        this.name = serialized.data.name;\r\n        super.deserialize(serialized);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        super.tick(deltaTime);\r\n        this.update();\r\n    }\r\n\r\n    static get type() {\r\n        return 'player';\r\n    }\r\n\r\n    async attachRenderer(scene: Scene) {\r\n        super.attachRenderer(scene);\r\n\r\n        this.renderer = new PlayerRenderer(this, scene);\r\n    }\r\n\r\n    attachControllers(platform: Platform, me?: boolean) {\r\n        if (platform === Platform.Server) {\r\n            this.controllerManager.attach(new ImmediateDeserializeController(this));\r\n        }\r\n        if (platform === Platform.Client) {\r\n            if (me) {\r\n                this.controllerManager.attach(new KeyboardMotionController(this));\r\n            } else {\r\n                this.controllerManager.attach(new SmoothDeserializeController(this));\r\n            }\r\n        }\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 200);\r\n    }\r\n}\r\n","export function getTerrainColor(number: number): string {\r\n    switch (number) {\r\n        case 1: // Grass\r\n            return '#67943F';\r\n        case 2: // Water\r\n            return '#2EB0E5';\r\n        case 4: // Sand\r\n            return '#FDDC86';\r\n    }\r\n    return '#DDDDDD';\r\n}\r\n\r\nexport function getEntityColor(type: string): string {\r\n    switch (type) {\r\n        case 'tree':\r\n            return '#2A4323aa';\r\n        case 'player':\r\n            return '#000dff';\r\n        case 'stone':\r\n            return '#ddddddaa';\r\n        case 'chicken':\r\n            return '#ffffff';\r\n    }\r\n    return '#DDDDDD';\r\n}\r\n","import { DynamicTexture, Mesh, MeshBuilder, StandardMaterial, Texture } from 'babylonjs';\r\nimport { Scene } from 'babylonjs/scene';\r\nimport { getImage } from './textures/textureEngine';\r\nimport { getTerrainColor } from '../../colors';\r\nimport { Chunk } from '../10_Chunk';\r\nimport { AbstractRenderer } from './00_AbstractRenderer';\r\n\r\nexport class ChunkRenderer extends AbstractRenderer {\r\n    private texture: DynamicTexture;\r\n\r\n    constructor(protected object: Chunk, protected babylonScene: Scene) {\r\n        super(object, babylonScene);\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'chunk ' + object.id,\r\n            { width: 1600, height: 1600, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n\r\n        const texture = new DynamicTexture(\r\n            'chunkTexture ' + object.id,\r\n            { width: 16 * 16, height: 16 * 16 },\r\n            this.babylonScene,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n\r\n        this.texture = texture;\r\n        const material = new StandardMaterial('mat ' + object.id, this.babylonScene);\r\n        material.emissiveTexture = texture;\r\n        this.mesh.material = material;\r\n\r\n        this.update();\r\n    }\r\n\r\n    async update() {\r\n        this.mesh.position.x = this.object.position.x * 16 * 100;\r\n        this.mesh.position.y = -this.object.position.y * 16 * 100;\r\n\r\n        const ctx = this.texture.getContext();\r\n        this.drawTexture(ctx);\r\n        this.texture.update();\r\n    }\r\n\r\n    detach() {\r\n        if (this.babylonScene && this.mesh && this.texture) {\r\n            this.babylonScene.removeTexture(this.texture);\r\n            if (this.mesh.material) {\r\n                this.babylonScene.removeMaterial(this.mesh.material);\r\n            }\r\n        }\r\n\r\n        // Mesh detached by super\r\n        super.detach();\r\n    }\r\n\r\n    // Other functions:\r\n\r\n    static drawBasicTiling(chunk: Chunk, ctx: CanvasRenderingContext2D, shiftX: number, shiftY: number, size: number) {\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                if (chunk.ground[x] && chunk.ground[x][y]) {\r\n                    ctx.fillStyle = getTerrainColor(chunk.ground[x][y]);\r\n\r\n                    ctx.fillRect(shiftX + x * size, shiftY + y * size, size, size);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    drawTexture(ctx: CanvasRenderingContext2D) {\r\n        ChunkRenderer.drawBasicTiling(this.object, ctx, 0, 0, 16);\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                if (this.object.ground[x] && this.object.ground[x][y]) {\r\n                    if (this.object.ground[x][y] === 2) {\r\n                        // Water, should have transition\r\n                        this.drawTransition(ctx, x, y, [1, 3], 'grass_water');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    drawTransition(ctx: CanvasRenderingContext2D, x: number, y: number, tileType: number[], filePrefix: string) {\r\n        const posX = this.object.position.x * 16 + x - 8;\r\n        const posY = this.object.position.y * 16 + y - 8;\r\n\r\n        let sides = '';\r\n        if (tileType.includes(this.object.gameScene.getTile(posX, posY - 1))) sides += 'T';\r\n        if (tileType.includes(this.object.gameScene.getTile(posX + 1, posY))) sides += 'R';\r\n        if (tileType.includes(this.object.gameScene.getTile(posX, posY + 1))) sides += 'B';\r\n        if (tileType.includes(this.object.gameScene.getTile(posX - 1, posY))) sides += 'L';\r\n\r\n        if (sides === 'TB') {\r\n            const top = getImage(filePrefix + '_T');\r\n            if (top) ctx.drawImage(top, x * 16, y * 16);\r\n            const bottom = getImage(filePrefix + '_B');\r\n            if (bottom) ctx.drawImage(bottom, x * 16, y * 16);\r\n        } else if (sides === 'RL') {\r\n            const right = getImage(filePrefix + '_R');\r\n            if (right) ctx.drawImage(right, x * 16, y * 16);\r\n            const left = getImage(filePrefix + '_L');\r\n            if (left) ctx.drawImage(left, x * 16, y * 16);\r\n        } else {\r\n            if (sides.length > 0) {\r\n                const img = getImage(filePrefix + '_' + sides);\r\n                if (img) ctx.drawImage(img, x * 16, y * 16);\r\n            }\r\n        }\r\n\r\n        const corner = (shiftX: number, shiftY: number, blackList: string[], suffix: string) => {\r\n            if (\r\n                tileType.includes(this.object.gameScene.getTile(posX + shiftX, posY + shiftY)) &&\r\n                !blackList.reduce((prev, letter) => prev || sides.includes(letter), false)\r\n            ) {\r\n                const img = getImage(filePrefix + '_corner_' + suffix);\r\n                if (img) ctx.drawImage(img, x * 16, y * 16);\r\n            }\r\n        };\r\n\r\n        corner(-1, -1, ['L', 'T'], 'BR');\r\n        corner(+1, -1, ['R', 'T'], 'BL');\r\n        corner(-1, +1, ['L', 'B'], 'TR');\r\n        corner(+1, +1, ['R', 'B'], 'TL');\r\n    }\r\n}\r\n","import { Scene, Vector2 } from 'babylonjs';\r\nimport { AbstractGameObject } from './00_AbstractGameObject';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameEntity } from './20_AbstractGameEntity';\r\nimport { ChunkRenderer } from './renderers/60_ChunkRenderer';\r\n\r\nexport type tileType = number;\r\n\r\nexport interface serializedChunk {\r\n    x: number;\r\n    y: number;\r\n    ground: tileType[][];\r\n}\r\n\r\nexport class Chunk extends AbstractGameObject {\r\n    public ground: tileType[][] = [[]];\r\n\r\n    constructor(public gameScene: GameScene, x: number, y: number) {\r\n        super(gameScene);\r\n        this.position = new Vector2(x, y);\r\n    }\r\n\r\n    get id(): string {\r\n        return Chunk.getId(this.position.x, this.position.y);\r\n    }\r\n\r\n    serialize(): serializedChunk {\r\n        return {\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n            ground: this.ground,\r\n        };\r\n    }\r\n\r\n    deserialize(serialized: serializedChunk): void {\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.ground = serialized.ground;\r\n\r\n        this.update();\r\n    }\r\n\r\n    static getId(x: number, y: number): string {\r\n        return x.toString() + 'x' + y.toString();\r\n    }\r\n\r\n    hasEntity(entity: AbstractGameEntity) {\r\n        return (\r\n            entity.position.x > this.position.x * 16 - 8 &&\r\n            entity.position.x < this.position.x * 16 + 8 &&\r\n            entity.position.y > this.position.y * 16 - 8 &&\r\n            entity.position.y < this.position.y * 16 + 8\r\n        );\r\n    }\r\n\r\n    async attachRenderer(scene: Scene) {\r\n        super.attachRenderer(scene);\r\n\r\n        this.renderer = new ChunkRenderer(this, scene);\r\n    }\r\n}\r\n","import { AbstractGameObject } from '../gameObjects/00_AbstractGameObject';\r\n\r\nexport class IndexedList<T extends AbstractGameObject> {\r\n    values: { [key: string]: T } = {};\r\n\r\n    addMore(values: { [key: string]: T }) {\r\n        this.values = { ...this.values, ...values };\r\n    }\r\n\r\n    add(key: string, value: T) {\r\n        this.values[key] = value;\r\n    }\r\n\r\n    remove(key: string) {\r\n        if (!this.values[key]) return;\r\n        this.values[key].detachRenderer();\r\n        delete this.values[key];\r\n    }\r\n\r\n    update(key: string, serialized: any, smooth?: boolean) {\r\n        if (!this.values[key]) return;\r\n        this.values[key].deserialize(serialized, smooth);\r\n    }\r\n\r\n    updateOrCreate(key: string, serialized: any, newObjectCreator: () => T, smooth?: boolean) {\r\n        if (!this.values[key]) {\r\n            this.values[key] = newObjectCreator();\r\n        }\r\n        this.values[key].deserialize(serialized, smooth);\r\n    }\r\n\r\n    get(key: string) {\r\n        if (!this.values[key]) return null;\r\n        return this.values[key];\r\n    }\r\n\r\n    includes(key: string) {\r\n        return !!this.values[key];\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, key: string, index: number) => void) {\r\n        const keys = Object.keys(this.values);\r\n\r\n        keys.forEach((key, index) => {\r\n            callbackfn(this.values[key], key, index);\r\n        });\r\n    }\r\n\r\n    filter(callbackfn: (value: T, key: string, index: number) => boolean) {\r\n        const keys = Object.keys(this.values);\r\n\r\n        const result = new IndexedList<T>();\r\n\r\n        keys.forEach((key, index) => {\r\n            if (callbackfn(this.values[key], key, index)) {\r\n                result.add(key, this.values[key]);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    map(callbackfn: (value: T, key: string, index: number) => any) {\r\n        return Object.keys(this.values).map((key, index) => callbackfn(this.values[key], key, index));\r\n    }\r\n\r\n    getValues() {\r\n        return Object.values(this.values);\r\n    }\r\n\r\n    getKeys() {\r\n        return Object.keys(this.values);\r\n    }\r\n\r\n    length() {\r\n        return this.getKeys().length;\r\n    }\r\n}\r\n","import { Chunk } from './gameObjects/10_Chunk';\r\nimport { IndexedList } from './utils/IndexedList';\r\nimport { AbstractGameEntity } from './gameObjects/20_AbstractGameEntity';\r\n\r\nexport class GameScene {\r\n    entities = new IndexedList<AbstractGameEntity>();\r\n    chunks = new IndexedList<Chunk>();\r\n\r\n    tickAll(deltaTime: number) {\r\n        this.entities.forEach((value) => value.tick(deltaTime));\r\n        this.chunks.forEach((value) => value.tick(deltaTime));\r\n    }\r\n\r\n    getTile(x: number, y: number) {\r\n        const calcX = Math.floor(x) + 8;\r\n        const calcY = Math.floor(y) + 8;\r\n\r\n        const chunkX = Math.floor(calcX / 16);\r\n        const chunkY = Math.floor(calcY / 16);\r\n        const chunk = this.chunks.get(Chunk.getId(chunkX, chunkY));\r\n\r\n        if (!chunk || !chunk.ground[calcX - chunkX * 16] || !chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16]) {\r\n            return -1;\r\n        }\r\n\r\n        return chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16];\r\n    }\r\n\r\n    getColisions(entity: AbstractGameEntity) {\r\n        return this.entities.filter((value) => entity !== value && value.colidesWith(entity));\r\n    }\r\n\r\n    getClosestEntityOfType(entity: AbstractGameEntity, type: any) {\r\n        const closest = this.entities\r\n            .filter((e) => e instanceof type)\r\n            .getValues()\r\n            .sort((a, b) => this.distance(entity, a) - this.distance(entity, b));\r\n\r\n        if (closest[0]) {\r\n            return {\r\n                entity: closest[0],\r\n                distance: this.distance(entity, closest[0]),\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private distance(a: AbstractGameEntity, b: AbstractGameEntity) {\r\n        return Math.sqrt(Math.pow(a.position.x - b.position.x, 2) + Math.pow(a.position.y - b.position.y, 2));\r\n    }\r\n}\r\n","import { keyBindings } from '../shared/gameObjects/controllers/controllers/input/KeyboardController';\r\n\r\n// ARROWS\r\nexport const CONTROLS_ARROWS: keyBindings = {\r\n    left: 37,\r\n    right: 39,\r\n    up: 38,\r\n    down: 40,\r\n};\r\n\r\n// WASD\r\nexport const CONTROLS_WASD: keyBindings = {\r\n    left: 65,\r\n    right: 68,\r\n    up: 87,\r\n    down: 83,\r\n};\r\n","import { Mesh, MeshBuilder } from 'babylonjs';\r\nimport { Scene } from 'babylonjs/scene';\r\nimport { getSimpleMaterial } from './textures/textureEngine';\r\nimport { AbstractGameEntity } from '../20_AbstractGameEntity';\r\nimport { AbstractEntityRenderer } from './01_AbstractEntityRenderer';\r\n\r\n/**\r\n * Renders entity with interchangeable static materials.\r\n *\r\n * Material is updated on every `update()` call and is obtained calling `getMaterial` function\r\n */\r\nexport class StaticRenderer extends AbstractEntityRenderer {\r\n    constructor(\r\n        protected object: AbstractGameEntity,\r\n        protected babylonScene: Scene,\r\n        private getMaterial: () => string,\r\n    ) {\r\n        super(object, babylonScene);\r\n\r\n        const size = object.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            object.id,\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.update();\r\n    }\r\n\r\n    async update() {\r\n        super.update();\r\n        this.mesh.material = getSimpleMaterial(this.getMaterial(), this.babylonScene);\r\n    }\r\n}\r\n","import { Scene, Vector2 } from 'babylonjs';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameEntity, Platform, serializedEntity } from './20_AbstractGameEntity';\r\nimport { ControllerManager } from './controllers/ControllerManager';\r\nimport { ImmediateDeserializeController } from './controllers/controllers/deserializers/ImmediateDeserializeController';\r\nimport { StaticRenderer } from './renderers/11_StaticRenderer';\r\n\r\ntype treeTypes = 1 | 2 | 3 | 4;\r\n\r\nexport interface serializedTree {\r\n    size: treeTypes;\r\n}\r\n\r\nexport class Tree extends AbstractGameEntity {\r\n    public hitbox = { width: 0.2, height: 0.2 };\r\n\r\n    public size: treeTypes;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene, id);\r\n\r\n        this.controllerManager = new ControllerManager();\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedTree> {\r\n        let sup = super.serialize() as serializedEntity<serializedTree>;\r\n        sup.type = Tree.type;\r\n        sup.data = {\r\n            size: this.size,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedTree>): void {\r\n        if (serialized.type !== Tree.type) return;\r\n\r\n        this.size = serialized.data.size;\r\n        super.deserialize(serialized);\r\n    }\r\n\r\n    static get type() {\r\n        return 'tree';\r\n    }\r\n\r\n    async attachRenderer(scene: Scene) {\r\n        super.attachRenderer(scene);\r\n\r\n        this.renderer = new StaticRenderer(this, scene, () => this.getMaterial());\r\n    }\r\n\r\n    attachControllers(platform: Platform) {\r\n        if (platform === Platform.Server) {\r\n            this.controllerManager.attach(new ImmediateDeserializeController(this));\r\n        }\r\n        if (platform === Platform.Client) {\r\n            this.controllerManager.attach(new ImmediateDeserializeController(this));\r\n        }\r\n    }\r\n\r\n    getMaterial() {\r\n        switch (this.size) {\r\n            case 1:\r\n                return 'tree_small';\r\n            case 2:\r\n                return 'tree_big';\r\n            case 3:\r\n                return 'tree_short';\r\n            case 4:\r\n                return 'tree_tall';\r\n        }\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(200, 400);\r\n    }\r\n}\r\n","import { Scene, Vector2 } from 'babylonjs';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameEntity, Platform, serializedEntity } from './20_AbstractGameEntity';\r\nimport { ControllerManager } from './controllers/ControllerManager';\r\nimport { ImmediateDeserializeController } from './controllers/controllers/deserializers/ImmediateDeserializeController';\r\nimport { StaticRenderer } from './renderers/11_StaticRenderer';\r\n\r\nexport interface serializedStone {\r\n    size: 1 | 2;\r\n}\r\n\r\nexport class Stone extends AbstractGameEntity {\r\n    public hitbox = { width: 0.2, height: 0.2 };\r\n\r\n    public size: 1 | 2;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene, id);\r\n\r\n        this.controllerManager = new ControllerManager();\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedStone> {\r\n        let sup = super.serialize() as serializedEntity<serializedStone>;\r\n        sup.type = Stone.type;\r\n        sup.data = {\r\n            size: this.size,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedStone>): void {\r\n        if (serialized.type !== Stone.type) return;\r\n\r\n        this.size = serialized.data.size;\r\n        super.deserialize(serialized);\r\n    }\r\n\r\n    static get type() {\r\n        return 'stone';\r\n    }\r\n\r\n    async attachRenderer(scene: Scene) {\r\n        super.attachRenderer(scene);\r\n\r\n        this.renderer = new StaticRenderer(this, scene, () => (this.size === 1 ? 'rock_small' : 'rock_big'));\r\n    }\r\n\r\n    attachControllers(platform: Platform) {\r\n        if (platform === Platform.Server) {\r\n            this.controllerManager.attach(new ImmediateDeserializeController(this));\r\n        }\r\n        if (platform === Platform.Client) {\r\n            this.controllerManager.attach(new ImmediateDeserializeController(this));\r\n        }\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 100);\r\n    }\r\n}\r\n","import { Chicken } from '../../../60_Chicken';\r\nimport { Player } from '../../../60_Player';\r\nimport { AbstractController } from '../AbstractController';\r\n\r\nconst ROTATION_SPEED = 0.03;\r\nconst SPEED = 0.01;\r\nconst SPEED2 = 0.04;\r\n\r\nexport class ChickenAIController extends AbstractController {\r\n    angle: number = 0;\r\n\r\n    constructor(protected object: Chicken) {\r\n        super(object);\r\n    }\r\n\r\n    public tick(deltaTime: number) {\r\n        const closestPlayer = this.object.gameScene.getClosestEntityOfType(this.object, Player);\r\n        if (closestPlayer && closestPlayer.distance < 2) {\r\n            this.object.inLove = closestPlayer.entity.id;\r\n        }\r\n        if (closestPlayer && closestPlayer.distance < 10) {\r\n            let rotate = 0;\r\n            if (this.object.inLove !== closestPlayer.entity.id) {\r\n                rotate = Math.PI;\r\n            }\r\n\r\n            this.angle =\r\n                Math.atan2(\r\n                    closestPlayer.entity.position.y - this.object.position.y,\r\n                    closestPlayer.entity.position.x - this.object.position.x,\r\n                ) + rotate;\r\n\r\n            this.object.velocity.x = Math.cos(this.angle) * SPEED2;\r\n            this.object.velocity.y = Math.sin(this.angle) * SPEED2;\r\n        } else {\r\n            this.angle += (Math.random() - 0.5) * 2 * ROTATION_SPEED * deltaTime;\r\n\r\n            this.object.velocity.x = Math.cos(this.angle) * SPEED;\r\n            this.object.velocity.y = Math.sin(this.angle) * SPEED;\r\n        }\r\n\r\n        const ogX = this.object.position.x;\r\n        const ogY = this.object.position.y;\r\n\r\n        this.object.position.x += this.object.velocity.x;\r\n        this.object.position.y += this.object.velocity.y;\r\n\r\n        if (Math.abs(this.object.velocity.x) < 0.001) {\r\n            this.object.velocity.x = 0;\r\n        }\r\n        if (Math.abs(this.object.velocity.y) < 0.001) {\r\n            this.object.velocity.y = 0;\r\n        }\r\n\r\n        // Colisions\r\n        const colisions = this.object.gameScene.getColisions(this.object);\r\n        if (colisions.length() > 0) {\r\n            let colisionX = false;\r\n            let colisionY = false;\r\n\r\n            colisions.forEach((entity) => {\r\n                let colisionFromBottom =\r\n                    !(ogY - this.object.hitbox.height < entity.position.y + entity.hitbox.height) &&\r\n                    this.object.position.y - this.object.hitbox.height < entity.position.y + entity.hitbox.height;\r\n\r\n                let colisionFromLeft =\r\n                    !(ogX + this.object.hitbox.width > entity.position.x - entity.hitbox.width) &&\r\n                    this.object.position.x + this.object.hitbox.width > entity.position.x - entity.hitbox.width;\r\n\r\n                let colisionFromTop =\r\n                    !(ogY + this.object.hitbox.height > entity.position.y - entity.hitbox.height) &&\r\n                    this.object.position.y + this.object.hitbox.height > entity.position.y - entity.hitbox.height;\r\n\r\n                let colisionFromRight =\r\n                    !(ogX - this.object.hitbox.width < entity.position.x + entity.hitbox.width) &&\r\n                    this.object.position.x - this.object.hitbox.width < entity.position.x + entity.hitbox.width;\r\n\r\n                colisionX = colisionX || colisionFromLeft || colisionFromRight;\r\n                colisionY = colisionY || colisionFromBottom || colisionFromTop;\r\n            });\r\n\r\n            if (colisionX) {\r\n                this.object.position.x = ogX;\r\n                this.object.velocity.x = 0;\r\n            }\r\n            if (colisionY) {\r\n                this.object.position.y = ogY;\r\n                this.object.velocity.y = 0;\r\n            }\r\n        }\r\n\r\n        this.object.setDirty();\r\n\r\n        // TODO: Collisions\r\n    }\r\n}\r\n","import { Mesh, MeshBuilder } from 'babylonjs';\r\nimport { Scene } from 'babylonjs/scene';\r\nimport { getSimpleMaterial } from './textures/textureEngine';\r\nimport { AbstractGameEntity } from '../20_AbstractGameEntity';\r\nimport { AbstractEntityRenderer } from './01_AbstractEntityRenderer';\r\n\r\n/**\r\n * Renders entity with single static material.\r\n */\r\nexport class SimpleRenderer extends AbstractEntityRenderer {\r\n    constructor(protected object: AbstractGameEntity, protected babylonScene: Scene, private material: string) {\r\n        super(object, babylonScene);\r\n\r\n        const size = object.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            object.id,\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.mesh.material = getSimpleMaterial(material, this.babylonScene);\r\n\r\n        this.update();\r\n    }\r\n}\r\n","import { Scene, Vector2 } from 'babylonjs';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameEntity, Platform, serializedEntity } from './20_AbstractGameEntity';\r\nimport { ControllerManager } from './controllers/ControllerManager';\r\nimport { ChickenAIController } from './controllers/controllers/ai/ChickenAIController';\r\nimport { ImmediateDeserializeController } from './controllers/controllers/deserializers/ImmediateDeserializeController';\r\nimport { SmoothDeserializeController } from './controllers/controllers/deserializers/SmoothDeserializeController';\r\nimport { SimpleRenderer } from './renderers/10_SimpleRenderer';\r\n\r\nexport interface serializedChicken {\r\n    inLove: string;\r\n}\r\n\r\nexport class Chicken extends AbstractGameEntity {\r\n    public hitbox = { width: 0.2, height: 0.2 };\r\n\r\n    public inLove: string = '';\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene, id);\r\n\r\n        this.controllerManager = new ControllerManager();\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedChicken> {\r\n        let sup = super.serialize() as serializedEntity<serializedChicken>;\r\n        sup.type = Chicken.type;\r\n        sup.data = {\r\n            inLove: this.inLove,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedChicken>): void {\r\n        if (serialized.type !== Chicken.type) return;\r\n\r\n        super.deserialize(serialized);\r\n    }\r\n\r\n    static get type() {\r\n        return 'chicken';\r\n    }\r\n\r\n    async attachRenderer(scene: Scene) {\r\n        super.attachRenderer(scene);\r\n\r\n        this.renderer = new SimpleRenderer(this, scene, 'chicken');\r\n    }\r\n\r\n    attachControllers(platform: Platform) {\r\n        if (platform === Platform.Server) {\r\n            this.controllerManager.attach(new ChickenAIController(this));\r\n        }\r\n        if (platform === Platform.Client) {\r\n            this.controllerManager.attach(new SmoothDeserializeController(this));\r\n            this.controllerManager.invoke('setSmoothTime', 200);\r\n        }\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 100);\r\n    }\r\n}\r\n","import io from 'socket.io-client';\r\nimport { Player, serializedPlayer } from '../../../shared/gameObjects/60_Player';\r\nimport { GameScene } from '../../../shared/Scene';\r\nimport babylonjs from 'babylonjs';\r\nimport { serializedChunk, Chunk } from '../../../shared/gameObjects/10_Chunk';\r\nimport { messageEntities, messageError, messageLogin } from '../../../shared/network/messageTypes';\r\nimport { AbstractGameEntity, Platform, serializedEntity } from '../../../shared/gameObjects/20_AbstractGameEntity';\r\nimport { Tree } from '../../../shared/gameObjects/60_Tree';\r\nimport { Stone } from '../../../shared/gameObjects/60_Stone';\r\nimport md5 from 'md5';\r\nimport { Chicken } from '../../../shared/gameObjects/60_Chicken';\r\n\r\ntype callback = (data: any) => void;\r\n\r\nexport class NetworkClient {\r\n    private socket: SocketIOClient.Socket;\r\n    private userId: string;\r\n    private opened: boolean;\r\n    private callbacks: { [key: string]: callback } = {\r\n        authenticated: () => {},\r\n        updated: () => {},\r\n        invalidPassword: () => {},\r\n        disconnect: () => {},\r\n    };\r\n\r\n    constructor(private apiUrl: string, private scene: GameScene, private getBabylonScene: () => babylonjs.Scene) {}\r\n\r\n    public on(event: 'authenticated' | 'updated' | 'invalidPassword' | 'disconnect', callback: callback) {\r\n        this.callbacks[event] = callback;\r\n    }\r\n\r\n    public close() {\r\n        this.socket.disconnect();\r\n    }\r\n\r\n    public open() {\r\n        this.opened = true;\r\n        this.socket = io(this.apiUrl);\r\n        this.setListeners();\r\n\r\n        this.socket.on('auth', (data: serializedEntity<serializedPlayer>) => {\r\n            this.userId = data.id;\r\n            this.callbacks['authenticated'](data);\r\n            console.log('Joined game with player ', data.data.name, ' (' + data.id + ')');\r\n        });\r\n    }\r\n\r\n    public sendPlayerUpdate(player: Player) {\r\n        const payload: serializedEntity<serializedPlayer> = player.serialize();\r\n        this.socket.emit('update', payload);\r\n    }\r\n\r\n    public requestChunk(x: number, y: number) {\r\n        this.socket.emit('mapRequest', { x, y });\r\n    }\r\n\r\n    public auth(name: string, password: string) {\r\n        const payload: messageLogin = {\r\n            name,\r\n            passwordHash: md5(password),\r\n        };\r\n        this.socket.emit('login', payload);\r\n    }\r\n\r\n    private setListeners() {\r\n        this.socket.on('entities', async (data: messageEntities) => {\r\n            data.removed.forEach((entity) => entity.id !== this.userId && this.scene.entities.remove(entity.id));\r\n            data.updated /*.filter((entity) => {\r\n                const me = this.scene.entities.get(this.userId);\r\n                if (!me) return false;\r\n\r\n                const distX = Math.abs(Math.round(me.position.x) - entity.x) / 16;\r\n                const distY = Math.abs(Math.round(me.position.y) - entity.y) / 16;\r\n\r\n                return distX <= MAX_RENDER_DISTANCE && distY <= MAX_RENDER_DISTANCE;\r\n            })*/\r\n                .forEach(\r\n                    (entity) =>\r\n                        entity.id !== this.userId &&\r\n                        this.scene.entities.updateOrCreate(entity.id, entity, () => this.createEntity(entity)!),\r\n                );\r\n            this.callbacks.updated({});\r\n        });\r\n\r\n        this.socket.on('mapChunk', async (data: serializedChunk) => {\r\n            const id = Chunk.getId(data.x, data.y);\r\n\r\n            this.scene.chunks.updateOrCreate(id, data, () => {\r\n                const chunk = new Chunk(this.scene, data.x, data.y);\r\n                chunk.attachRenderer(this.getBabylonScene());\r\n                return chunk;\r\n            });\r\n\r\n            /*\r\n            for (let x = -1; x <= 1; x++) {\r\n                for (let y = -1; y <= 1; y++) {\r\n                    const ch = this.scene.chunks.get(Chunk.getId(data.x + x, data.y + y));\r\n                    if (ch) {\r\n                        ch.updateMesh();\r\n                    }\r\n                }\r\n            }\r\n            */\r\n        });\r\n\r\n        this.socket.on('err', async (data: messageError) => {\r\n            switch (data.error) {\r\n                case 'credentials':\r\n                    this.callbacks.invalidPassword(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    private createEntity(entity: serializedEntity<any>): AbstractGameEntity | undefined {\r\n        let e = null;\r\n        switch (entity.type) {\r\n            case 'player': {\r\n                e = new Player(this.scene, entity.id);\r\n                break;\r\n            }\r\n            case 'tree': {\r\n                e = new Tree(this.scene, entity.id);\r\n                break;\r\n            }\r\n            case 'stone': {\r\n                e = new Stone(this.scene, entity.id);\r\n                break;\r\n            }\r\n            case 'chicken': {\r\n                e = new Chicken(this.scene, entity.id);\r\n                break;\r\n            }\r\n        }\r\n        if (e) {\r\n            e.deserializeImmediatelly(entity);\r\n            e.attachControllers(Platform.Client);\r\n            return e;\r\n        }\r\n        console.error('Entity \"' + entity.type + ' does not exist!');\r\n    }\r\n}\r\n","export function shadeText(ctx: CanvasRenderingContext2D, text: string, x: number, y: number) {\r\n    ctx.strokeStyle = '#000000';\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.lineWidth = 2;\r\n\r\n    ctx.strokeText(text, x, y);\r\n    ctx.strokeText(text, x + 1, y + 1);\r\n    ctx.fillText(text, x, y);\r\n}\r\n","import React, { createRef } from 'react';\r\n\r\nimport babylonjs, { Vector3, UniversalCamera, StandardMaterial, MeshBuilder } from 'babylonjs';\r\nimport { Scene, Engine, SceneEventArgs } from 'react-babylonjs';\r\n\r\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { Player, serializedPlayer } from '../../shared/gameObjects/60_Player';\r\nimport { Chunk } from '../../shared/gameObjects/10_Chunk';\r\nimport { GameScene } from '../../shared/Scene';\r\nimport { CONTROLS_WASD } from '../keyBindings';\r\nimport { NetworkClient } from './network/Client';\r\nimport { minimap } from './gui/minimap';\r\nimport { debugInfo } from './gui/debugInfo';\r\nimport { CAMERA_ANGLE, CAMERA_DISTANCE } from '../../shared/constants';\r\nimport { shadeText } from './utils/shadeText';\r\nimport { AbstractGameEntity, Platform, serializedEntity } from '../../shared/gameObjects/20_AbstractGameEntity';\r\n\r\nexport const MAX_RENDER_DISTANCE = 3;\r\nconst REQUEST_DISTANCE = 3;\r\nconst DELETE_DISTANCE = 5;\r\n\r\ninterface IGameCoreProps {\r\n    apiUrl: string;\r\n}\r\n\r\ninterface IGameCoreState {\r\n    loggedIn: boolean;\r\n}\r\n\r\nexport class GameCore extends React.Component<IGameCoreProps, IGameCoreState> {\r\n    gameScene: GameScene;\r\n    me: Player | null = null;\r\n\r\n    babylonScene: babylonjs.Scene | null;\r\n    guiTexture: AdvancedDynamicTexture | null;\r\n    networkClient: NetworkClient;\r\n    state: IGameCoreState = {\r\n        loggedIn: false,\r\n    };\r\n\r\n    timer: NodeJS.Timeout;\r\n\r\n    zoom: number = 1;\r\n    renderDistance: number = MAX_RENDER_DISTANCE;\r\n\r\n    debug: boolean = false;\r\n\r\n    loginRef = createRef<HTMLInputElement>();\r\n    passwordRef = createRef<HTMLInputElement>();\r\n\r\n    mouseEntity: AbstractGameEntity | null;\r\n\r\n    constructor(props: IGameCoreProps) {\r\n        super(props);\r\n\r\n        this.gameScene = new GameScene();\r\n        this.networkClient = new NetworkClient(this.props.apiUrl, this.gameScene, () => this.babylonScene!);\r\n        this.networkClient.on('authenticated', (data: serializedEntity<serializedPlayer>) => this.initGame(data));\r\n        this.networkClient.on('invalidPassword', () => {\r\n            if (this.loginRef.current && this.passwordRef.current) {\r\n                this.loginRef.current.classList.add('shake');\r\n                this.passwordRef.current.classList.add('shake');\r\n                setTimeout(() => {\r\n                    if (this.loginRef.current && this.passwordRef.current) {\r\n                        this.loginRef.current.classList.remove('shake');\r\n                        this.passwordRef.current.classList.remove('shake');\r\n                    }\r\n                }, 600);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            this.gameScene.entities.forEach((entity) => entity.controllerManager.invoke('keyDown', event.keyCode));\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            this.gameScene.entities.forEach((entity) => entity.controllerManager.invoke('keyUp', event.keyCode));\r\n        });\r\n\r\n        document.addEventListener('wheel', (event) => {\r\n            this.zoom += (event.deltaY / Math.abs(event.deltaY)) * 0.12;\r\n            if (this.zoom < 0.5) this.zoom = 0.5;\r\n            if (this.zoom > 3) this.zoom = 3;\r\n        });\r\n\r\n        window.addEventListener('resize', (event) => {\r\n            this.resize();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resize();\r\n        this.networkClient.open();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        this.networkClient.close();\r\n    }\r\n\r\n    initGame(player: serializedEntity<serializedPlayer>) {\r\n        this.setState({\r\n            loggedIn: true,\r\n        });\r\n        this.me = new Player(this.gameScene, player.id);\r\n        this.me.attachRenderer(this.babylonScene!);\r\n        this.me.attachControllers(Platform.Client, true);\r\n        this.me.controllerManager.invoke('bindKeys', CONTROLS_WASD);\r\n        this.me.deserializeImmediatelly(player);\r\n        this.gameScene.entities.add(player.id, this.me);\r\n\r\n        (window as any).player = this.me;\r\n        (window as any).scene = this.gameScene;\r\n        (window as any).enableDebug = () => {\r\n            this.babylonScene && this.babylonScene.debugLayer.show();\r\n            this.debug = true;\r\n        };\r\n\r\n        this.timer = setInterval(async () => {\r\n            if (this.me) this.networkClient.sendPlayerUpdate(this.me);\r\n        }, 100);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        this.gameScene.entities.forEach((entity) => entity.tick(deltaTime));\r\n\r\n        this.unloadUnusedComponents();\r\n        this.requestChunks();\r\n\r\n        if (this.guiTexture) {\r\n            if (this.me) {\r\n                const gui = this.guiTexture.getContext();\r\n                const width = this.guiTexture.getSize().width;\r\n                const height = this.guiTexture.getSize().height;\r\n                gui.clearRect(0, 0, width, height);\r\n\r\n                minimap(this.guiTexture, this.gameScene, this.me);\r\n                if (this.debug) {\r\n                    debugInfo(this.guiTexture, this.gameScene, deltaTime);\r\n                }\r\n\r\n                this.guiTexture.update();\r\n            } else {\r\n                const gui = this.guiTexture.getContext();\r\n                const width = this.guiTexture.getSize().width;\r\n                const height = this.guiTexture.getSize().height;\r\n                gui.fillStyle = '#33334C';\r\n                gui.fillRect(0, 0, width, height);\r\n\r\n                gui.fillStyle = '#FFFFFF';\r\n                gui.font = '20px pixel';\r\n                gui.textBaseline = 'middle';\r\n                gui.textAlign = 'center';\r\n\r\n                shadeText(gui, 'Připojování k serveru...', width / 2, height / 2);\r\n\r\n                this.guiTexture.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        const canvas = document.getElementById('game') as HTMLCanvasElement;\r\n        if (canvas) {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        }\r\n    }\r\n\r\n    onSceneMount(event: SceneEventArgs) {\r\n        const { scene } = event;\r\n\r\n        this.babylonScene = (scene as any) as babylonjs.Scene;\r\n\r\n        const camera = new UniversalCamera('Camera', new Vector3(0, 0, CAMERA_DISTANCE), this.babylonScene);\r\n        camera.rotation = new Vector3(-CAMERA_ANGLE, 0, 0);\r\n        //camera.attachControl(event.canvas, true);\r\n\r\n        const skybox = MeshBuilder.CreateCylinder(\r\n            'skyBox',\r\n            {\r\n                height: CAMERA_DISTANCE * 100,\r\n                diameterTop: MAX_RENDER_DISTANCE * 16 * 100 * 3,\r\n                diameterBottom: MAX_RENDER_DISTANCE * 16 * 100 * 1,\r\n                tessellation: 24,\r\n            },\r\n            this.babylonScene,\r\n        );\r\n        const skyboxMaterial = new StandardMaterial('skyBox', this.babylonScene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n        skybox.rotation = new Vector3(Math.PI / 2, 0, 0);\r\n\r\n        this.guiTexture = AdvancedDynamicTexture.CreateFullscreenUI('GUI', true, scene);\r\n\r\n        scene.onPointerDown = (event, pickResult) => {\r\n            if (pickResult.hit && pickResult.pickedMesh && !pickResult.pickedMesh.name.startsWith('chunk')) {\r\n                this.mouseEntity = this.gameScene.entities.get(pickResult.pickedMesh.name.split(' ')[1]);\r\n                if (this.mouseEntity) {\r\n                    this.mouseEntity.controllerManager.invoke('mouseDown', event.button);\r\n                }\r\n            } else {\r\n                this.mouseEntity = null;\r\n            }\r\n        };\r\n        scene.onPointerUp = (event) => {\r\n            if (this.mouseEntity) {\r\n                this.mouseEntity.controllerManager.invoke('mouseUp', event.button);\r\n            }\r\n        };\r\n\r\n        /*\r\n        var pipeline = new BABYLON.LensRenderingPipeline(\r\n            'lens',\r\n            {\r\n                edge_blur: 0.2,\r\n                chromatic_aberration: 0.2,\r\n                distortion: 0.1,\r\n                grain_amount: 0.1,\r\n\r\n                dof_focus_distance: (CAMERA_DISTANCE * this.zoom) / Math.cos(CAMERA_ANGLE),\r\n                dof_aperture: 100, // set this very high for tilt-shift effect\r\n                dof_pentagon: true,\r\n                dof_gain: 1.0,\r\n                dof_threshold: 1.0,\r\n                dof_darken: 0.25,\r\n            },\r\n            scene as any,\r\n            1.0,\r\n            camera as any,\r\n        );\r\n        */\r\n\r\n        scene.getEngine().runRenderLoop(() => {\r\n            this.tick(scene.getEngine().getDeltaTime());\r\n\r\n            (async () => {\r\n                if (this.me) {\r\n                    camera.position = new Vector3(\r\n                        this.me.position.x * 100,\r\n                        -this.me.position.y * 100 - CAMERA_DISTANCE * this.zoom * Math.tan(CAMERA_ANGLE),\r\n                        -CAMERA_DISTANCE * this.zoom,\r\n                    );\r\n\r\n                    //pipeline.setFocusDistance((CAMERA_DISTANCE * this.zoom) / Math.cos(CAMERA_ANGLE));\r\n\r\n                    skybox.position.x = this.me.position.x * 100;\r\n                    skybox.position.y = -this.me.position.y * 100;\r\n                }\r\n\r\n                this.renderDistance = Math.min(Math.ceil(this.zoom * 2), MAX_RENDER_DISTANCE);\r\n            })();\r\n\r\n            if (scene) {\r\n                scene.render();\r\n            }\r\n        });\r\n    }\r\n\r\n    unloadUnusedComponents() {\r\n        if (this.me) {\r\n            this.gameScene.chunks.forEach((chunk) => {\r\n                const distX = Math.abs(Math.round(this.me!.position.x / 16) - chunk.position.x);\r\n                const distY = Math.abs(Math.round(this.me!.position.y / 16) - chunk.position.y);\r\n                if (distX > this.renderDistance || distY > this.renderDistance) {\r\n                    chunk.setVisibility(false);\r\n                    if (distX > DELETE_DISTANCE || distY > DELETE_DISTANCE) {\r\n                        this.gameScene.chunks.remove(chunk.id);\r\n                    }\r\n                } else {\r\n                    chunk.setVisibility(true);\r\n                }\r\n            });\r\n\r\n            this.gameScene.entities.forEach((entity) => {\r\n                const distX = Math.abs(Math.round(this.me!.position.x) - entity.position.x) / 16;\r\n                const distY = Math.abs(Math.round(this.me!.position.y) - entity.position.y) / 16;\r\n\r\n                if (distX > this.renderDistance || distY > this.renderDistance) {\r\n                    entity.setVisibility(false);\r\n                    if (distX > DELETE_DISTANCE || distY > DELETE_DISTANCE) {\r\n                        this.gameScene.entities.remove(entity.id);\r\n                    }\r\n                } else {\r\n                    entity.setVisibilityAttachRenderer(true, this.babylonScene!);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    requestChunks() {\r\n        if (this.me) {\r\n            for (let x = -REQUEST_DISTANCE; x <= REQUEST_DISTANCE; x++) {\r\n                for (let y = -REQUEST_DISTANCE; y <= REQUEST_DISTANCE; y++) {\r\n                    const chunkX = Math.round(this.me.position.x / 16) + x;\r\n                    const chunkY = Math.round(this.me.position.y / 16) + y;\r\n                    const chunkId = Chunk.getId(chunkX, chunkY);\r\n\r\n                    if (!this.gameScene.chunks.includes(chunkId)) {\r\n                        this.networkClient.requestChunk(chunkX, chunkY);\r\n\r\n                        const chunk = new Chunk(this.gameScene, chunkX, chunkY);\r\n                        chunk.attachRenderer(this.babylonScene!);\r\n\r\n                        this.gameScene.chunks.add(chunkId, chunk);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.state.loggedIn && (\r\n                    <div className=\"center\">\r\n                        <p>Přihlaste se, nebo si vytvořte účet:</p>\r\n                        <p>\r\n                            <input type=\"text\" placeholder=\"Jméno\" ref={this.loginRef} />\r\n                        </p>\r\n                        <p>\r\n                            <input type=\"password\" placeholder=\"Heslo\" ref={this.passwordRef} />\r\n                        </p>\r\n                        <p>\r\n                            <button\r\n                                onClick={() =>\r\n                                    this.networkClient.auth(\r\n                                        this.loginRef!.current!.value,\r\n                                        this.passwordRef!.current!.value,\r\n                                    )\r\n                                }\r\n                            >\r\n                                Přihlásit se!\r\n                            </button>\r\n                        </p>\r\n                    </div>\r\n                )}\r\n                <Engine antialias={true} canvasId=\"game\">\r\n                    <Scene onSceneMount={(event: SceneEventArgs) => this.onSceneMount(event)}>\r\n                        <></>\r\n                    </Scene>\r\n                </Engine>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { GameScene } from '../../../shared/Scene';\r\nimport { Player } from '../../../shared/gameObjects/60_Player';\r\nimport { shadeText } from '../utils/shadeText';\r\nimport { getEntityColor, getTerrainColor } from '../../../shared/colors';\r\n\r\nconst MINIMAP_DISTANCE = 32;\r\nconst MINIMAP_SCALE = 2;\r\nconst BORDER_WIDTH = MINIMAP_SCALE + 1;\r\n\r\nexport function minimap(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, me: Player) {\r\n    const gui = guiTexture.getContext();\r\n    const width = guiTexture.getSize().width;\r\n    //const height = guiTexture.getSize().height;\r\n\r\n    const x0 = width - 30 - MINIMAP_SCALE * MINIMAP_DISTANCE;\r\n    const y0 = 20 + MINIMAP_SCALE * MINIMAP_DISTANCE;\r\n\r\n    const shiftX = Math.floor((Math.floor(me.position.x) - me.position.x) * MINIMAP_SCALE);\r\n    const shiftY = Math.floor((Math.floor(me.position.y) - me.position.y) * MINIMAP_SCALE);\r\n\r\n    gui.fillStyle = '#000000';\r\n    gui.fillRect(\r\n        x0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\r\n        y0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\r\n    );\r\n\r\n    for (let x = -MINIMAP_DISTANCE; x <= MINIMAP_DISTANCE + 1; x++) {\r\n        for (let y = -MINIMAP_DISTANCE; y <= MINIMAP_DISTANCE + 1; y++) {\r\n            gui.fillStyle = getTerrainColor(gameScene.getTile(me.position.x + x, me.position.y + y));\r\n            gui.fillRect(\r\n                x0 + x * MINIMAP_SCALE + shiftX,\r\n                y0 + y * MINIMAP_SCALE + shiftY,\r\n                MINIMAP_SCALE,\r\n                MINIMAP_SCALE,\r\n            );\r\n        }\r\n    }\r\n\r\n    gameScene.entities\r\n        .filter(\r\n            (entity) =>\r\n                Math.abs(entity.position.x - me.position.x) <= MINIMAP_DISTANCE + 1.5 &&\r\n                Math.abs(entity.position.y - me.position.y) <= MINIMAP_DISTANCE + 1.5,\r\n        )\r\n        .forEach((entity) => {\r\n            gui.fillStyle = getEntityColor(entity.serialize().type);\r\n            gui.fillRect(\r\n                Math.floor(x0 + (entity.position.x - me.position.x) * MINIMAP_SCALE),\r\n                Math.floor(y0 + (entity.position.y - me.position.y) * MINIMAP_SCALE),\r\n                MINIMAP_SCALE,\r\n                MINIMAP_SCALE,\r\n            );\r\n        });\r\n\r\n    gui.lineWidth = BORDER_WIDTH;\r\n    gui.strokeStyle = '#000000';\r\n    gui.strokeRect(\r\n        x0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH + 2,\r\n        y0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH + 2,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 - 4 + MINIMAP_SCALE,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 - 4 + MINIMAP_SCALE,\r\n    );\r\n\r\n    gui.font = '16px pixel';\r\n    gui.textBaseline = 'top';\r\n    gui.textAlign = 'center';\r\n    shadeText(gui, 'x', x0, y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10);\r\n    gui.textAlign = 'right';\r\n    shadeText(\r\n        gui,\r\n        Math.round(me.position.x).toString(),\r\n        x0 - 10,\r\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\r\n    );\r\n    gui.textAlign = 'left';\r\n    shadeText(\r\n        gui,\r\n        Math.round(me.position.y).toString(),\r\n        x0 + 10,\r\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\r\n    );\r\n\r\n    guiTexture.update();\r\n}\r\n","import { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { GameScene } from '../../../shared/Scene';\r\nimport { shadeText } from '../utils/shadeText';\r\n\r\nexport function debugInfo(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, deltaTime: number) {\r\n    const gui = guiTexture.getContext();\r\n\r\n    let x = 30;\r\n    let y = 20;\r\n\r\n    const values: { [key: string]: string } = {\r\n        FPS: (1000 / deltaTime).toFixed(2),\r\n        'Enabled entities':\r\n            gameScene.entities.filter((value) => value.getVisibility()).length() +\r\n            ' (of ' +\r\n            gameScene.entities.length() +\r\n            ' loaded)',\r\n        'Enabled chunks':\r\n            gameScene.chunks.filter((value) => value.getVisibility()).length() +\r\n            ' (of ' +\r\n            gameScene.chunks.length() +\r\n            ' loaded)',\r\n    };\r\n\r\n    gui.font = '16px pixel';\r\n    gui.textBaseline = 'top';\r\n    gui.textAlign = 'left';\r\n\r\n    Object.keys(values).forEach((key) => {\r\n        shadeText(gui, key + ': ' + values[key], x, y);\r\n        y += 20;\r\n    });\r\n\r\n    guiTexture.update();\r\n}\r\n","import React from 'react';\r\nimport { GameCore } from './gameMechanics/GameCore';\r\nimport { loadTextures } from '../shared/gameObjects/renderers/textures/textureEngine';\r\n\r\ninterface IAppProps {}\r\n\r\ninterface IAppState {\r\n    status: 'loading' | 'ingame';\r\n    textures: {\r\n        loaded: number;\r\n        of: number;\r\n    };\r\n}\r\n\r\nclass App extends React.Component<IAppProps, IAppState> {\r\n    apiUrl = 'https://randombot-server.herokuapp.com/';\r\n\r\n    state: IAppState = {\r\n        status: 'loading',\r\n        textures: {\r\n            loaded: 0,\r\n            of: 0,\r\n        },\r\n    };\r\n\r\n    constructor(props: IAppProps) {\r\n        super(props);\r\n\r\n        if (window.location.host.includes('localhost')) {\r\n            this.apiUrl = 'http://localhost:80/';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            textures: {\r\n                loaded: 0,\r\n                of: loadTextures(\r\n                    () => {\r\n                        this.setState({ status: 'ingame' });\r\n                    },\r\n                    (loaded, of) => {\r\n                        this.setState({\r\n                            textures: {\r\n                                loaded,\r\n                                of,\r\n                            },\r\n                        });\r\n                    },\r\n                ),\r\n            },\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.status === 'loading' && (\r\n                    <div className=\"center\">\r\n                        Načítání textur... ({this.state.textures.loaded}/{this.state.textures.of})\r\n                    </div>\r\n                )}\r\n                {this.state.status === 'ingame' && <GameCore apiUrl={this.apiUrl} />}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './frontend/index.css';\r\nimport App from './frontend/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}