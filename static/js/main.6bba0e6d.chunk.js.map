{"version":3,"sources":["gameMechanics/textures/texturePack.ts","gameMechanics/textures/textureEngine.ts","gameMechanics/gameObjects/AbstractGameObject.ts","gameMechanics/textures/AnimatedTexture.ts","gameMechanics/gameObjects/Player.tsx","gameMechanics/gameObjects/Chunk.tsx","gameMechanics/Scene.ts","keyBindings.ts","gameMechanics/network/NetworkClient.ts","gameMechanics/GameCore.tsx","gameMechanics/gui/minimap.ts","App.tsx","serviceWorker.js","index.js"],"names":["textures","player","filename","width","animations","default","start","end","type","walking","inventory_opening","inventory_open","inventory_closing","equip","unequip","mine","eat","interact","rock_big","rock_small","bush","tree_big","tree_small","grass_water_L","grass_water_R","grass_water_T","grass_water_B","grass_water_TL","grass_water_RB","grass_water_TR","grass_water_BL","grass_water_TBL","grass_water_TRL","grass_water_RBL","grass_water_TRB","grass_water_TRBL","grass_water_corner_BL","grass_water_corner_BR","grass_water_corner_TL","grass_water_corner_TR","resourceFiles","Object","values","map","texture","filter","v","i","indexOf","atlases","loaded","RESOURCES_LOCATION","createMaterial","scene","material","StandardMaterial","emissiveTexture","opacityTexture","getImage","console","warn","AbstractGameObject","gameScene","babylonScene","mesh","position","Vector2","Zero","this","removeMesh","deltaTime","visible","setEnabled","AnimatedTexture","textureAtlas","animation","animationQueue","frame","direction","interval","textureScale","t","Texture","NEAREST_NEAREST","uOffset","vOffset","uScale","vScale","hasAlpha","queue","setInterval","tick","length","unskipable","isLast","keys","includes","push","skippable","framesCount","Math","abs","haveNextAnimation","shift","newAnimation","animationDir","error","removeTexture","Player","id","velocityX","velocityY","targetX","targetY","finalVelocityX","finalVelocityY","targetTime","keyBindings","up","down","left","right","keysPressed","titleTexture","x","y","serialized","smooth","updateMesh","deltaTimeModified","movingX","movingY","diagonalModifier","sqrt","pow","keyCode","key","newBindings","MeshBuilder","CreatePlane","height","sideOrientation","Mesh","FRONTSIDE","getTexture","title","Vector3","DynamicTexture","LINEAR_LINEAR","ctx","getContext","fillStyle","fillRect","getSize","font","textBaseline","textAlign","fillText","update","parent","queueOnce","detach","child","getChildMeshes","removeMaterial","Chunk","ground","getTerrainColor","drawTransition","tileType","filePrefix","posX","posY","sides","getTile","top","drawImage","bottom","img","corner","shiftX","shiftY","blackList","suffix","reduce","prev","letter","getId","toString","number","GameScene","players","IndexedList","chunks","forEach","value","calcX","floor","calcY","chunkX","chunkY","chunk","get","detachBabylon","deserialize","newObjectCreator","callbackfn","index","result","add","CONTROLS_WASD","NetworkClient","apiUrl","getBabylonScene","socket","userId","opened","callbacks","authenticated","updated","event","callback","disconnect","io","setListeners","on","data","log","emit","content","serialize","setVisibility","updateOrCreate","attachBabylon","GameCore","props","me","guiTexture","networkClient","state","timer","zoom","initGame","document","addEventListener","keyDown","keyUp","preventDefault","deltaY","window","resize","open","clearInterval","close","bindKeys","sendPlayerUpdate","round","remove","chunkId","requestChunk","gui","clearRect","x0","MINIMAP_SCALE","y0","minimap","canvas","getElementById","innerWidth","innerHeight","camera","UniversalCamera","rotation","AdvancedDynamicTexture","CreateFullscreenUI","getEngine","runRenderLoop","getDeltaTime","render","antialias","canvasId","onSceneMount","React","Component","App","status","of","onLoad","onStateChange","setState","Image","onload","onerror","src","style","transform","color","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6bba0e6d.chunk.js","sourcesContent":["import { texturePack } from './textureEngine';\n\nexport const textures: texturePack = {\n    player: {\n        filename: 'Character.png',\n        width: 57,\n        animations: {\n            default: {\n                start: 0,\n                end: 0,\n                type: 'frame',\n            },\n            walking: {\n                start: 0,\n                end: 7,\n                type: 'loop',\n            },\n            inventory_opening: {\n                start: 8,\n                end: 11,\n                type: 'once',\n            },\n            inventory_open: {\n                start: 11,\n                end: 11,\n                type: 'frame',\n            },\n            inventory_closing: {\n                start: 11,\n                end: 8,\n                type: 'once',\n            },\n            equip: {\n                start: 12,\n                end: 19,\n                type: 'once',\n            },\n            unequip: {\n                start: 19,\n                end: 12,\n                type: 'once',\n            },\n            mine: {\n                start: 20,\n                end: 22,\n                type: 'boomerang',\n            },\n            eat: {\n                start: 23,\n                end: 51,\n                type: 'once',\n            },\n            interact: {\n                start: 52,\n                end: 56,\n                type: 'once',\n            },\n        },\n    },\n    rock_big: {\n        filename: 'rock_big.png',\n        width: 1,\n        animations: {},\n    },\n    rock_small: {\n        filename: 'rock_small.png',\n        width: 1,\n        animations: {},\n    },\n    bush: {\n        filename: 'bush.png',\n        width: 1,\n        animations: {},\n    },\n    tree_big: {\n        filename: 'tree_big.png',\n        width: 1,\n        animations: {},\n    },\n    tree_small: {\n        filename: 'tree_small.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_L: {\n        filename: 'grass_water_L.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_R: {\n        filename: 'grass_water_R.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_T: {\n        filename: 'grass_water_T.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_B: {\n        filename: 'grass_water_B.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_TL: {\n        filename: 'grass_water_TL.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_RB: {\n        filename: 'grass_water_RB.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_TR: {\n        filename: 'grass_water_TR.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_BL: {\n        filename: 'grass_water_BL.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_TBL: {\n        filename: 'grass_water_TBL.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_TRL: {\n        filename: 'grass_water_TRL.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_RBL: {\n        filename: 'grass_water_RBL.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_TRB: {\n        filename: 'grass_water_TRB.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_TRBL: {\n        filename: 'grass_water_TRBL.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_corner_BL: {\n        filename: 'grass_water_corner_BL.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_corner_BR: {\n        filename: 'grass_water_corner_BR.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_corner_TL: {\n        filename: 'grass_water_corner_TL.png',\n        width: 1,\n        animations: {},\n    },\n    grass_water_corner_TR: {\n        filename: 'grass_water_corner_TR.png',\n        width: 1,\n        animations: {},\n    },\n};\n","import { Texture, Scene, StandardMaterial } from '@babylonjs/core';\nimport { textures } from './texturePack';\n\nexport interface texturePack {\n    [name: string]: {\n        filename: string;\n        width: number;\n        animations: { [name: string]: { start: number; end: number; type: 'loop' | 'once' | 'boomerang' | 'frame' } };\n    };\n}\n\nlet resourceFiles = Object.values(textures).map((texture) => texture.filename);\nresourceFiles = resourceFiles.filter((v, i) => resourceFiles.indexOf(v) === i);\n\nlet atlases: { [key: string]: HTMLImageElement } = {};\n\nlet loaded = 0;\n\nexport const RESOURCES_LOCATION = '/randomgame/resources/textures/';\n\nexport function loadTextures(onLoad: () => void, onStateChange?: (loaded: number, of: number) => void) {\n    if (resourceFiles.length === 0) {\n        onStateChange && onStateChange(0, resourceFiles.length);\n        onLoad();\n    }\n\n    resourceFiles.forEach((filename) => {\n        atlases[filename] = new Image();\n        atlases[filename].onload = () => {\n            loaded++;\n            onStateChange && onStateChange(loaded, resourceFiles.length);\n\n            if (loaded === resourceFiles.length) {\n                onLoad();\n            }\n        };\n        atlases[filename].onerror = () => {\n            console.error('Error loading resource file: ', filename);\n        };\n        atlases[filename].src = RESOURCES_LOCATION + filename;\n    });\n\n    return resourceFiles.length;\n}\n\nexport function createTexture(texture: string, scene: Scene) {\n    const t = new Texture(RESOURCES_LOCATION + textures[texture].filename, scene, false, true, Texture.NEAREST_SAMPLINGMODE);\n    t.uOffset = 0;\n    t.vOffset = 0;\n    t.uScale = 1 / textures[texture].width;\n    t.vScale = 1;\n    t.hasAlpha = true;\n    return t;\n}\n\nexport function createMaterial(texture: Texture, scene: Scene) {\n    const material = new StandardMaterial('mat', scene);\n    material.emissiveTexture = texture;\n    material.opacityTexture = texture;\n\n    return material;\n}\n\nexport function getImage(texture: string): HTMLImageElement | null {\n    if (!textures[texture]) {\n        console.warn('Image ' + texture + ' not found!');\n        return null;\n    }\n    return atlases[textures[texture].filename];\n}\n","import { Mesh, Vector2, Scene } from '@babylonjs/core';\nimport { GameScene } from '../Scene';\n\nexport abstract class AbstractGameObject {\n    protected babylonScene: Scene | null = null;\n    protected mesh: Mesh | null = null;\n    public position: Vector2 = Vector2.Zero();\n\n    constructor(protected gameScene: GameScene) {}\n\n    attachBabylon(babylonScene: Scene): AbstractGameObject {\n        this.babylonScene = babylonScene;\n\n        return this;\n    }\n\n    detachBabylon(): AbstractGameObject {\n        if (this.babylonScene && this.mesh) {\n            this.babylonScene.removeMesh(this.mesh, true);\n            this.babylonScene = null;\n        }\n\n        return this;\n    }\n\n    abstract serialize(): any;\n\n    abstract deserialize(serialized: any): void;\n\n    tick(deltaTime: number): void {}\n\n    abstract async updateMesh(): Promise<void>;\n\n    setVisibility(visible: boolean) {\n        if (this.mesh) this.mesh.setEnabled(visible);\n    }\n\n    abstract get id(): string;\n}\n","import { Texture, Scene } from '@babylonjs/core';\nimport { textures } from './texturePack';\nimport { RESOURCES_LOCATION } from './textureEngine';\n\nconst TIME_PER_FRAME = 80;\n\nexport class AnimatedTexture {\n    private textureAtlas: string;\n    private texture: Texture;\n    private animationQueue: { texture: string; skippable: boolean }[] = [];\n    private frame: number = 0;\n    private direction: number = 1;\n    private interval: NodeJS.Timeout;\n\n    private textureScale = 1;\n\n    constructor(textureAtlas: string, private scene: Scene, animation: string = 'default') {\n        this.textureAtlas = textureAtlas;\n        this.textureScale = 1 / textures[textureAtlas].width;\n\n        const t = new Texture(\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\n            scene,\n            false,\n            true,\n            Texture.NEAREST_NEAREST,\n        );\n        t.uOffset = this.textureScale * textures[textureAtlas].animations[animation].start;\n        t.vOffset = 0;\n        t.uScale = this.textureScale;\n        t.vScale = 1;\n        t.hasAlpha = true;\n\n        this.texture = t;\n\n        this.queue(animation);\n        this.interval = setInterval(() => this.tick(), TIME_PER_FRAME);\n    }\n\n    getTexture() {\n        return this.texture;\n    }\n\n    isLast(animation: string) {\n        return this.animationQueue[this.animationQueue.length - 1].texture === animation;\n    }\n\n    queueOnce(animation: string, unskipable?: boolean) {\n        if (!this.isLast(animation)) {\n            this.queue(animation, unskipable);\n        }\n    }\n\n    queue(animation: string, unskipable?: boolean) {\n        if (!Object.keys(textures[this.textureAtlas].animations).includes(animation)) {\n            console.warn('Animation does not exist');\n            this.animationQueue.push({ texture: 'default', skippable: true });\n            return;\n        }\n\n        if (this.animationQueue.length > 1 && this.animationQueue[this.animationQueue.length - 1].skippable) {\n            this.animationQueue[this.animationQueue.length - 1] = { texture: animation, skippable: !unskipable };\n        } else {\n            this.animationQueue.push({ texture: animation, skippable: !unskipable });\n        }\n    }\n\n    tick() {\n        if (!this.texture) {\n            console.error('Texture is null');\n            return;\n        }\n\n        this.frame += this.direction;\n\n        const animation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\n        const framesCount = Math.abs(animation.start - animation.end);\n\n        const haveNextAnimation = this.animationQueue.length > 1;\n\n        if (this.frame > framesCount) {\n            // At the right end\n\n            switch (animation.type) {\n                case 'loop':\n                    this.direction = 1;\n                    this.frame = 0;\n                    if (haveNextAnimation) {\n                        this.animationQueue.shift();\n                    }\n                    break;\n                case 'once':\n                    this.direction = 1;\n                    if (haveNextAnimation) {\n                        this.frame = 0;\n                        this.animationQueue.shift();\n                    } else {\n                        this.frame = framesCount;\n                    }\n                    break;\n                case 'boomerang':\n                    this.direction = -1;\n                    this.frame -= 2;\n                    break;\n                case 'frame':\n                    this.direction = 1;\n                    this.frame = 0;\n                    if (haveNextAnimation) {\n                        this.animationQueue.shift();\n                    }\n                    break;\n            }\n        }\n\n        if (this.frame < 0) {\n            // At the left end - Can happen just with boomerang\n            this.direction = 1;\n            if (haveNextAnimation) {\n                this.frame = 0;\n                this.animationQueue.shift();\n            } else {\n                this.frame = 0;\n            }\n        }\n\n        const newAnimation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\n        const animationDir = newAnimation.start > newAnimation.end ? -1 : 1;\n        this.texture.uOffset = (this.frame * animationDir + newAnimation.start) * this.textureScale;\n    }\n\n    detach() {\n        this.scene.removeTexture(this.texture);\n    }\n}\n","import { Vector3, Mesh, Scene, MeshBuilder, DynamicTexture, Texture } from '@babylonjs/core';\nimport { createMaterial } from '../textures/textureEngine';\nimport { AbstractGameObject } from './AbstractGameObject';\nimport { AnimatedTexture } from '../textures/AnimatedTexture';\nimport { GameScene } from '../Scene';\n\nexport interface serializedPlayer {\n    x: number;\n    y: number;\n    velocityX: number;\n    velocityY: number;\n}\n\nexport interface keyBindings {\n    up: number;\n    down: number;\n    left: number;\n    right: number;\n}\n\nconst SPEED_CHANGE = 0.2;\nconst SLOWING = 0.95;\nconst MODIFIER = 0.1;\nconst SMOOTH_TIME = 50;\n\nexport class Player extends AbstractGameObject {\n    private velocityX: number = 0;\n    private velocityY: number = 0;\n\n    // SMOOTHING\n    private targetX: number = 0;\n    private targetY: number = 0;\n    private finalVelocityX: number = 0;\n    private finalVelocityY: number = 0;\n    private targetTime: number = -1;\n\n    private keyBindings: keyBindings = {\n        up: 0,\n        down: 0,\n        left: 0,\n        right: 0,\n    };\n    private keysPressed: number[] = [];\n\n    private texture: AnimatedTexture;\n    private titleTexture: DynamicTexture;\n\n    constructor(gameScene: GameScene, public id: string) {\n        super(gameScene);\n    }\n\n    serialize(): serializedPlayer {\n        return {\n            x: this.position.x,\n            y: this.position.y,\n            velocityX: this.velocityX,\n            velocityY: this.velocityY,\n        };\n    }\n\n    deserialize(serialized: serializedPlayer, smooth?: boolean): void {\n        if (smooth) {\n            this.targetX = serialized.x;\n            this.targetY = serialized.y;\n            this.finalVelocityX = serialized.velocityX;\n            this.finalVelocityY = serialized.velocityY;\n            this.targetTime = SMOOTH_TIME;\n            this.velocityX = (serialized.x - this.position.x) / SMOOTH_TIME;\n            this.velocityY = (serialized.y - this.position.y) / SMOOTH_TIME;\n        } else {\n            this.position.x = serialized.x;\n            this.position.y = serialized.y;\n            this.velocityX = serialized.velocityX;\n            this.velocityY = serialized.velocityY;\n        }\n    }\n\n    tick(deltaTime: number) {\n        if (this.targetTime > 0) {\n            this.position.x += this.velocityX * deltaTime;\n            this.position.y += this.velocityY * deltaTime;\n            this.targetTime -= deltaTime;\n\n            if (this.targetTime <= 0) {\n                this.position.x = this.targetX;\n                this.position.y = this.targetY;\n                this.velocityX = this.finalVelocityX;\n                this.velocityY = this.finalVelocityY;\n            }\n\n            this.updateMesh();\n            return;\n        }\n\n        if (!this.keyBindings.up && !this.keyBindings.down && !this.keyBindings.left && !this.keyBindings.right) {\n            this.position.x += this.velocityX;\n            this.position.y += this.velocityY;\n\n            this.updateMesh();\n            return;\n        }\n\n        const deltaTimeModified = MODIFIER * deltaTime;\n\n        let movingX = false;\n        let movingY = false;\n\n        const diagonalModifier = Math.sqrt(2);\n\n        if (this.keysPressed.includes(this.keyBindings.left) || this.keysPressed.includes(this.keyBindings.right)) {\n            movingX = true;\n        }\n        if (this.keysPressed.includes(this.keyBindings.up) || this.keysPressed.includes(this.keyBindings.down)) {\n            movingY = true;\n        }\n\n        if (this.keysPressed.includes(this.keyBindings.left)) {\n            // Left\n            this.velocityX -= (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\n        }\n        if (this.keysPressed.includes(this.keyBindings.right)) {\n            // Right\n            this.velocityX += (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\n        }\n        if (this.keysPressed.includes(this.keyBindings.up)) {\n            // Up\n            this.velocityY -= (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\n        }\n        if (this.keysPressed.includes(this.keyBindings.down)) {\n            // Down\n            this.velocityY += (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\n        }\n\n        this.position.x += this.velocityX * deltaTimeModified;\n        this.position.y += this.velocityY * deltaTimeModified;\n\n        this.velocityX *= Math.pow(SLOWING, deltaTimeModified);\n        this.velocityY *= Math.pow(SLOWING, deltaTimeModified);\n\n        if (Math.abs(this.velocityX) < 0.1) {\n            this.velocityX = 0;\n        }\n        if (Math.abs(this.velocityY) < 0.1) {\n            this.velocityY = 0;\n        }\n\n        this.updateMesh();\n    }\n\n    // ========== CONTROLS ===========\n\n    keyDown(keyCode: number) {\n        if (!this.keysPressed.includes(keyCode)) {\n            this.keysPressed.push(keyCode);\n        }\n    }\n\n    keyUp(keyCode: number) {\n        if (this.keysPressed.includes(keyCode)) {\n            this.keysPressed = this.keysPressed.filter((key) => key !== keyCode);\n        }\n    }\n\n    bindKeys(newBindings: Partial<keyBindings>) {\n        this.keyBindings = { ...this.keyBindings, ...newBindings };\n    }\n\n    // ========== BABYLON ===========\n\n    attachBabylon(scene: Scene) {\n        super.attachBabylon(scene);\n\n        if (!this.babylonScene) return this;\n\n        this.mesh = MeshBuilder.CreatePlane(\n            'player',\n            { width: 100, height: 200, sideOrientation: Mesh.FRONTSIDE },\n            this.babylonScene,\n        );\n        this.texture = new AnimatedTexture('player', this.babylonScene, 'default');\n        this.mesh.material = createMaterial(this.texture.getTexture(), this.babylonScene);\n\n        // Player title\n        const title = MeshBuilder.CreatePlane(\n            'title',\n            { width: 200, height: 40, sideOrientation: Mesh.FRONTSIDE },\n            this.babylonScene,\n        );\n        title.position = new Vector3(0, 110, -3);\n        const titleTexture = new DynamicTexture(\n            'titleTexture',\n            { width: 200, height: 40 },\n            this.babylonScene,\n            true,\n            Texture.LINEAR_LINEAR,\n        );\n        this.titleTexture = titleTexture;\n        const ctx = titleTexture.getContext();\n        ctx.fillStyle = '#343434AA';\n        ctx.fillRect(0, 0, titleTexture.getSize().width, titleTexture.getSize().height);\n        ctx.font = '32px pixel';\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        ctx.fillStyle = '#FFFFFF';\n        ctx.fillText(this.id, titleTexture.getSize().width / 2, titleTexture.getSize().height / 2);\n        titleTexture.update();\n\n        title.parent = this.mesh;\n        title.material = createMaterial(titleTexture, this.babylonScene);\n\n        this.updateMesh();\n\n        return this;\n    }\n\n    async updateMesh() {\n        if (!this.mesh) return;\n        this.mesh.position = new Vector3(this.position.x, -this.position.y, -1);\n\n        const WALKING_THRESHOLD = 1;\n        if (Math.abs(this.velocityX) > WALKING_THRESHOLD || Math.abs(this.velocityY) > WALKING_THRESHOLD) {\n            this.texture.queueOnce('walking');\n        } else {\n            this.texture.queueOnce('default');\n        }\n    }\n\n    detachBabylon() {\n        this.texture.detach();\n        if (this.babylonScene && this.mesh) {\n            const child = this.mesh.getChildMeshes()[0];\n\n            if (this.mesh.material) {\n                this.babylonScene.removeMaterial(this.mesh.material);\n            }\n            if (this.titleTexture && child && child.material) {\n                this.babylonScene.removeTexture(this.titleTexture);\n                this.babylonScene.removeMaterial(child.material);\n            }\n        }\n\n        // Mesh detached by super\n        return super.detachBabylon();\n    }\n}\n","import { Vector3, Mesh, Scene, MeshBuilder, StandardMaterial, Texture, DynamicTexture, Vector2 } from '@babylonjs/core';\nimport { AbstractGameObject } from './AbstractGameObject';\nimport { GameScene } from '../Scene';\nimport { getImage } from '../textures/textureEngine';\n\nexport type tileType = number;\n\nexport interface serializedChunk {\n    x: number;\n    y: number;\n    ground: tileType[][];\n}\n\nexport class Chunk extends AbstractGameObject {\n    ground: tileType[][] = [[]];\n\n    private texture: DynamicTexture;\n\n    constructor(gameScene: GameScene, x: number, y: number) {\n        super(gameScene);\n        this.position = new Vector2(x, y);\n    }\n\n    get id(): string {\n        return Chunk.getId(this.position.x, this.position.y);\n    }\n\n    serialize(): serializedChunk {\n        return {\n            x: this.position.x,\n            y: this.position.y,\n            ground: this.ground,\n        };\n    }\n\n    deserialize(serialized: serializedChunk): void {\n        this.position.x = serialized.x;\n        this.position.y = serialized.y;\n        this.ground = serialized.ground;\n\n        this.updateMesh();\n    }\n\n    static getId(x: number, y: number): string {\n        return x.toString() + 'x' + y.toString();\n    }\n\n    // ========== BABYLON ===========\n\n    attachBabylon(scene: Scene) {\n        super.attachBabylon(scene);\n\n        if (this.babylonScene) {\n            this.mesh = MeshBuilder.CreatePlane(\n                'chunk',\n                { width: 1600, height: 1600, sideOrientation: Mesh.FRONTSIDE },\n                this.babylonScene,\n            );\n\n            const texture = new DynamicTexture(\n                'chunkTexture',\n                { width: 16 * 16, height: 16 * 16 },\n                this.babylonScene,\n                true,\n                Texture.NEAREST_NEAREST,\n            );\n\n            this.texture = texture;\n            const material = new StandardMaterial('mat', this.babylonScene);\n            material.emissiveTexture = texture;\n            this.mesh.material = material;\n\n            this.updateMesh();\n        }\n\n        return this;\n    }\n\n    async updateMesh() {\n        if (!this.mesh || !this.babylonScene) {\n            return;\n        }\n\n        this.mesh.position = new Vector3(this.position.x * 16 * 100, -this.position.y * 16 * 100, 0);\n\n        const ctx = this.texture.getContext();\n\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 16; y++) {\n                if (this.ground[x] && this.ground[x][y]) {\n                    ctx.fillStyle = Chunk.getTerrainColor(this.ground[x][y]);\n\n                    ctx.fillRect(x * 16, y * 16, 16, 16);\n                    // if ((x + y) % 2 === 0) {\n                    //     ctx.fillStyle = '#00000005';\n                    //     ctx.fillRect(x * 16, y * 16, 16, 16);\n                    // }\n\n                    if (this.ground[x][y] === 2) {\n                        // Water, should have transition?\n\n                        this.drawTransition(ctx, x, y, 1, 'grass_water');\n                    }\n                }\n            }\n        }\n\n        this.texture.update();\n    }\n\n    drawTransition(ctx: CanvasRenderingContext2D, x: number, y: number, tileType: number, filePrefix: string) {\n        const posX = this.position.x * 16 + x - 8;\n        const posY = this.position.y * 16 + y - 8;\n\n        let sides = '';\n        if (this.gameScene.getTile(posX, posY - 1) === tileType) sides += 'T';\n        if (this.gameScene.getTile(posX + 1, posY) === tileType) sides += 'R';\n        if (this.gameScene.getTile(posX, posY + 1) === tileType) sides += 'B';\n        if (this.gameScene.getTile(posX - 1, posY) === tileType) sides += 'L';\n\n        if (sides === 'TB') {\n            const top = getImage(filePrefix + '_T');\n            if (top) ctx.drawImage(top, x * 16, y * 16);\n            const bottom = getImage(filePrefix + '_B');\n            if (bottom) ctx.drawImage(bottom, x * 16, y * 16);\n        } else if (sides === 'RL') {\n            const right = getImage(filePrefix + '_R');\n            if (right) ctx.drawImage(right, x * 16, y * 16);\n            const left = getImage(filePrefix + '_L');\n            if (left) ctx.drawImage(left, x * 16, y * 16);\n        } else {\n            if (sides.length > 0) {\n                const img = getImage(filePrefix + '_' + sides);\n                if (img) ctx.drawImage(img, x * 16, y * 16);\n            }\n        }\n\n        const corner = (shiftX: number, shiftY: number, blackList: string[], suffix: string) => {\n            if (\n                this.gameScene.getTile(posX + shiftX, posY + shiftY) === tileType &&\n                !blackList.reduce((prev, letter) => prev || sides.includes(letter), false)\n            ) {\n                const img = getImage(filePrefix + '_corner_' + suffix);\n                if (img) ctx.drawImage(img, x * 16, y * 16);\n            }\n        };\n\n        corner(-1, -1, ['L', 'T'], 'BR');\n        corner(+1, -1, ['R', 'T'], 'BL');\n        corner(-1, +1, ['L', 'B'], 'TR');\n        corner(+1, +1, ['R', 'B'], 'TL');\n    }\n\n    detachBabylon() {\n        if (this.babylonScene && this.mesh && this.texture) {\n            this.babylonScene.removeTexture(this.texture);\n            if (this.mesh.material) {\n                this.babylonScene.removeMaterial(this.mesh.material);\n            }\n        }\n\n        // Mesh detached by super\n        return super.detachBabylon();\n    }\n\n    static getTerrainColor(number: number): string {\n        switch (number) {\n            case 1: // Grass\n                return '#67943F';\n            case 2: // Water\n                return '#2EB0E5';\n            case 3: // Forrest\n                return '#6AA981';\n            case 4: // Sand\n                return '#FDDC86';\n        }\n        return '#DDDDDD';\n    }\n}\n","import { Player } from './gameObjects/Player';\nimport { Chunk } from './gameObjects/Chunk';\n\nexport class GameScene {\n    players = new IndexedList<Player>();\n    chunks = new IndexedList<Chunk>();\n\n    tickAll(deltaTime: number) {\n        this.players.forEach((value) => value.tick(deltaTime));\n        this.chunks.forEach((value) => value.tick(deltaTime));\n    }\n\n    getTile(x: number, y: number) {\n        const calcX = Math.floor(x) + 8;\n        const calcY = Math.floor(y) + 8;\n\n        const chunkX = Math.floor(calcX / 16);\n        const chunkY = Math.floor(calcY / 16);\n        const chunk = this.chunks.get(Chunk.getId(chunkX, chunkY));\n\n        if (!chunk || !chunk.ground[calcX - chunkX * 16] || !chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16]) {\n            return -1;\n        }\n\n        return chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16];\n    }\n}\n\nclass IndexedList<T extends Player | Chunk> {\n    values: { [key: string]: T } = {};\n\n    addMore(values: { [key: string]: T }) {\n        this.values = { ...this.values, ...values };\n    }\n\n    add(key: string, value: T) {\n        this.values[key] = value;\n    }\n\n    remove(key: string) {\n        if (!this.includes(key)) return;\n        this.values[key].detachBabylon();\n        delete this.values[key];\n    }\n\n    update(key: string, serialized: any, smooth?: boolean) {\n        this.values[key].deserialize(serialized, smooth);\n    }\n\n    updateOrCreate(key: string, serialized: any, newObjectCreator: () => T, smooth?: boolean) {\n        if (!this.includes(key)) {\n            this.values[key] = newObjectCreator();\n        }\n        this.values[key].deserialize(serialized, smooth);\n    }\n\n    get(key: string) {\n        if (!this.includes(key)) return null;\n        return this.values[key];\n    }\n\n    includes(key: string) {\n        return Object.keys(this.values).includes(key);\n    }\n\n    forEach(callbackfn: (value: T, key: string, index: number) => void) {\n        const keys = Object.keys(this.values);\n\n        keys.forEach((key, index) => {\n            callbackfn(this.values[key], key, index);\n        });\n    }\n\n    filter(callbackfn: (value: T, key: string, index: number) => boolean) {\n        const keys = Object.keys(this.values);\n\n        const result = new IndexedList<T>();\n\n        keys.forEach((key, index) => {\n            if (callbackfn(this.values[key], key, index)) {\n                result.add(key, this.values[key]);\n            }\n        });\n\n        return result;\n    }\n}\n","import { keyBindings } from './gameMechanics/gameObjects/Player';\r\n\r\n// ARROWS\r\nexport const CONTROLS_ARROWS: keyBindings = {\r\n    left: 37,\r\n    right: 39,\r\n    up: 38,\r\n    down: 40,\r\n};\r\n\r\n// WASD\r\nexport const CONTROLS_WASD: keyBindings = {\r\n    left: 65,\r\n    right: 68,\r\n    up: 87,\r\n    down: 83,\r\n};\r\n","import io from 'socket.io-client';\nimport { Player } from '../gameObjects/Player';\nimport { GameScene } from '../Scene';\nimport { messagePlayers } from '../../messageTypes';\nimport babylonjs from '@babylonjs/core';\nimport { serializedChunk, Chunk } from '../gameObjects/Chunk';\n\ntype callback = (data: any) => void;\n\nexport class NetworkClient {\n    private socket: SocketIOClient.Socket;\n    private userId: string;\n    private opened: boolean;\n    private callbacks: { [key: string]: callback } = {\n        authenticated: () => {},\n        updated: () => {},\n    };\n\n    constructor(private apiUrl: string, private scene: GameScene, private getBabylonScene: () => babylonjs.Scene) {}\n\n    public on(event: 'authenticated' | 'updated', callback: callback) {\n        this.callbacks[event] = callback;\n    }\n\n    public close() {\n        this.socket.disconnect();\n    }\n\n    public open() {\n        this.opened = true;\n        this.socket = io(this.apiUrl);\n        this.setListeners();\n\n        this.socket.on('id', (data: string) => {\n            this.userId = data;\n            this.callbacks['authenticated']({ id: data });\n            console.log('Joined game with player ID: ', data);\n        });\n    }\n\n    public sendPlayerUpdate(player: Player) {\n        this.socket.emit('update', { id: player.id, content: player.serialize() });\n    }\n\n    public requestChunk(x: number, y: number) {\n        this.socket.emit('mapRequest', { x, y });\n    }\n\n    private setListeners() {\n        this.socket.on('players', (data: messagePlayers) => {\n            this.scene.players.forEach((player, key) => {\n                if (!Object.keys(data).includes(key)) {\n                    this.scene.players.get(key)!.setVisibility(false);\n                } else {\n                    this.scene.players.get(key)!.setVisibility(true);\n                }\n            });\n\n            Object.keys(data).forEach((key) => {\n                if (key === this.userId) {\n                    return;\n                }\n\n                this.scene.players.updateOrCreate(key, data[key], () =>\n                    new Player(this.scene, key).attachBabylon(this.getBabylonScene()),\n                );\n            });\n        });\n\n        this.socket.on('mapChunk', (data: serializedChunk) => {\n            const id = Chunk.getId(data.x, data.y);\n\n            this.scene.chunks.updateOrCreate(id, data, () =>\n                new Chunk(this.scene, data.x, data.y).attachBabylon(this.getBabylonScene()),\n            );\n\n            this.scene.chunks\n                .filter((value) => Math.abs(value.position.x - data.x) <= 1 && Math.abs(value.position.y - data.y) <= 1)\n                .forEach((value) => value.updateMesh());\n        });\n    }\n}\n","import React from 'react';\n\nimport '@babylonjs/core/Physics/physicsEngineComponent';\nimport babylonjs, { Vector3, UniversalCamera } from '@babylonjs/core';\nimport { Scene, Engine, SceneEventArgs } from 'react-babylonjs';\n\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\nimport { Player } from './gameObjects/Player';\nimport { Chunk } from './gameObjects/Chunk';\nimport { GameScene } from './Scene';\nimport { CONTROLS_WASD } from '../keyBindings';\nimport { NetworkClient } from './network/NetworkClient';\nimport { minimap } from './gui/minimap';\n\nconst Z_DISTANCE = 1500;\nconst RENDER_DISTANCE = 3;\nconst REQUEST_DISTANCE = 3;\nconst DELETE_DISTANCE = 5;\n\ninterface IGameCoreProps {\n    apiUrl: string;\n}\n\ninterface IGameCoreState {}\n\nexport class GameCore extends React.Component<IGameCoreProps, IGameCoreState> {\n    gameScene: GameScene;\n    me: Player | null = null;\n\n    babylonScene: babylonjs.Scene | null;\n    guiTexture: AdvancedDynamicTexture | null;\n    networkClient: NetworkClient;\n    state: IGameCoreState = {};\n\n    timer: NodeJS.Timeout;\n\n    zoom: number = 1;\n\n    constructor(props: IGameCoreProps) {\n        super(props);\n\n        this.gameScene = new GameScene();\n        this.networkClient = new NetworkClient(this.props.apiUrl, this.gameScene, () => this.babylonScene!);\n        this.networkClient.on('authenticated', (data: { id: string }) => this.initGame(data.id));\n\n        document.addEventListener('keydown', (event) => {\n            if (this.me) {\n                this.me.keyDown(event.keyCode);\n            }\n        });\n\n        document.addEventListener('keyup', (event) => {\n            if (this.me) {\n                this.me.keyUp(event.keyCode);\n            }\n        });\n\n        document.addEventListener('wheel', (event) => {\n            event.preventDefault();\n\n            this.zoom += event.deltaY * 0.03;\n            if (this.zoom < 0.5) this.zoom = 0.5;\n            if (this.zoom > 3) this.zoom = 3;\n        });\n\n        window.addEventListener('resize', (event) => {\n            this.resize();\n        });\n    }\n\n    componentDidMount() {\n        this.resize();\n        this.networkClient.open();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n        this.networkClient.close();\n    }\n\n    initGame(id: string) {\n        this.me = new Player(this.gameScene, id);\n        this.me.attachBabylon(this.babylonScene!);\n        this.me.bindKeys(CONTROLS_WASD);\n        this.gameScene.players.add(id, this.me);\n\n        (window as any).player = this.me;\n        (window as any).scene = this.gameScene;\n\n        this.timer = setInterval(() => {\n            if (this.me) this.networkClient.sendPlayerUpdate(this.me);\n        }, 100);\n    }\n\n    tick(deltaTime: number) {\n        this.gameScene.players.forEach((player) => player.tick(deltaTime));\n\n        this.gameScene.chunks.forEach((chunk) => {\n            if (\n                this.me &&\n                (Math.abs(Math.round(this.me.position.x / 1600) - chunk.position.x) > RENDER_DISTANCE ||\n                    Math.abs(Math.round(this.me.position.y / 1600) - chunk.position.y) > RENDER_DISTANCE)\n            ) {\n                chunk.setVisibility(false);\n                if (\n                    this.me &&\n                    (Math.abs(Math.round(this.me.position.x / 1600) - chunk.position.x) > DELETE_DISTANCE ||\n                        Math.abs(Math.round(this.me.position.y / 1600) - chunk.position.y) > DELETE_DISTANCE)\n                ) {\n                    this.gameScene.chunks.remove(chunk.id);\n                }\n            } else {\n                chunk.setVisibility(true);\n            }\n        });\n        if (this.guiTexture) {\n            if (this.me) {\n                for (let x = -REQUEST_DISTANCE; x <= REQUEST_DISTANCE; x++) {\n                    for (let y = -REQUEST_DISTANCE; y <= REQUEST_DISTANCE; y++) {\n                        const chunkX = Math.round(this.me.position.x / 1600) + x;\n                        const chunkY = Math.round(this.me.position.y / 1600) + y;\n                        const chunkId = Chunk.getId(chunkX, chunkY);\n\n                        if (!this.gameScene.chunks.includes(chunkId)) {\n                            this.networkClient.requestChunk(chunkX, chunkY);\n                            this.gameScene.chunks.add(\n                                chunkId,\n                                new Chunk(this.gameScene, chunkX, chunkY).attachBabylon(this.babylonScene!),\n                            );\n                        }\n                    }\n                }\n\n                const gui = this.guiTexture.getContext();\n                const width = this.guiTexture.getSize().width;\n                const height = this.guiTexture.getSize().height;\n                gui.clearRect(0, 0, width, height);\n\n                minimap(this.guiTexture, this.gameScene, this.me);\n\n                this.guiTexture.update();\n            } else {\n                const gui = this.guiTexture.getContext();\n                const width = this.guiTexture.getSize().width;\n                const height = this.guiTexture.getSize().height;\n                gui.clearRect(0, 0, width, height);\n\n                gui.fillStyle = '#FFFFFF';\n                gui.font = '20px pixel';\n                gui.textBaseline = 'middle';\n                gui.textAlign = 'center';\n\n                gui.fillText(\n                    'Connecting to server...',\n                    width / 2,\n                    height / 2,\n                );\n\n                this.guiTexture.update();\n            }\n        }\n    }\n\n    resize() {\n        const canvas = document.getElementById('game') as HTMLCanvasElement;\n        if (canvas) {\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n        }\n    }\n\n    onSceneMount(event: SceneEventArgs) {\n        const { scene } = event;\n\n        this.babylonScene = scene;\n\n        const camera = new UniversalCamera('Camera', new Vector3(0, 0, Z_DISTANCE), scene);\n        camera.rotation = new Vector3(0, 0, 0);\n        //camera.attachControl(event.canvas, true);\n\n        this.guiTexture = AdvancedDynamicTexture.CreateFullscreenUI('GUI', true, scene);\n\n        scene.getEngine().runRenderLoop(() => {\n            this.tick(scene.getEngine().getDeltaTime());\n\n            if (this.me) {\n                camera.position = new Vector3(this.me.position.x, -this.me.position.y, -Z_DISTANCE * this.zoom);\n            }\n\n            if (scene) {\n                scene.render();\n            }\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Engine antialias={true} canvasId=\"game\">\n                    <Scene onSceneMount={(event: SceneEventArgs) => this.onSceneMount(event)}>\n                        <></>\n                    </Scene>\n                </Engine>\n            </>\n        );\n    }\n}\n","import { Chunk } from '../gameObjects/Chunk';\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\nimport { GameScene } from '../Scene';\nimport { Player } from '../gameObjects/Player';\n\nconst MINIMAP_DISTANCE = 32;\nconst MINIMAP_SCALE = 2;\nconst BORDER_WIDTH = 3;\n\nexport function minimap(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, me: Player) {\n    const gui = guiTexture.getContext();\n    const width = guiTexture.getSize().width;\n    //const height = guiTexture.getSize().height;\n\n    const x0 = width - 30 - MINIMAP_SCALE * MINIMAP_DISTANCE;\n    const y0 = 20 + MINIMAP_SCALE * MINIMAP_DISTANCE;\n\n    gui.fillStyle = '#000000';\n    gui.fillRect(\n        x0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\n        y0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\n    );\n\n    for (let x = -MINIMAP_DISTANCE; x <= MINIMAP_DISTANCE; x++) {\n        for (let y = -MINIMAP_DISTANCE; y <= MINIMAP_DISTANCE; y++) {\n            gui.fillStyle = Chunk.getTerrainColor(gameScene.getTile(me.position.x / 100 + x, me.position.y / 100 + y));\n            gui.fillRect(x0 + x * MINIMAP_SCALE, y0 + y * MINIMAP_SCALE, MINIMAP_SCALE, MINIMAP_SCALE);\n        }\n    }\n\n    gui.fillStyle = '#000000';\n    gui.font = '15px pixel';\n    gui.textBaseline = 'top';\n    gui.textAlign = 'center';\n    gui.fillText(\n        'x',\n        x0,\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\n    );\n    gui.textAlign = 'right';\n    gui.fillText(\n        Math.round(me.position.x / 100).toString(),\n        x0 - 10,\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\n    );\n    gui.textAlign = 'left';\n    gui.fillText(\n        Math.round(me.position.y / 100).toString(),\n        x0 + 10,\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\n    );\n\n    gui.fillStyle = '#00000020';\n    gui.fillRect(x0 - MINIMAP_SCALE * 3, y0, MINIMAP_SCALE * 7, MINIMAP_SCALE);\n    gui.fillRect(x0, y0 - MINIMAP_SCALE * 3, MINIMAP_SCALE, MINIMAP_SCALE * 7);\n\n    guiTexture.update();\n}\n","import React from 'react';\nimport { GameCore } from './gameMechanics/GameCore';\nimport { loadTextures } from './gameMechanics/textures/textureEngine';\n\ninterface IAppProps {}\n\ninterface IAppState {\n    status: 'loading' | 'menu' | 'paused' | 'ingame';\n    textures: {\n        loaded: number;\n        of: number;\n    };\n}\n\nclass App extends React.Component<IAppProps, IAppState> {\n    //apiUrl = 'http://localhost:80/';\n    apiUrl = 'https://randombot-server.herokuapp.com/';\n\n    state: IAppState = {\n        status: 'loading',\n        textures: {\n            loaded: 0,\n            of: 0,\n        },\n    };\n\n    componentDidMount() {\n        this.setState({\n            textures: {\n                loaded: 0,\n                of: loadTextures(\n                    () => {\n                        this.setState({ status: 'ingame' });\n                    },\n                    (loaded, of) => {\n                        this.setState({\n                            textures: {\n                                loaded,\n                                of,\n                            },\n                        });\n                    },\n                ),\n            },\n        });\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.status === 'loading' && (\n                    <div style={{ textAlign: 'center', position: \"absolute\", top: \"50%\", transform: \"translate(0, -50%)\", width: \"100%\", color: \"white\" }}>\n                        Textures are loading ({this.state.textures.loaded}/{this.state.textures.of})\n                    </div>\n                )}\n                {this.state.status === 'ingame' && <GameCore apiUrl={this.apiUrl} />}\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}