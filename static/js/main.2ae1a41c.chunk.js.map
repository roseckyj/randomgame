{"version":3,"sources":["frontend/gameMechanics/textures/texturePack.ts","frontend/gameMechanics/textures/SimpleTexture.ts","frontend/gameMechanics/textures/textureEngine.ts","frontend/gameMechanics/textures/AnimatedTexture.ts","shared/constants.ts","shared/gameObjects/00_AbstractGameObject.ts","shared/gameObjects/01_AbstractGameEntity.ts","shared/gameObjects/20_Player.tsx","shared/gameObjects/10_Chunk.tsx","shared/utils/IndexedList.ts","shared/Scene.ts","frontend/keyBindings.ts","shared/gameObjects/20_Tree.tsx","shared/gameObjects/20_Stone.tsx","frontend/gameMechanics/network/Client.ts","frontend/gameMechanics/utils/shadeText.ts","frontend/gameMechanics/gui/minimap.ts","frontend/gameMechanics/GameCore.tsx","frontend/gameMechanics/gui/debugInfo.ts","frontend/App.tsx","serviceWorker.js","index.tsx"],"names":["textures","player","filename","width","animations","default","start","end","type","walking","inventory_opening","inventory_open","inventory_closing","equip","unequip","mine","eat","interact","rock_big","rock_small","bush","tree_small","tree_big","tree_short","tree_tall","grass_water_L","grass_water_R","grass_water_T","grass_water_B","grass_water_TL","grass_water_RB","grass_water_TR","grass_water_BL","grass_water_TBL","grass_water_TRL","grass_water_RBL","grass_water_TRB","grass_water_TRBL","grass_water_corner_BL","grass_water_corner_BR","grass_water_corner_TL","grass_water_corner_TR","SimpleTexture","textureAtlas","scene","texture","this","t","Texture","RESOURCES_LOCATION","NEAREST_NEAREST","hasAlpha","removeTexture","resourceFiles","Object","values","map","filter","v","i","indexOf","atlases","materials","loaded","getSimpleMaterial","material","createMaterial","getTexture","StandardMaterial","emissiveTexture","opacityTexture","getImage","console","warn","AnimatedTexture","animation","animationQueue","frame","direction","interval","textureScale","uOffset","vOffset","uScale","vScale","queue","setInterval","tick","length","unskipable","isLast","keys","includes","push","skippable","framesCount","Math","abs","haveNextAnimation","shift","newAnimation","animationDir","error","CAMERA_ANGLE","PI","AbstractGameObject","gameScene","babylonScene","mesh","position","Vector2","Zero","removeMesh","deltaTime","visible","setEnabled","isEnabled","AbstractGameEntity","disabled","hitbox","height","id","x","y","data","serialized","smooth","updateMesh","z","getSize","cos","rotation","sin","isPickable","attachBabylon","entity","log","Player","velocityX","velocityY","name","targetX","targetY","finalVelocityX","finalVelocityY","targetTime","keyBindings","up","down","left","right","keysPressed","titleTexture","sup","deltaTimeModified","movingX","movingY","diagonalModifier","sqrt","ogX","ogY","pow","colisions","getColisions","colisionX","colisionY","forEach","colisionFromBottom","colisionFromLeft","colisionFromTop","colisionFromRight","keyCode","key","newBindings","size","MeshBuilder","CreatePlane","sideOrientation","Mesh","FRONTSIDE","title","Vector3","DynamicTexture","LINEAR_LINEAR","parent","ctx","getContext","clearRect","fillStyle","fillRect","font","textBaseline","textAlign","fillText","update","queueOnce","child","getChildMeshes","removeMaterial","Chunk","ground","getTerrainColor","drawTransition","tileType","filePrefix","posX","posY","sides","getTile","top","drawImage","bottom","img","corner","shiftX","shiftY","blackList","suffix","reduce","prev","letter","getId","toString","number","IndexedList","value","detachBabylon","deserialize","newObjectCreator","callbackfn","index","result","add","getKeys","GameScene","entities","chunks","calcX","floor","calcY","chunkX","chunkY","chunk","get","colidesWith","CONTROLS_WASD","Tree","setMaterial","Stone","NetworkClient","apiUrl","getBabylonScene","socket","userId","opened","callbacks","authenticated","updated","invalidPassword","disconnect","event","callback","io","setListeners","on","payload","serialize","emit","password","passwordHash","md5","a","removed","remove","updateOrCreate","createEntity","e","shadeText","text","strokeStyle","lineWidth","strokeText","GameCore","props","me","guiTexture","networkClient","state","loggedIn","timer","zoom","renderDistance","debug","loginRef","createRef","passwordRef","mouseEntity","initGame","current","classList","setTimeout","document","addEventListener","keyDown","keyUp","deltaY","window","resize","open","clearInterval","close","setState","bindKeys","enableDebug","debugLayer","show","sendPlayerUpdate","unloadUnusedComponents","requestChunks","gui","x0","MINIMAP_SCALE","y0","MINIMAP_DISTANCE","getEntityColor","strokeRect","round","minimap","FPS","toFixed","getVisibility","debugInfo","canvas","getElementById","innerWidth","innerHeight","camera","UniversalCamera","skybox","CreateCylinder","CAMERA_DISTANCE","diameterTop","MAX_RENDER_DISTANCE","diameterBottom","tessellation","skyboxMaterial","backFaceCulling","diffuseColor","BABYLON","Color3","specularColor","disableLighting","AdvancedDynamicTexture","CreateFullscreenUI","onPointerDown","_","pickResult","hit","pickedMesh","startsWith","split","mouseDown","onPointerUp","mouseUp","getEngine","runRenderLoop","getDeltaTime","tan","min","ceil","render","distX","distY","setVisibility","setVisibilityAttachBabylon","chunkId","requestChunk","className","placeholder","ref","onClick","auth","antialias","canvasId","onSceneMount","React","Component","App","status","of","onLoad","onStateChange","Image","onload","onerror","src","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2ae1a41c.chunk.js","sourcesContent":["import { texturePack } from './textureEngine';\r\n\r\nexport const textures: texturePack = {\r\n    player: {\r\n        filename: 'Character.png',\r\n        width: 57,\r\n        animations: {\r\n            default: {\r\n                start: 0,\r\n                end: 0,\r\n                type: 'frame',\r\n            },\r\n            walking: {\r\n                start: 0,\r\n                end: 7,\r\n                type: 'loop',\r\n            },\r\n            inventory_opening: {\r\n                start: 8,\r\n                end: 11,\r\n                type: 'once',\r\n            },\r\n            inventory_open: {\r\n                start: 11,\r\n                end: 11,\r\n                type: 'frame',\r\n            },\r\n            inventory_closing: {\r\n                start: 11,\r\n                end: 8,\r\n                type: 'once',\r\n            },\r\n            equip: {\r\n                start: 12,\r\n                end: 19,\r\n                type: 'once',\r\n            },\r\n            unequip: {\r\n                start: 19,\r\n                end: 12,\r\n                type: 'once',\r\n            },\r\n            mine: {\r\n                start: 20,\r\n                end: 22,\r\n                type: 'boomerang',\r\n            },\r\n            eat: {\r\n                start: 23,\r\n                end: 51,\r\n                type: 'once',\r\n            },\r\n            interact: {\r\n                start: 52,\r\n                end: 56,\r\n                type: 'once',\r\n            },\r\n        },\r\n    },\r\n    rock_big: {\r\n        filename: 'rock_big.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    rock_small: {\r\n        filename: 'rock_small.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    bush: {\r\n        filename: 'bush.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_small: {\r\n        filename: 'tree_small.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_big: {\r\n        filename: 'tree_big.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_short: {\r\n        filename: 'tree_short.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_tall: {\r\n        filename: 'tree_tall.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_L: {\r\n        filename: 'grass_water_L.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_R: {\r\n        filename: 'grass_water_R.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_T: {\r\n        filename: 'grass_water_T.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_B: {\r\n        filename: 'grass_water_B.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TL: {\r\n        filename: 'grass_water_TL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_RB: {\r\n        filename: 'grass_water_RB.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TR: {\r\n        filename: 'grass_water_TR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_BL: {\r\n        filename: 'grass_water_BL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TBL: {\r\n        filename: 'grass_water_TBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRL: {\r\n        filename: 'grass_water_TRL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_RBL: {\r\n        filename: 'grass_water_RBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRB: {\r\n        filename: 'grass_water_TRB.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRBL: {\r\n        filename: 'grass_water_TRBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_BL: {\r\n        filename: 'grass_water_corner_BL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_BR: {\r\n        filename: 'grass_water_corner_BR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_TL: {\r\n        filename: 'grass_water_corner_TL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_TR: {\r\n        filename: 'grass_water_corner_TR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n};\r\n","import { Texture, Scene } from 'babylonjs';\r\nimport { textures } from './texturePack';\r\nimport { RESOURCES_LOCATION } from './textureEngine';\r\n\r\nexport class SimpleTexture {\r\n    private textureAtlas: string;\r\n    private texture: Texture;\r\n    constructor(textureAtlas: string, private scene: Scene) {\r\n        this.textureAtlas = textureAtlas;\r\n        const t = new Texture(\r\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\r\n            scene,\r\n            false,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n        t.hasAlpha = true;\r\n        this.texture = t;\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texture;\r\n    }\r\n\r\n    detach() {\r\n        this.scene.removeTexture(this.texture);\r\n    }\r\n}\r\n","import { Texture, Scene, StandardMaterial, Material } from 'babylonjs';\r\nimport { SimpleTexture } from './SimpleTexture';\r\nimport { textures } from './texturePack';\r\n\r\nexport interface texturePack {\r\n    [name: string]: {\r\n        filename: string;\r\n        width: number;\r\n        animations: { [name: string]: { start: number; end: number; type: 'loop' | 'once' | 'boomerang' | 'frame' } };\r\n    };\r\n}\r\n\r\nlet resourceFiles = Object.values(textures).map((texture) => texture.filename);\r\nresourceFiles = resourceFiles.filter((v, i) => resourceFiles.indexOf(v) === i);\r\n\r\nlet atlases: { [key: string]: HTMLImageElement } = {};\r\nlet materials: { [key: string]: Material } = {};\r\n\r\nlet loaded = 0;\r\n\r\nexport const RESOURCES_LOCATION = '/randomgame/resources/textures/';\r\n\r\nexport function loadTextures(onLoad: () => void, onStateChange?: (loaded: number, of: number) => void) {\r\n    if (resourceFiles.length === 0) {\r\n        onStateChange && onStateChange(0, resourceFiles.length);\r\n        onLoad();\r\n    }\r\n\r\n    resourceFiles.forEach((filename) => {\r\n        atlases[filename] = new Image();\r\n        atlases[filename].onload = () => {\r\n            loaded++;\r\n            onStateChange && onStateChange(loaded, resourceFiles.length);\r\n\r\n            if (loaded === resourceFiles.length) {\r\n                onLoad();\r\n            }\r\n        };\r\n        atlases[filename].onerror = () => {\r\n            console.error('Error loading resource file: ', filename);\r\n        };\r\n        atlases[filename].src = RESOURCES_LOCATION + filename;\r\n    });\r\n\r\n    return resourceFiles.length;\r\n}\r\n\r\nexport function createTexture(texture: string, scene: Scene) {\r\n    const t = new Texture(\r\n        RESOURCES_LOCATION + textures[texture].filename,\r\n        scene,\r\n        false,\r\n        true,\r\n        Texture.NEAREST_SAMPLINGMODE,\r\n    );\r\n    t.uOffset = 0;\r\n    t.vOffset = 0;\r\n    t.uScale = 1 / textures[texture].width;\r\n    t.vScale = 1;\r\n    t.hasAlpha = true;\r\n    return t;\r\n}\r\n\r\nexport function getSimpleMaterial(textureAtlas: string, scene: Scene) {\r\n    if (materials[textureAtlas]) {\r\n        return materials[textureAtlas];\r\n    }\r\n\r\n    const texture = new SimpleTexture(textureAtlas, scene);\r\n    const material = createMaterial(texture.getTexture(), scene);\r\n    materials[textureAtlas] = material;\r\n\r\n    return material;\r\n}\r\n\r\nexport function createMaterial(texture: Texture, scene: Scene) {\r\n    const material = new StandardMaterial('mat', scene);\r\n    material.emissiveTexture = texture;\r\n    material.opacityTexture = texture;\r\n\r\n    return material;\r\n}\r\n\r\nexport function getImage(texture: string): HTMLImageElement | null {\r\n    if (!textures[texture]) {\r\n        console.warn('Image ' + texture + ' not found!');\r\n        return null;\r\n    }\r\n    return atlases[textures[texture].filename];\r\n}\r\n","import { Texture, Scene } from 'babylonjs';\r\nimport { textures } from './texturePack';\r\nimport { RESOURCES_LOCATION } from './textureEngine';\r\n\r\nconst TIME_PER_FRAME = 80;\r\n\r\nexport class AnimatedTexture {\r\n    private textureAtlas: string;\r\n    private texture: Texture;\r\n    private animationQueue: { texture: string; skippable: boolean }[] = [];\r\n    private frame: number = 0;\r\n    private direction: number = 1;\r\n    private interval: NodeJS.Timeout;\r\n\r\n    private textureScale = 1;\r\n\r\n    constructor(textureAtlas: string, private scene: Scene, animation: string = 'default') {\r\n        this.textureAtlas = textureAtlas;\r\n        this.textureScale = 1 / textures[textureAtlas].width;\r\n\r\n        const t = new Texture(\r\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\r\n            scene,\r\n            false,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n        t.uOffset = this.textureScale * textures[textureAtlas].animations[animation].start;\r\n        t.vOffset = 0;\r\n        t.uScale = this.textureScale;\r\n        t.vScale = 1;\r\n        t.hasAlpha = true;\r\n\r\n        this.texture = t;\r\n\r\n        this.queue(animation);\r\n        this.interval = setInterval(() => this.tick(), TIME_PER_FRAME);\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texture;\r\n    }\r\n\r\n    isLast(animation: string) {\r\n        return this.animationQueue[this.animationQueue.length - 1].texture === animation;\r\n    }\r\n\r\n    queueOnce(animation: string, unskipable?: boolean) {\r\n        if (!this.isLast(animation)) {\r\n            this.queue(animation, unskipable);\r\n        }\r\n    }\r\n\r\n    queue(animation: string, unskipable?: boolean) {\r\n        if (!Object.keys(textures[this.textureAtlas].animations).includes(animation)) {\r\n            console.warn('Animation does not exist');\r\n            this.animationQueue.push({ texture: 'default', skippable: true });\r\n            return;\r\n        }\r\n\r\n        if (this.animationQueue.length > 1 && this.animationQueue[this.animationQueue.length - 1].skippable) {\r\n            this.animationQueue[this.animationQueue.length - 1] = { texture: animation, skippable: !unskipable };\r\n        } else {\r\n            this.animationQueue.push({ texture: animation, skippable: !unskipable });\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        if (!this.texture) {\r\n            console.error('Texture is null');\r\n            return;\r\n        }\r\n\r\n        this.frame += this.direction;\r\n\r\n        const animation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\r\n        const framesCount = Math.abs(animation.start - animation.end);\r\n\r\n        const haveNextAnimation = this.animationQueue.length > 1;\r\n\r\n        if (this.frame > framesCount) {\r\n            // At the right end\r\n\r\n            switch (animation.type) {\r\n                case 'loop':\r\n                    this.direction = 1;\r\n                    this.frame = 0;\r\n                    if (haveNextAnimation) {\r\n                        this.animationQueue.shift();\r\n                    }\r\n                    break;\r\n                case 'once':\r\n                    this.direction = 1;\r\n                    if (haveNextAnimation) {\r\n                        this.frame = 0;\r\n                        this.animationQueue.shift();\r\n                    } else {\r\n                        this.frame = framesCount;\r\n                    }\r\n                    break;\r\n                case 'boomerang':\r\n                    this.direction = -1;\r\n                    this.frame -= 2;\r\n                    break;\r\n                case 'frame':\r\n                    this.direction = 1;\r\n                    this.frame = 0;\r\n                    if (haveNextAnimation) {\r\n                        this.animationQueue.shift();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (this.frame < 0) {\r\n            // At the left end - Can happen just with boomerang\r\n            this.direction = 1;\r\n            if (haveNextAnimation) {\r\n                this.frame = 0;\r\n                this.animationQueue.shift();\r\n            } else {\r\n                this.frame = 0;\r\n            }\r\n        }\r\n\r\n        const newAnimation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\r\n        const animationDir = newAnimation.start > newAnimation.end ? -1 : 1;\r\n        this.texture.uOffset = (this.frame * animationDir + newAnimation.start) * this.textureScale;\r\n    }\r\n\r\n    detach() {\r\n        this.scene.removeTexture(this.texture);\r\n    }\r\n}\r\n","export const CAMERA_DISTANCE = 1500;\r\nexport const CAMERA_ANGLE = Math.PI / 4;\r\n","import { Mesh, Vector2, Scene } from 'babylonjs';\r\nimport { GameScene } from '../Scene';\r\n\r\nexport abstract class AbstractGameObject {\r\n    protected babylonScene: Scene | null = null;\r\n    protected mesh: Mesh | null = null;\r\n    public position: Vector2 = Vector2.Zero();\r\n\r\n    constructor(protected gameScene: GameScene) {}\r\n\r\n    async attachBabylon(babylonScene: Scene): Promise<void> {\r\n        this.babylonScene = babylonScene;\r\n    }\r\n\r\n    async detachBabylon(): Promise<void> {\r\n        if (this.babylonScene && this.mesh) {\r\n            this.babylonScene.removeMesh(this.mesh, true);\r\n            this.babylonScene = null;\r\n        }\r\n    }\r\n\r\n    abstract serialize(): any;\r\n\r\n    abstract deserialize(serialized: any, smooth?: boolean): void;\r\n\r\n    tick(deltaTime: number): void {}\r\n\r\n    abstract async updateMesh(): Promise<void>;\r\n\r\n    setVisibility(visible: boolean) {\r\n        if (this.mesh) this.mesh.setEnabled(visible);\r\n    }\r\n\r\n    getVisibility() {\r\n        return !!this.mesh && this.mesh.isEnabled();\r\n    }\r\n\r\n    abstract get id(): string;\r\n}\r\n","import { Scene, Vector2 } from 'babylonjs';\r\nimport { CAMERA_ANGLE } from '../constants';\r\nimport { AbstractGameObject } from './00_AbstractGameObject';\r\n\r\nexport interface serializedEntity<T> {\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    type: string;\r\n    data: T;\r\n}\r\n\r\nexport abstract class AbstractGameEntity extends AbstractGameObject {\r\n    // Should be used for all entities, buildings, trees, etc.\r\n\r\n    public disabled: boolean = false;\r\n\r\n    public hitbox: { width: number; height: number } = { width: 0, height: 0 };\r\n\r\n    serialize(): serializedEntity<{}> {\r\n        return {\r\n            id: this.id,\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n            type: AbstractGameEntity.type,\r\n            data: {},\r\n        };\r\n    }\r\n\r\n    deserialize(serialized: any, smooth?: boolean): void {\r\n        this.updateMesh();\r\n    }\r\n\r\n    public async updateMesh(): Promise<void> {\r\n        if (this.mesh) {\r\n            this.mesh.position.z = -(this.getSize().y * Math.cos(CAMERA_ANGLE)) / 2;\r\n            this.mesh.rotation.x = -CAMERA_ANGLE;\r\n\r\n            this.mesh.position.x = this.position.x * 100;\r\n            this.mesh.position.y = -this.position.y * 100 + (this.getSize().y * Math.sin(CAMERA_ANGLE)) / 2;\r\n\r\n            this.mesh.isPickable = true;\r\n        }\r\n    }\r\n\r\n    abstract getSize(): Vector2;\r\n\r\n    static get type(): string {\r\n        return 'unknown';\r\n    }\r\n\r\n    public async setVisibilityAttachBabylon(visible: boolean, babylonScene: Scene) {\r\n        super.setVisibility(visible);\r\n        if (visible && !this.babylonScene) this.attachBabylon(babylonScene);\r\n    }\r\n\r\n    public colidesWith(entity: AbstractGameEntity) {\r\n        return (\r\n            this.position.x - this.hitbox.width < entity.position.x + entity.hitbox.width &&\r\n            this.position.x + this.hitbox.width > entity.position.x - entity.hitbox.width &&\r\n            this.position.y - this.hitbox.height < entity.position.y + entity.hitbox.height &&\r\n            this.position.y + this.hitbox.height > entity.position.y - entity.hitbox.height\r\n        );\r\n    }\r\n\r\n    public mouseDown() {\r\n        console.log(this, 'down');\r\n    }\r\n\r\n    public mouseUp() {\r\n        console.log(this, 'up');\r\n    }\r\n}\r\n","import { Vector3, Mesh, Scene, MeshBuilder, DynamicTexture, Texture, Vector2 } from 'babylonjs';\r\nimport { createMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { AnimatedTexture } from '../../frontend/gameMechanics/textures/AnimatedTexture';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\n\r\nexport interface serializedPlayer {\r\n    velocityX: number;\r\n    velocityY: number;\r\n    name: string;\r\n}\r\n\r\nexport interface keyBindings {\r\n    up: number;\r\n    down: number;\r\n    left: number;\r\n    right: number;\r\n}\r\n\r\nconst SPEED_CHANGE = 0.002;\r\nconst SLOWING = 0.95;\r\nconst MODIFIER = 0.1;\r\nconst SMOOTH_TIME = 50;\r\n\r\nexport class Player extends AbstractGameEntity {\r\n    public hitbox = { width: 0.5, height: 0.2 };\r\n\r\n    private velocityX: number = 0;\r\n    private velocityY: number = 0;\r\n\r\n    public name = '';\r\n\r\n    // SMOOTHING\r\n    private targetX: number = 0;\r\n    private targetY: number = 0;\r\n    private finalVelocityX: number = 0;\r\n    private finalVelocityY: number = 0;\r\n    private targetTime: number = -1;\r\n\r\n    private keyBindings: keyBindings = {\r\n        up: 0,\r\n        down: 0,\r\n        left: 0,\r\n        right: 0,\r\n    };\r\n    private keysPressed: number[] = [];\r\n\r\n    private texture: AnimatedTexture;\r\n    private titleTexture: DynamicTexture;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedPlayer> {\r\n        let sup = super.serialize() as serializedEntity<serializedPlayer>;\r\n        sup.type = Player.type;\r\n        sup.data = {\r\n            velocityX: this.velocityX,\r\n            velocityY: this.velocityY,\r\n            name: this.name,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedPlayer>, smooth?: boolean): void {\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.name = serialized.data.name;\r\n\r\n        if (smooth) {\r\n            this.finalVelocityX = serialized.data.velocityX;\r\n            this.finalVelocityY = serialized.data.velocityY;\r\n            this.targetTime = SMOOTH_TIME;\r\n            this.velocityX = (serialized.x - this.position.x) / SMOOTH_TIME;\r\n            this.velocityY = (serialized.y - this.position.y) / SMOOTH_TIME;\r\n        } else {\r\n            this.velocityX = serialized.data.velocityX;\r\n            this.velocityY = serialized.data.velocityY;\r\n        }\r\n        super.deserialize(serialized, smooth);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        if (this.targetTime > 0) {\r\n            this.position.x += this.velocityX * deltaTime;\r\n            this.position.y += this.velocityY * deltaTime;\r\n            this.targetTime -= deltaTime;\r\n\r\n            if (this.targetTime <= 0) {\r\n                this.position.x = this.targetX;\r\n                this.position.y = this.targetY;\r\n                this.velocityX = this.finalVelocityX;\r\n                this.velocityY = this.finalVelocityY;\r\n            }\r\n\r\n            this.updateMesh();\r\n            return;\r\n        }\r\n\r\n        if (!this.keyBindings.up && !this.keyBindings.down && !this.keyBindings.left && !this.keyBindings.right) {\r\n            this.position.x += this.velocityX;\r\n            this.position.y += this.velocityY;\r\n\r\n            this.updateMesh();\r\n            return;\r\n        }\r\n\r\n        const deltaTimeModified = MODIFIER * deltaTime;\r\n\r\n        let movingX = false;\r\n        let movingY = false;\r\n\r\n        const diagonalModifier = Math.sqrt(2);\r\n\r\n        if (this.keysPressed.includes(this.keyBindings.left) || this.keysPressed.includes(this.keyBindings.right)) {\r\n            movingX = true;\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.up) || this.keysPressed.includes(this.keyBindings.down)) {\r\n            movingY = true;\r\n        }\r\n\r\n        if (this.keysPressed.includes(this.keyBindings.left)) {\r\n            // Left\r\n            this.velocityX -= (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.right)) {\r\n            // Right\r\n            this.velocityX += (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.up)) {\r\n            // Up\r\n            this.velocityY -= (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.down)) {\r\n            // Down\r\n            this.velocityY += (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\r\n        }\r\n\r\n        const ogX = this.position.x;\r\n        const ogY = this.position.y;\r\n\r\n        this.position.x += this.velocityX * deltaTimeModified;\r\n        this.position.y += this.velocityY * deltaTimeModified;\r\n\r\n        this.velocityX *= Math.pow(SLOWING, deltaTimeModified);\r\n        this.velocityY *= Math.pow(SLOWING, deltaTimeModified);\r\n\r\n        if (Math.abs(this.velocityX) < 0.001) {\r\n            this.velocityX = 0;\r\n        }\r\n        if (Math.abs(this.velocityY) < 0.001) {\r\n            this.velocityY = 0;\r\n        }\r\n\r\n        // Colisions\r\n        const colisions = this.gameScene.getColisions(this);\r\n        if (colisions.length() > 0) {\r\n            let colisionX = false;\r\n            let colisionY = false;\r\n\r\n            colisions.forEach((entity) => {\r\n                let colisionFromBottom =\r\n                    !(ogY - this.hitbox.height < entity.position.y + entity.hitbox.height) &&\r\n                    this.position.y - this.hitbox.height < entity.position.y + entity.hitbox.height;\r\n\r\n                let colisionFromLeft =\r\n                    !(ogX + this.hitbox.width > entity.position.x - entity.hitbox.width) &&\r\n                    this.position.x + this.hitbox.width > entity.position.x - entity.hitbox.width;\r\n\r\n                let colisionFromTop =\r\n                    !(ogY + this.hitbox.height > entity.position.y - entity.hitbox.height) &&\r\n                    this.position.y + this.hitbox.height > entity.position.y - entity.hitbox.height;\r\n\r\n                let colisionFromRight =\r\n                    !(ogX - this.hitbox.width < entity.position.x + entity.hitbox.width) &&\r\n                    this.position.x - this.hitbox.width < entity.position.x + entity.hitbox.width;\r\n\r\n                colisionX = colisionX || colisionFromLeft || colisionFromRight;\r\n                colisionY = colisionY || colisionFromBottom || colisionFromTop;\r\n            });\r\n\r\n            if (colisionX) {\r\n                this.position.x = ogX;\r\n                this.velocityX = 0;\r\n            }\r\n            if (colisionY) {\r\n                this.position.y = ogY;\r\n                this.velocityY = 0;\r\n            }\r\n        }\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    // ========== CONTROLS ===========\r\n\r\n    keyDown(keyCode: number) {\r\n        if (!this.keysPressed.includes(keyCode)) {\r\n            this.keysPressed.push(keyCode);\r\n        }\r\n    }\r\n\r\n    keyUp(keyCode: number) {\r\n        if (this.keysPressed.includes(keyCode)) {\r\n            this.keysPressed = this.keysPressed.filter((key) => key !== keyCode);\r\n        }\r\n    }\r\n\r\n    bindKeys(newBindings: Partial<keyBindings>) {\r\n        this.keyBindings = { ...this.keyBindings, ...newBindings };\r\n    }\r\n\r\n    static get type() {\r\n        return 'player';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    async attachBabylon(scene: Scene) {\r\n        if (this.babylonScene) return;\r\n        await super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'player ' + this.id,\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.texture = new AnimatedTexture('player', this.babylonScene, 'default');\r\n        this.mesh.material = createMaterial(this.texture.getTexture(), this.babylonScene);\r\n\r\n        // Player title\r\n        const title = MeshBuilder.CreatePlane(\r\n            'title ' + this.id,\r\n            { width: 200, height: 40, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        title.position = new Vector3(0, 110, -3);\r\n        const titleTexture = new DynamicTexture(\r\n            'titleTexture ' + this.id,\r\n            { width: 200, height: 40 },\r\n            this.babylonScene,\r\n            true,\r\n            Texture.LINEAR_LINEAR,\r\n        );\r\n        this.titleTexture = titleTexture;\r\n\r\n        title.parent = this.mesh;\r\n        title.material = createMaterial(titleTexture, this.babylonScene);\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh) return;\r\n        super.updateMesh();\r\n\r\n        const ctx = this.titleTexture.getContext();\r\n        ctx.clearRect(0, 0, this.titleTexture.getSize().width, this.titleTexture.getSize().height);\r\n        ctx.fillStyle = '#343434AA';\r\n        ctx.fillRect(0, 0, this.titleTexture.getSize().width, this.titleTexture.getSize().height);\r\n\r\n        ctx.font = '32px pixel';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.fillText(this.name, this.titleTexture.getSize().width / 2, this.titleTexture.getSize().height / 2);\r\n        this.titleTexture.update();\r\n\r\n        const WALKING_THRESHOLD = 0.01;\r\n        if (Math.abs(this.velocityX) > WALKING_THRESHOLD || Math.abs(this.velocityY) > WALKING_THRESHOLD) {\r\n            this.texture.queueOnce('walking');\r\n        } else {\r\n            this.texture.queueOnce('default');\r\n        }\r\n    }\r\n\r\n    async detachBabylon() {\r\n        if (this.babylonScene && this.mesh) {\r\n            const child = this.mesh.getChildMeshes()[0];\r\n\r\n            if (this.titleTexture && child && child.material) {\r\n                this.babylonScene.removeTexture(this.titleTexture);\r\n                this.babylonScene.removeMaterial(child.material);\r\n            }\r\n        }\r\n\r\n        // Mesh detached by super\r\n        super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 200);\r\n    }\r\n}\r\n","import { Mesh, Scene, MeshBuilder, StandardMaterial, Texture, DynamicTexture, Vector2 } from 'babylonjs';\r\nimport { AbstractGameObject } from './00_AbstractGameObject';\r\nimport { GameScene } from '../Scene';\r\nimport { getImage } from '../../frontend/gameMechanics/textures/textureEngine';\r\n\r\nexport type tileType = number;\r\n\r\nexport interface serializedChunk {\r\n    x: number;\r\n    y: number;\r\n    ground: tileType[][];\r\n}\r\n\r\nexport class Chunk extends AbstractGameObject {\r\n    public ground: tileType[][] = [[]];\r\n\r\n    private texture: DynamicTexture;\r\n\r\n    constructor(gameScene: GameScene, x: number, y: number) {\r\n        super(gameScene);\r\n        this.position = new Vector2(x, y);\r\n    }\r\n\r\n    get id(): string {\r\n        return Chunk.getId(this.position.x, this.position.y);\r\n    }\r\n\r\n    serialize(): serializedChunk {\r\n        return {\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n            ground: this.ground,\r\n        };\r\n    }\r\n\r\n    deserialize(serialized: serializedChunk): void {\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.ground = serialized.ground;\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    static getId(x: number, y: number): string {\r\n        return x.toString() + 'x' + y.toString();\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    async attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (this.babylonScene) {\r\n            this.mesh = MeshBuilder.CreatePlane(\r\n                'chunk ' + this.id,\r\n                { width: 1600, height: 1600, sideOrientation: Mesh.FRONTSIDE },\r\n                this.babylonScene,\r\n            );\r\n\r\n            const texture = new DynamicTexture(\r\n                'chunkTexture ' + this.id,\r\n                { width: 16 * 16, height: 16 * 16 },\r\n                this.babylonScene,\r\n                true,\r\n                Texture.NEAREST_NEAREST,\r\n            );\r\n\r\n            this.texture = texture;\r\n            const material = new StandardMaterial('mat ' + this.id, this.babylonScene);\r\n            material.emissiveTexture = texture;\r\n            this.mesh.material = material;\r\n\r\n            this.updateMesh();\r\n        }\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) {\r\n            return;\r\n        }\r\n\r\n        this.mesh.position.x = this.position.x * 16 * 100;\r\n        this.mesh.position.y = -this.position.y * 16 * 100;\r\n\r\n        const ctx = this.texture.getContext();\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                if (this.ground[x] && this.ground[x][y]) {\r\n                    ctx.fillStyle = Chunk.getTerrainColor(this.ground[x][y]);\r\n\r\n                    ctx.fillRect(x * 16, y * 16, 16, 16);\r\n                    // if ((x + y) % 2 === 0) {\r\n                    //     ctx.fillStyle = '#00000005';\r\n                    //     ctx.fillRect(x * 16, y * 16, 16, 16);\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                if (this.ground[x] && this.ground[x][y]) {\r\n                    if (this.ground[x][y] === 2) {\r\n                        // Water, should have transition\r\n\r\n                        this.drawTransition(ctx, x, y, [1, 3], 'grass_water');\r\n                    }\r\n\r\n                    /*\r\n\r\n                    if (this.ground[x][y] === 3) {\r\n                        // Tree\r\n\r\n                        if ((x + y) % 2 === 0) {\r\n                            const shift = Math.floor(Math.random() * 16) - 8;\r\n\r\n                            const img = getImage(Math.random() > 0.4 ? \"tree_big\" : \"tree_small\");\r\n                            if (img) ctx.drawImage(img, x * 16 + shift, y * 16 + shift);\r\n                        }\r\n                    }\r\n\r\n                    */\r\n                }\r\n            }\r\n        }\r\n\r\n        this.texture.update();\r\n    }\r\n\r\n    drawTransition(ctx: CanvasRenderingContext2D, x: number, y: number, tileType: number[], filePrefix: string) {\r\n        const posX = this.position.x * 16 + x - 8;\r\n        const posY = this.position.y * 16 + y - 8;\r\n\r\n        let sides = '';\r\n        if (tileType.includes(this.gameScene.getTile(posX, posY - 1))) sides += 'T';\r\n        if (tileType.includes(this.gameScene.getTile(posX + 1, posY))) sides += 'R';\r\n        if (tileType.includes(this.gameScene.getTile(posX, posY + 1))) sides += 'B';\r\n        if (tileType.includes(this.gameScene.getTile(posX - 1, posY))) sides += 'L';\r\n\r\n        if (sides === 'TB') {\r\n            const top = getImage(filePrefix + '_T');\r\n            if (top) ctx.drawImage(top, x * 16, y * 16);\r\n            const bottom = getImage(filePrefix + '_B');\r\n            if (bottom) ctx.drawImage(bottom, x * 16, y * 16);\r\n        } else if (sides === 'RL') {\r\n            const right = getImage(filePrefix + '_R');\r\n            if (right) ctx.drawImage(right, x * 16, y * 16);\r\n            const left = getImage(filePrefix + '_L');\r\n            if (left) ctx.drawImage(left, x * 16, y * 16);\r\n        } else {\r\n            if (sides.length > 0) {\r\n                const img = getImage(filePrefix + '_' + sides);\r\n                if (img) ctx.drawImage(img, x * 16, y * 16);\r\n            }\r\n        }\r\n\r\n        const corner = (shiftX: number, shiftY: number, blackList: string[], suffix: string) => {\r\n            if (\r\n                tileType.includes(this.gameScene.getTile(posX + shiftX, posY + shiftY)) &&\r\n                !blackList.reduce((prev, letter) => prev || sides.includes(letter), false)\r\n            ) {\r\n                const img = getImage(filePrefix + '_corner_' + suffix);\r\n                if (img) ctx.drawImage(img, x * 16, y * 16);\r\n            }\r\n        };\r\n\r\n        corner(-1, -1, ['L', 'T'], 'BR');\r\n        corner(+1, -1, ['R', 'T'], 'BL');\r\n        corner(-1, +1, ['L', 'B'], 'TR');\r\n        corner(+1, +1, ['R', 'B'], 'TL');\r\n    }\r\n\r\n    detachBabylon() {\r\n        if (this.babylonScene && this.mesh && this.texture) {\r\n            this.babylonScene.removeTexture(this.texture);\r\n            if (this.mesh.material) {\r\n                this.babylonScene.removeMaterial(this.mesh.material);\r\n            }\r\n        }\r\n\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    static getTerrainColor(number: number): string {\r\n        switch (number) {\r\n            case 1: // Grass\r\n                return '#67943F';\r\n            case 2: // Water\r\n                return '#2EB0E5';\r\n            case 4: // Sand\r\n                return '#FDDC86';\r\n        }\r\n        return '#DDDDDD';\r\n    }\r\n}\r\n","import { AbstractGameObject } from '../gameObjects/00_AbstractGameObject';\r\n\r\nexport class IndexedList<T extends AbstractGameObject> {\r\n    values: { [key: string]: T } = {};\r\n\r\n    addMore(values: { [key: string]: T }) {\r\n        this.values = { ...this.values, ...values };\r\n    }\r\n\r\n    add(key: string, value: T) {\r\n        this.values[key] = value;\r\n    }\r\n\r\n    remove(key: string) {\r\n        if (!this.values[key]) return;\r\n        this.values[key].detachBabylon();\r\n        delete this.values[key];\r\n    }\r\n\r\n    update(key: string, serialized: any, smooth?: boolean) {\r\n        if (!this.values[key]) return;\r\n        this.values[key].deserialize(serialized, smooth);\r\n    }\r\n\r\n    updateOrCreate(key: string, serialized: any, newObjectCreator: () => T, smooth?: boolean) {\r\n        if (!this.values[key]) {\r\n            this.values[key] = newObjectCreator();\r\n        }\r\n        this.values[key].deserialize(serialized, smooth);\r\n    }\r\n\r\n    get(key: string) {\r\n        if (!this.values[key]) return null;\r\n        return this.values[key];\r\n    }\r\n\r\n    includes(key: string) {\r\n        return !!this.values[key];\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, key: string, index: number) => void) {\r\n        const keys = Object.keys(this.values);\r\n\r\n        keys.forEach((key, index) => {\r\n            callbackfn(this.values[key], key, index);\r\n        });\r\n    }\r\n\r\n    filter(callbackfn: (value: T, key: string, index: number) => boolean) {\r\n        const keys = Object.keys(this.values);\r\n\r\n        const result = new IndexedList<T>();\r\n\r\n        keys.forEach((key, index) => {\r\n            if (callbackfn(this.values[key], key, index)) {\r\n                result.add(key, this.values[key]);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    map(callbackfn: (value: T, key: string, index: number) => any) {\r\n        return Object.keys(this.values).map((key, index) => callbackfn(this.values[key], key, index));\r\n    }\r\n\r\n    getValues() {\r\n        return Object.values(this.values);\r\n    }\r\n\r\n    getKeys() {\r\n        return Object.keys(this.values);\r\n    }\r\n\r\n    length() {\r\n        return this.getKeys().length;\r\n    }\r\n}\r\n","import { Chunk } from './gameObjects/10_Chunk';\r\nimport { IndexedList } from './utils/IndexedList';\r\nimport { AbstractGameEntity } from './gameObjects/01_AbstractGameEntity';\r\n\r\nexport class GameScene {\r\n    entities = new IndexedList<AbstractGameEntity>();\r\n    chunks = new IndexedList<Chunk>();\r\n\r\n    tickAll(deltaTime: number) {\r\n        this.entities.forEach((value) => value.tick(deltaTime));\r\n        this.chunks.forEach((value) => value.tick(deltaTime));\r\n    }\r\n\r\n    getTile(x: number, y: number) {\r\n        const calcX = Math.floor(x) + 8;\r\n        const calcY = Math.floor(y) + 8;\r\n\r\n        const chunkX = Math.floor(calcX / 16);\r\n        const chunkY = Math.floor(calcY / 16);\r\n        const chunk = this.chunks.get(Chunk.getId(chunkX, chunkY));\r\n\r\n        if (!chunk || !chunk.ground[calcX - chunkX * 16] || !chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16]) {\r\n            return -1;\r\n        }\r\n\r\n        return chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16];\r\n    }\r\n\r\n    getColisions(entity: AbstractGameEntity) {\r\n        return this.entities.filter((value) => entity !== value && value.colidesWith(entity));\r\n    }\r\n}\r\n","import { keyBindings } from '../shared/gameObjects/20_Player';\r\n\r\n// ARROWS\r\nexport const CONTROLS_ARROWS: keyBindings = {\r\n    left: 37,\r\n    right: 39,\r\n    up: 38,\r\n    down: 40,\r\n};\r\n\r\n// WASD\r\nexport const CONTROLS_WASD: keyBindings = {\r\n    left: 65,\r\n    right: 68,\r\n    up: 87,\r\n    down: 83,\r\n};\r\n","import { Mesh, Scene, MeshBuilder, Vector2 } from 'babylonjs';\r\nimport { getSimpleMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\nimport { SimpleTexture } from '../../frontend/gameMechanics/textures/SimpleTexture';\r\n\r\ntype treeTypes = 1 | 2 | 3 | 4;\r\n\r\nexport interface serializedTree {\r\n    size: treeTypes;\r\n}\r\n\r\nexport class Tree extends AbstractGameEntity {\r\n    public hitbox = { width: 0.2, height: 0.2 };\r\n\r\n    public size: treeTypes;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedTree> {\r\n        let sup = super.serialize() as serializedEntity<serializedTree>;\r\n        sup.type = Tree.type;\r\n        sup.data = {\r\n            size: this.size,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedTree>): void {\r\n        if (serialized.type !== Tree.type) return;\r\n\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.size = serialized.data.size;\r\n        super.deserialize(serialized);\r\n    }\r\n\r\n    tick(deltaTime: number) {}\r\n\r\n    static get type() {\r\n        return 'tree';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    async attachBabylon(scene: Scene) {\r\n        if (this.babylonScene) return;\r\n        await super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'tree ' + this.id,\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.setMaterial();\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) return;\r\n        this.setMaterial();\r\n        super.updateMesh();\r\n    }\r\n\r\n    setMaterial() {\r\n        if (this.mesh && this.babylonScene) {\r\n            switch (this.size) {\r\n                case 1:\r\n                    this.mesh.material = getSimpleMaterial('tree_small', this.babylonScene);\r\n                    break;\r\n                case 2:\r\n                    this.mesh.material = getSimpleMaterial('tree_big', this.babylonScene);\r\n                    break;\r\n                case 3:\r\n                    this.mesh.material = getSimpleMaterial('tree_short', this.babylonScene);\r\n                    break;\r\n                case 4:\r\n                    this.mesh.material = getSimpleMaterial('tree_tall', this.babylonScene);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    async detachBabylon() {\r\n        // Mesh detached by super\r\n        super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(200, 400);\r\n    }\r\n}\r\n","import { Mesh, Scene, MeshBuilder, Vector2 } from 'babylonjs';\r\nimport { getSimpleMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { GameScene } from '../Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\nimport { SimpleTexture } from '../../frontend/gameMechanics/textures/SimpleTexture';\r\n\r\nexport interface serializedStone {\r\n    size: 1 | 2;\r\n}\r\n\r\nexport class Stone extends AbstractGameEntity {\r\n    public hitbox = { width: 0.2, height: 0.2 };\r\n\r\n    public size: 1 | 2;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedStone> {\r\n        let sup = super.serialize() as serializedEntity<serializedStone>;\r\n        sup.type = Stone.type;\r\n        sup.data = {\r\n            size: this.size,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedStone>): void {\r\n        if (serialized.type !== Stone.type) return;\r\n\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.size = serialized.data.size;\r\n        super.deserialize(serialized);\r\n    }\r\n\r\n    tick(deltaTime: number) {}\r\n\r\n    static get type() {\r\n        return 'stone';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    async attachBabylon(scene: Scene) {\r\n        if (this.babylonScene) return;\r\n        await super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'stone ' + this.id,\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.mesh.material = getSimpleMaterial(this.size === 1 ? 'rock_small' : 'rock_big', this.babylonScene);\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) return;\r\n        this.mesh.material = getSimpleMaterial(this.size === 1 ? 'rock_small' : 'rock_big', this.babylonScene);\r\n        super.updateMesh();\r\n    }\r\n\r\n    async detachBabylon() {\r\n        // Mesh detached by super\r\n        super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 100);\r\n    }\r\n}\r\n","import io from 'socket.io-client';\r\nimport { Player, serializedPlayer } from '../../../shared/gameObjects/20_Player';\r\nimport { GameScene } from '../../../shared/Scene';\r\nimport babylonjs from 'babylonjs';\r\nimport { serializedChunk, Chunk } from '../../../shared/gameObjects/10_Chunk';\r\nimport { messageEntities, messageError, messageLogin } from '../../../shared/network/messageTypes';\r\nimport { AbstractGameEntity, serializedEntity } from '../../../shared/gameObjects/01_AbstractGameEntity';\r\nimport { Tree } from '../../../shared/gameObjects/20_Tree';\r\nimport { Stone } from '../../../shared/gameObjects/20_Stone';\r\nimport md5 from 'md5';\r\n\r\ntype callback = (data: any) => void;\r\n\r\nexport class NetworkClient {\r\n    private socket: SocketIOClient.Socket;\r\n    private userId: string;\r\n    private opened: boolean;\r\n    private callbacks: { [key: string]: callback } = {\r\n        authenticated: () => {},\r\n        updated: () => {},\r\n        invalidPassword: () => {},\r\n        disconnect: () => {},\r\n    };\r\n\r\n    constructor(private apiUrl: string, private scene: GameScene, private getBabylonScene: () => babylonjs.Scene) {}\r\n\r\n    public on(event: 'authenticated' | 'updated' | 'invalidPassword' | 'disconnect', callback: callback) {\r\n        this.callbacks[event] = callback;\r\n    }\r\n\r\n    public close() {\r\n        this.socket.disconnect();\r\n    }\r\n\r\n    public open() {\r\n        this.opened = true;\r\n        this.socket = io(this.apiUrl);\r\n        this.setListeners();\r\n\r\n        this.socket.on('auth', (data: serializedEntity<serializedPlayer>) => {\r\n            this.userId = data.id;\r\n            this.callbacks['authenticated'](data);\r\n            console.log('Joined game with player ', data.data.name, ' (' + data.id + ')');\r\n        });\r\n    }\r\n\r\n    public sendPlayerUpdate(player: Player) {\r\n        const payload: serializedEntity<serializedPlayer> = player.serialize();\r\n        this.socket.emit('update', payload);\r\n    }\r\n\r\n    public requestChunk(x: number, y: number) {\r\n        this.socket.emit('mapRequest', { x, y });\r\n    }\r\n\r\n    public auth(name: string, password: string) {\r\n        const payload: messageLogin = {\r\n            name,\r\n            passwordHash: md5(password),\r\n        };\r\n        this.socket.emit('login', payload);\r\n    }\r\n\r\n    private setListeners() {\r\n        this.socket.on('entities', async (data: messageEntities) => {\r\n            data.removed.forEach((entity) => entity.id !== this.userId && this.scene.entities.remove(entity.id));\r\n            data.updated /*.filter((entity) => {\r\n                const me = this.scene.entities.get(this.userId);\r\n                if (!me) return false;\r\n\r\n                const distX = Math.abs(Math.round(me.position.x) - entity.x) / 16;\r\n                const distY = Math.abs(Math.round(me.position.y) - entity.y) / 16;\r\n\r\n                return distX <= MAX_RENDER_DISTANCE && distY <= MAX_RENDER_DISTANCE;\r\n            })*/\r\n                .forEach(\r\n                    (entity) =>\r\n                        entity.id !== this.userId &&\r\n                        this.scene.entities.updateOrCreate(entity.id, entity, () => this.createEntity(entity)!),\r\n                );\r\n            this.callbacks.updated({});\r\n        });\r\n\r\n        this.socket.on('mapChunk', async (data: serializedChunk) => {\r\n            const id = Chunk.getId(data.x, data.y);\r\n\r\n            this.scene.chunks.updateOrCreate(id, data, () => {\r\n                const chunk = new Chunk(this.scene, data.x, data.y);\r\n                chunk.attachBabylon(this.getBabylonScene());\r\n                return chunk;\r\n            });\r\n\r\n            /*\r\n            for (let x = -1; x <= 1; x++) {\r\n                for (let y = -1; y <= 1; y++) {\r\n                    const ch = this.scene.chunks.get(Chunk.getId(data.x + x, data.y + y));\r\n                    if (ch) {\r\n                        ch.updateMesh();\r\n                    }\r\n                }\r\n            }\r\n            */\r\n        });\r\n\r\n        this.socket.on('err', async (data: messageError) => {\r\n            switch (data.error) {\r\n                case 'credentials':\r\n                    this.callbacks.invalidPassword(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    private createEntity(entity: serializedEntity<any>): AbstractGameEntity | undefined {\r\n        switch (entity.type) {\r\n            case 'player': {\r\n                const e = new Player(this.scene, entity.id);\r\n                e.deserialize(entity, true);\r\n                return e;\r\n            }\r\n            case 'tree': {\r\n                const e = new Tree(this.scene, entity.id);\r\n                e.deserialize(entity);\r\n                return e;\r\n            }\r\n            case 'stone': {\r\n                const e = new Stone(this.scene, entity.id);\r\n                e.deserialize(entity);\r\n                return e;\r\n            }\r\n        }\r\n        console.error('Entity \"' + entity.type + ' does not exist!');\r\n    }\r\n}\r\n","export function shadeText(ctx: CanvasRenderingContext2D, text: string, x: number, y: number) {\r\n    ctx.strokeStyle = '#000000';\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.lineWidth = 2;\r\n\r\n    ctx.strokeText(text, x, y);\r\n    ctx.strokeText(text, x + 1, y + 1);\r\n    ctx.fillText(text, x, y);\r\n}\r\n","import { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { GameScene } from '../../../shared/Scene';\r\nimport { Player } from '../../../shared/gameObjects/20_Player';\r\nimport { shadeText } from '../utils/shadeText';\r\n\r\nconst MINIMAP_DISTANCE = 32;\r\nconst MINIMAP_SCALE = 2;\r\nconst BORDER_WIDTH = MINIMAP_SCALE + 1;\r\n\r\nexport function minimap(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, me: Player) {\r\n    const gui = guiTexture.getContext();\r\n    const width = guiTexture.getSize().width;\r\n    //const height = guiTexture.getSize().height;\r\n\r\n    const x0 = width - 30 - MINIMAP_SCALE * MINIMAP_DISTANCE;\r\n    const y0 = 20 + MINIMAP_SCALE * MINIMAP_DISTANCE;\r\n\r\n    const shiftX = Math.floor((Math.floor(me.position.x) - me.position.x) * MINIMAP_SCALE);\r\n    const shiftY = Math.floor((Math.floor(me.position.y) - me.position.y) * MINIMAP_SCALE);\r\n\r\n    gui.fillStyle = '#000000';\r\n    gui.fillRect(\r\n        x0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\r\n        y0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\r\n    );\r\n\r\n    for (let x = -MINIMAP_DISTANCE; x <= MINIMAP_DISTANCE + 1; x++) {\r\n        for (let y = -MINIMAP_DISTANCE; y <= MINIMAP_DISTANCE + 1; y++) {\r\n            gui.fillStyle = getTerrainColor(gameScene.getTile(me.position.x + x, me.position.y + y));\r\n            gui.fillRect(\r\n                x0 + x * MINIMAP_SCALE + shiftX,\r\n                y0 + y * MINIMAP_SCALE + shiftY,\r\n                MINIMAP_SCALE,\r\n                MINIMAP_SCALE,\r\n            );\r\n        }\r\n    }\r\n\r\n    gameScene.entities\r\n        .filter(\r\n            (entity) =>\r\n                Math.abs(entity.position.x - me.position.x) <= MINIMAP_DISTANCE + 1.5 &&\r\n                Math.abs(entity.position.y - me.position.y) <= MINIMAP_DISTANCE + 1.5,\r\n        )\r\n        .forEach((entity) => {\r\n            gui.fillStyle = getEntityColor(entity.serialize().type);\r\n            gui.fillRect(\r\n                Math.floor(x0 + (entity.position.x - me.position.x) * MINIMAP_SCALE),\r\n                Math.floor(y0 + (entity.position.y - me.position.y) * MINIMAP_SCALE),\r\n                MINIMAP_SCALE,\r\n                MINIMAP_SCALE,\r\n            );\r\n        });\r\n\r\n    gui.lineWidth = BORDER_WIDTH;\r\n    gui.strokeStyle = '#000000';\r\n    gui.strokeRect(\r\n        x0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH + 2,\r\n        y0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH + 2,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 - 4 + MINIMAP_SCALE,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 - 4 + MINIMAP_SCALE,\r\n    );\r\n\r\n    gui.font = '16px pixel';\r\n    gui.textBaseline = 'top';\r\n    gui.textAlign = 'center';\r\n    shadeText(gui, 'x', x0, y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10);\r\n    gui.textAlign = 'right';\r\n    shadeText(\r\n        gui,\r\n        Math.round(me.position.x).toString(),\r\n        x0 - 10,\r\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\r\n    );\r\n    gui.textAlign = 'left';\r\n    shadeText(\r\n        gui,\r\n        Math.round(me.position.y).toString(),\r\n        x0 + 10,\r\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\r\n    );\r\n\r\n    guiTexture.update();\r\n}\r\n\r\nfunction getTerrainColor(number: number): string {\r\n    switch (number) {\r\n        case 1: // Grass\r\n            return '#67943F';\r\n        case 2: // Water\r\n            return '#2EB0E5';\r\n        case 4: // Sand\r\n            return '#FDDC86';\r\n    }\r\n    return '#DDDDDD';\r\n}\r\n\r\nfunction getEntityColor(type: string): string {\r\n    switch (type) {\r\n        case 'tree':\r\n            return '#2A4323';\r\n        case 'player':\r\n            return '#000dff';\r\n        case 'stone':\r\n            return '#dddddd';\r\n    }\r\n    return '#DDDDDD';\r\n}\r\n","import React, { createRef } from 'react';\r\n\r\nimport babylonjs, { Vector3, UniversalCamera, StandardMaterial, MeshBuilder } from 'babylonjs';\r\nimport { Scene, Engine, SceneEventArgs } from 'react-babylonjs';\r\n\r\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { Player, serializedPlayer } from '../../shared/gameObjects/20_Player';\r\nimport { Chunk } from '../../shared/gameObjects/10_Chunk';\r\nimport { GameScene } from '../../shared/Scene';\r\nimport { CONTROLS_WASD } from '../keyBindings';\r\nimport { NetworkClient } from './network/Client';\r\nimport { minimap } from './gui/minimap';\r\nimport { debugInfo } from './gui/debugInfo';\r\nimport { CAMERA_ANGLE, CAMERA_DISTANCE } from '../../shared/constants';\r\nimport { shadeText } from './utils/shadeText';\r\nimport { AbstractGameEntity, serializedEntity } from '../../shared/gameObjects/01_AbstractGameEntity';\r\n\r\nexport const MAX_RENDER_DISTANCE = 3;\r\nconst REQUEST_DISTANCE = 3;\r\nconst DELETE_DISTANCE = 5;\r\n\r\ninterface IGameCoreProps {\r\n    apiUrl: string;\r\n}\r\n\r\ninterface IGameCoreState {\r\n    loggedIn: boolean;\r\n}\r\n\r\nexport class GameCore extends React.Component<IGameCoreProps, IGameCoreState> {\r\n    gameScene: GameScene;\r\n    me: Player | null = null;\r\n\r\n    babylonScene: babylonjs.Scene | null;\r\n    guiTexture: AdvancedDynamicTexture | null;\r\n    networkClient: NetworkClient;\r\n    state: IGameCoreState = {\r\n        loggedIn: false,\r\n    };\r\n\r\n    timer: NodeJS.Timeout;\r\n\r\n    zoom: number = 1;\r\n    renderDistance: number = MAX_RENDER_DISTANCE;\r\n\r\n    debug: boolean = false;\r\n\r\n    loginRef = createRef<HTMLInputElement>();\r\n    passwordRef = createRef<HTMLInputElement>();\r\n\r\n    mouseEntity: AbstractGameEntity | null;\r\n\r\n    constructor(props: IGameCoreProps) {\r\n        super(props);\r\n\r\n        this.gameScene = new GameScene();\r\n        this.networkClient = new NetworkClient(this.props.apiUrl, this.gameScene, () => this.babylonScene!);\r\n        this.networkClient.on('authenticated', (data: serializedEntity<serializedPlayer>) => this.initGame(data));\r\n        this.networkClient.on('invalidPassword', () => {\r\n            if (this.loginRef.current && this.passwordRef.current) {\r\n                this.loginRef.current.classList.add('shake');\r\n                this.passwordRef.current.classList.add('shake');\r\n                setTimeout(() => {\r\n                    if (this.loginRef.current && this.passwordRef.current) {\r\n                        this.loginRef.current.classList.remove('shake');\r\n                        this.passwordRef.current.classList.remove('shake');\r\n                    }\r\n                }, 600);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            if (this.me) {\r\n                this.me.keyDown(event.keyCode);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            if (this.me) {\r\n                this.me.keyUp(event.keyCode);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('wheel', (event) => {\r\n            this.zoom += (event.deltaY / Math.abs(event.deltaY)) * 0.12;\r\n            if (this.zoom < 0.5) this.zoom = 0.5;\r\n            if (this.zoom > 3) this.zoom = 3;\r\n        });\r\n\r\n        window.addEventListener('resize', (event) => {\r\n            this.resize();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resize();\r\n        this.networkClient.open();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        this.networkClient.close();\r\n    }\r\n\r\n    initGame(player: serializedEntity<serializedPlayer>) {\r\n        this.setState({\r\n            loggedIn: true,\r\n        });\r\n        this.me = new Player(this.gameScene, player.id);\r\n        this.me.attachBabylon(this.babylonScene!);\r\n        this.me.bindKeys(CONTROLS_WASD);\r\n        this.me.deserialize(player, false);\r\n        this.gameScene.entities.add(player.id, this.me);\r\n\r\n        (window as any).player = this.me;\r\n        (window as any).scene = this.gameScene;\r\n        (window as any).enableDebug = () => {\r\n            this.babylonScene && this.babylonScene.debugLayer.show();\r\n            this.debug = true;\r\n        };\r\n\r\n        this.timer = setInterval(async () => {\r\n            if (this.me) this.networkClient.sendPlayerUpdate(this.me);\r\n        }, 100);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        this.gameScene.entities.forEach((entity) => entity.tick(deltaTime));\r\n\r\n        this.unloadUnusedComponents();\r\n        this.requestChunks();\r\n\r\n        if (this.guiTexture) {\r\n            if (this.me) {\r\n                const gui = this.guiTexture.getContext();\r\n                const width = this.guiTexture.getSize().width;\r\n                const height = this.guiTexture.getSize().height;\r\n                gui.clearRect(0, 0, width, height);\r\n\r\n                minimap(this.guiTexture, this.gameScene, this.me);\r\n                if (this.debug) {\r\n                    debugInfo(this.guiTexture, this.gameScene, deltaTime);\r\n                }\r\n\r\n                this.guiTexture.update();\r\n            } else {\r\n                const gui = this.guiTexture.getContext();\r\n                const width = this.guiTexture.getSize().width;\r\n                const height = this.guiTexture.getSize().height;\r\n                gui.fillStyle = '#33334C';\r\n                gui.fillRect(0, 0, width, height);\r\n\r\n                gui.fillStyle = '#FFFFFF';\r\n                gui.font = '20px pixel';\r\n                gui.textBaseline = 'middle';\r\n                gui.textAlign = 'center';\r\n\r\n                shadeText(gui, 'Připojování k serveru...', width / 2, height / 2);\r\n\r\n                this.guiTexture.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        const canvas = document.getElementById('game') as HTMLCanvasElement;\r\n        if (canvas) {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        }\r\n    }\r\n\r\n    onSceneMount(event: SceneEventArgs) {\r\n        const { scene } = event;\r\n\r\n        this.babylonScene = (scene as any) as babylonjs.Scene;\r\n\r\n        const camera = new UniversalCamera('Camera', new Vector3(0, 0, CAMERA_DISTANCE), this.babylonScene);\r\n        camera.rotation = new Vector3(-CAMERA_ANGLE, 0, 0);\r\n        //camera.attachControl(event.canvas, true);\r\n\r\n        const skybox = MeshBuilder.CreateCylinder(\r\n            'skyBox',\r\n            {\r\n                height: CAMERA_DISTANCE * 100,\r\n                diameterTop: MAX_RENDER_DISTANCE * 16 * 100 * 3,\r\n                diameterBottom: MAX_RENDER_DISTANCE * 16 * 100 * 1,\r\n                tessellation: 24,\r\n            },\r\n            this.babylonScene,\r\n        );\r\n        const skyboxMaterial = new StandardMaterial('skyBox', this.babylonScene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n        skybox.rotation = new Vector3(Math.PI / 2, 0, 0);\r\n\r\n        this.guiTexture = AdvancedDynamicTexture.CreateFullscreenUI('GUI', true, scene);\r\n\r\n        scene.onPointerDown = (_, pickResult) => {\r\n            if (pickResult.hit && pickResult.pickedMesh && !pickResult.pickedMesh.name.startsWith('chunk')) {\r\n                this.mouseEntity = this.gameScene.entities.get(pickResult.pickedMesh.name.split(' ')[1]);\r\n                if (this.mouseEntity) {\r\n                    this.mouseEntity.mouseDown();\r\n                }\r\n            } else {\r\n                this.mouseEntity = null;\r\n            }\r\n        };\r\n        scene.onPointerUp = () => {\r\n            if (this.mouseEntity) {\r\n                this.mouseEntity.mouseUp();\r\n            }\r\n        };\r\n\r\n        /*\r\n        var pipeline = new BABYLON.LensRenderingPipeline(\r\n            'lens',\r\n            {\r\n                edge_blur: 0.2,\r\n                chromatic_aberration: 0.2,\r\n                distortion: 0.1,\r\n                grain_amount: 0.1,\r\n\r\n                dof_focus_distance: (CAMERA_DISTANCE * this.zoom) / Math.cos(CAMERA_ANGLE),\r\n                dof_aperture: 100, // set this very high for tilt-shift effect\r\n                dof_pentagon: true,\r\n                dof_gain: 1.0,\r\n                dof_threshold: 1.0,\r\n                dof_darken: 0.25,\r\n            },\r\n            scene as any,\r\n            1.0,\r\n            camera as any,\r\n        );\r\n        */\r\n\r\n        scene.getEngine().runRenderLoop(() => {\r\n            this.tick(scene.getEngine().getDeltaTime());\r\n\r\n            (async () => {\r\n                if (this.me) {\r\n                    camera.position = new Vector3(\r\n                        this.me.position.x * 100,\r\n                        -this.me.position.y * 100 - CAMERA_DISTANCE * this.zoom * Math.tan(CAMERA_ANGLE),\r\n                        -CAMERA_DISTANCE * this.zoom,\r\n                    );\r\n\r\n                    //pipeline.setFocusDistance((CAMERA_DISTANCE * this.zoom) / Math.cos(CAMERA_ANGLE));\r\n\r\n                    skybox.position.x = this.me.position.x * 100;\r\n                    skybox.position.y = -this.me.position.y * 100;\r\n                }\r\n\r\n                this.renderDistance = Math.min(Math.ceil(this.zoom * 2), MAX_RENDER_DISTANCE);\r\n            })();\r\n\r\n            if (scene) {\r\n                scene.render();\r\n            }\r\n        });\r\n    }\r\n\r\n    unloadUnusedComponents() {\r\n        if (this.me) {\r\n            this.gameScene.chunks.forEach((chunk) => {\r\n                const distX = Math.abs(Math.round(this.me!.position.x / 16) - chunk.position.x);\r\n                const distY = Math.abs(Math.round(this.me!.position.y / 16) - chunk.position.y);\r\n                if (distX > this.renderDistance || distY > this.renderDistance) {\r\n                    chunk.setVisibility(false);\r\n                    if (distX > DELETE_DISTANCE || distY > DELETE_DISTANCE) {\r\n                        this.gameScene.chunks.remove(chunk.id);\r\n                    }\r\n                } else {\r\n                    chunk.setVisibility(true);\r\n                }\r\n            });\r\n\r\n            this.gameScene.entities.forEach((entity) => {\r\n                const distX = Math.abs(Math.round(this.me!.position.x) - entity.position.x) / 16;\r\n                const distY = Math.abs(Math.round(this.me!.position.y) - entity.position.y) / 16;\r\n\r\n                if (distX > this.renderDistance || distY > this.renderDistance) {\r\n                    entity.setVisibility(false);\r\n                    if (distX > DELETE_DISTANCE || distY > DELETE_DISTANCE) {\r\n                        this.gameScene.entities.remove(entity.id);\r\n                    }\r\n                } else {\r\n                    entity.setVisibilityAttachBabylon(true, this.babylonScene!);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    requestChunks() {\r\n        if (this.me) {\r\n            for (let x = -REQUEST_DISTANCE; x <= REQUEST_DISTANCE; x++) {\r\n                for (let y = -REQUEST_DISTANCE; y <= REQUEST_DISTANCE; y++) {\r\n                    const chunkX = Math.round(this.me.position.x / 16) + x;\r\n                    const chunkY = Math.round(this.me.position.y / 16) + y;\r\n                    const chunkId = Chunk.getId(chunkX, chunkY);\r\n\r\n                    if (!this.gameScene.chunks.includes(chunkId)) {\r\n                        this.networkClient.requestChunk(chunkX, chunkY);\r\n\r\n                        const chunk = new Chunk(this.gameScene, chunkX, chunkY);\r\n                        chunk.attachBabylon(this.babylonScene!);\r\n\r\n                        this.gameScene.chunks.add(chunkId, chunk);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.state.loggedIn && (\r\n                    <div className=\"center\">\r\n                        <p>Přihlaste se, nebo si vytvořte účet:</p>\r\n                        <p>\r\n                            <input type=\"text\" placeholder=\"Jméno\" ref={this.loginRef} />\r\n                        </p>\r\n                        <p>\r\n                            <input type=\"password\" placeholder=\"Heslo\" ref={this.passwordRef} />\r\n                        </p>\r\n                        <p>\r\n                            <button\r\n                                onClick={() =>\r\n                                    this.networkClient.auth(\r\n                                        this.loginRef!.current!.value,\r\n                                        this.passwordRef!.current!.value,\r\n                                    )\r\n                                }\r\n                            >\r\n                                Přihlásit se!\r\n                            </button>\r\n                        </p>\r\n                    </div>\r\n                )}\r\n                <Engine antialias={true} canvasId=\"game\">\r\n                    <Scene onSceneMount={(event: SceneEventArgs) => this.onSceneMount(event)}>\r\n                        <></>\r\n                    </Scene>\r\n                </Engine>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { GameScene } from '../../../shared/Scene';\r\nimport { shadeText } from '../utils/shadeText';\r\n\r\nexport function debugInfo(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, deltaTime: number) {\r\n    const gui = guiTexture.getContext();\r\n\r\n    let x = 30;\r\n    let y = 20;\r\n\r\n    const values: { [key: string]: string } = {\r\n        FPS: (1000 / deltaTime).toFixed(2),\r\n        'Enabled entities':\r\n            gameScene.entities.filter((value) => value.getVisibility()).length() +\r\n            ' (of ' +\r\n            gameScene.entities.length() +\r\n            ' loaded)',\r\n        'Enabled chunks':\r\n            gameScene.chunks.filter((value) => value.getVisibility()).length() +\r\n            ' (of ' +\r\n            gameScene.chunks.length() +\r\n            ' loaded)',\r\n    };\r\n\r\n    gui.font = '16px pixel';\r\n    gui.textBaseline = 'top';\r\n    gui.textAlign = 'left';\r\n\r\n    Object.keys(values).forEach((key) => {\r\n        shadeText(gui, key + ': ' + values[key], x, y);\r\n        y += 20;\r\n    });\r\n\r\n    guiTexture.update();\r\n}\r\n","import React from 'react';\r\nimport { GameCore } from './gameMechanics/GameCore';\r\nimport { loadTextures } from './gameMechanics/textures/textureEngine';\r\n\r\ninterface IAppProps {}\r\n\r\ninterface IAppState {\r\n    status: 'loading' | 'ingame';\r\n    textures: {\r\n        loaded: number;\r\n        of: number;\r\n    };\r\n}\r\n\r\nclass App extends React.Component<IAppProps, IAppState> {\r\n    apiUrl = 'http://localhost:80/';\r\n    //apiUrl = 'https://randombot-server.herokuapp.com/';\r\n\r\n    state: IAppState = {\r\n        status: 'loading',\r\n        textures: {\r\n            loaded: 0,\r\n            of: 0,\r\n        },\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            textures: {\r\n                loaded: 0,\r\n                of: loadTextures(\r\n                    () => {\r\n                        this.setState({ status: 'ingame' });\r\n                    },\r\n                    (loaded, of) => {\r\n                        this.setState({\r\n                            textures: {\r\n                                loaded,\r\n                                of,\r\n                            },\r\n                        });\r\n                    },\r\n                ),\r\n            },\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.status === 'loading' && (\r\n                    <div className=\"center\">\r\n                        Načítání textur... ({this.state.textures.loaded}/{this.state.textures.of})\r\n                    </div>\r\n                )}\r\n                {this.state.status === 'ingame' && <GameCore apiUrl={this.apiUrl} />}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './frontend/index.css';\r\nimport App from './frontend/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}