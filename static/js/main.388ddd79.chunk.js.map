{"version":3,"sources":["frontend/gameMechanics/textures/texturePack.ts","frontend/gameMechanics/textures/SimpleTexture.ts","frontend/gameMechanics/textures/textureEngine.ts","frontend/gameMechanics/textures/AnimatedTexture.ts","shared/constants.ts","shared/gameObjects/00_AbstractGameObject.ts","shared/gameObjects/01_AbstractGameEntity.ts","shared/gameObjects/Player.tsx","shared/gameObjects/Chunk.tsx","frontend/gameMechanics/utils/IndexedList.ts","shared/gameObjects/Scene.ts","frontend/keyBindings.ts","shared/gameObjects/Tree.tsx","shared/gameObjects/Stone.tsx","frontend/gameMechanics/network/Client.ts","frontend/gameMechanics/GameCore.tsx","frontend/gameMechanics/gui/minimap.ts","frontend/gameMechanics/gui/debugInfo.ts","frontend/App.tsx","serviceWorker.js","index.tsx"],"names":["textures","player","filename","width","animations","default","start","end","type","walking","inventory_opening","inventory_open","inventory_closing","equip","unequip","mine","eat","interact","rock_big","rock_small","bush","tree_big","tree_small","grass_water_L","grass_water_R","grass_water_T","grass_water_B","grass_water_TL","grass_water_RB","grass_water_TR","grass_water_BL","grass_water_TBL","grass_water_TRL","grass_water_RBL","grass_water_TRB","grass_water_TRBL","grass_water_corner_BL","grass_water_corner_BR","grass_water_corner_TL","grass_water_corner_TR","SimpleTexture","textureAtlas","scene","texture","this","t","Texture","RESOURCES_LOCATION","NEAREST_NEAREST","hasAlpha","removeTexture","resourceFiles","Object","values","map","filter","v","i","indexOf","atlases","materials","loaded","getSimpleMaterial","material","createMaterial","getTexture","StandardMaterial","emissiveTexture","opacityTexture","getImage","console","warn","AnimatedTexture","animation","animationQueue","frame","direction","interval","textureScale","uOffset","vOffset","uScale","vScale","queue","setInterval","tick","length","unskipable","isLast","keys","includes","push","skippable","framesCount","Math","abs","haveNextAnimation","shift","newAnimation","animationDir","error","CAMERA_ANGLE","PI","AbstractGameObject","gameScene","babylonScene","mesh","position","Vector2","Zero","removeMesh","deltaTime","visible","setEnabled","isEnabled","AbstractGameEntity","dirty","server_dead","id","x","y","data","serialized","smooth","updateMesh","z","getSize","cos","rotation","Player","velocityX","velocityY","targetX","targetY","finalVelocityX","finalVelocityY","targetTime","keyBindings","up","down","left","right","keysPressed","titleTexture","sup","deltaTimeModified","movingX","movingY","diagonalModifier","sqrt","ogX","ogY","pow","keyCode","key","newBindings","size","MeshBuilder","CreatePlane","height","sideOrientation","Mesh","FRONTSIDE","title","Vector3","DynamicTexture","LINEAR_LINEAR","ctx","getContext","fillStyle","fillRect","font","textBaseline","textAlign","fillText","update","parent","queueOnce","child","getChildMeshes","removeMaterial","Chunk","ground","getTerrainColor","drawTransition","tileType","filePrefix","posX","posY","sides","getTile","top","drawImage","bottom","img","corner","shiftX","shiftY","blackList","suffix","reduce","prev","letter","getId","toString","number","minimap","IndexedList","value","detachBabylon","deserialize","newObjectCreator","callbackfn","forEach","index","result","add","getKeys","GameScene","entities","chunks","calcX","floor","calcY","chunkX","chunkY","chunk","get","CONTROLS_WASD","Tree","Stone","NetworkClient","apiUrl","getBabylonScene","socket","userId","opened","callbacks","authenticated","updated","event","callback","disconnect","io","setListeners","on","log","payload","serialize","emit","removed","entity","remove","updateOrCreate","createEntity","attachBabylon","e","GameCore","props","me","guiTexture","networkClient","state","timer","zoom","initGame","document","addEventListener","keyDown","keyUp","preventDefault","deltaY","window","resize","open","clearInterval","close","bindKeys","sendPlayerUpdate","unloadUnusedComponents","requestChunks","gui","clearRect","x0","MINIMAP_SCALE","y0","round","FPS","toFixed","getVisibility","debugInfo","canvas","getElementById","innerWidth","innerHeight","camera","UniversalCamera","AdvancedDynamicTexture","CreateFullscreenUI","getEngine","runRenderLoop","getDeltaTime","tan","render","distX","distY","setVisibility","chunkId","requestChunk","antialias","canvasId","onSceneMount","React","Component","App","status","of","onLoad","onStateChange","setState","Image","onload","onerror","src","style","transform","color","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.388ddd79.chunk.js","sourcesContent":["import { texturePack } from './textureEngine';\r\n\r\nexport const textures: texturePack = {\r\n    player: {\r\n        filename: 'Character.png',\r\n        width: 57,\r\n        animations: {\r\n            default: {\r\n                start: 0,\r\n                end: 0,\r\n                type: 'frame',\r\n            },\r\n            walking: {\r\n                start: 0,\r\n                end: 7,\r\n                type: 'loop',\r\n            },\r\n            inventory_opening: {\r\n                start: 8,\r\n                end: 11,\r\n                type: 'once',\r\n            },\r\n            inventory_open: {\r\n                start: 11,\r\n                end: 11,\r\n                type: 'frame',\r\n            },\r\n            inventory_closing: {\r\n                start: 11,\r\n                end: 8,\r\n                type: 'once',\r\n            },\r\n            equip: {\r\n                start: 12,\r\n                end: 19,\r\n                type: 'once',\r\n            },\r\n            unequip: {\r\n                start: 19,\r\n                end: 12,\r\n                type: 'once',\r\n            },\r\n            mine: {\r\n                start: 20,\r\n                end: 22,\r\n                type: 'boomerang',\r\n            },\r\n            eat: {\r\n                start: 23,\r\n                end: 51,\r\n                type: 'once',\r\n            },\r\n            interact: {\r\n                start: 52,\r\n                end: 56,\r\n                type: 'once',\r\n            },\r\n        },\r\n    },\r\n    rock_big: {\r\n        filename: 'rock_big.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    rock_small: {\r\n        filename: 'rock_small.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    bush: {\r\n        filename: 'bush.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_big: {\r\n        filename: 'tree_big.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_small: {\r\n        filename: 'tree_small.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_L: {\r\n        filename: 'grass_water_L.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_R: {\r\n        filename: 'grass_water_R.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_T: {\r\n        filename: 'grass_water_T.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_B: {\r\n        filename: 'grass_water_B.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TL: {\r\n        filename: 'grass_water_TL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_RB: {\r\n        filename: 'grass_water_RB.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TR: {\r\n        filename: 'grass_water_TR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_BL: {\r\n        filename: 'grass_water_BL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TBL: {\r\n        filename: 'grass_water_TBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRL: {\r\n        filename: 'grass_water_TRL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_RBL: {\r\n        filename: 'grass_water_RBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRB: {\r\n        filename: 'grass_water_TRB.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRBL: {\r\n        filename: 'grass_water_TRBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_BL: {\r\n        filename: 'grass_water_corner_BL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_BR: {\r\n        filename: 'grass_water_corner_BR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_TL: {\r\n        filename: 'grass_water_corner_TL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_TR: {\r\n        filename: 'grass_water_corner_TR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n};\r\n","import { Texture, Scene } from 'babylonjs';\r\nimport { textures } from './texturePack';\r\nimport { RESOURCES_LOCATION } from './textureEngine';\r\n\r\nexport class SimpleTexture {\r\n    private textureAtlas: string;\r\n    private texture: Texture;\r\n    constructor(textureAtlas: string, private scene: Scene) {\r\n        this.textureAtlas = textureAtlas;\r\n        const t = new Texture(\r\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\r\n            scene,\r\n            false,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n        t.hasAlpha = true;\r\n        this.texture = t;\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texture;\r\n    }\r\n\r\n    detach() {\r\n        this.scene.removeTexture(this.texture);\r\n    }\r\n}\r\n","import { Texture, Scene, StandardMaterial, Material } from 'babylonjs';\r\nimport { SimpleTexture } from './SimpleTexture';\r\nimport { textures } from './texturePack';\r\n\r\nexport interface texturePack {\r\n    [name: string]: {\r\n        filename: string;\r\n        width: number;\r\n        animations: { [name: string]: { start: number; end: number; type: 'loop' | 'once' | 'boomerang' | 'frame' } };\r\n    };\r\n}\r\n\r\nlet resourceFiles = Object.values(textures).map((texture) => texture.filename);\r\nresourceFiles = resourceFiles.filter((v, i) => resourceFiles.indexOf(v) === i);\r\n\r\nlet atlases: { [key: string]: HTMLImageElement } = {};\r\nlet materials: { [key: string]: Material } = {};\r\n\r\nlet loaded = 0;\r\n\r\nexport const RESOURCES_LOCATION = '/randomgame/resources/textures/';\r\n\r\nexport function loadTextures(onLoad: () => void, onStateChange?: (loaded: number, of: number) => void) {\r\n    if (resourceFiles.length === 0) {\r\n        onStateChange && onStateChange(0, resourceFiles.length);\r\n        onLoad();\r\n    }\r\n\r\n    resourceFiles.forEach((filename) => {\r\n        atlases[filename] = new Image();\r\n        atlases[filename].onload = () => {\r\n            loaded++;\r\n            onStateChange && onStateChange(loaded, resourceFiles.length);\r\n\r\n            if (loaded === resourceFiles.length) {\r\n                onLoad();\r\n            }\r\n        };\r\n        atlases[filename].onerror = () => {\r\n            console.error('Error loading resource file: ', filename);\r\n        };\r\n        atlases[filename].src = RESOURCES_LOCATION + filename;\r\n    });\r\n\r\n    return resourceFiles.length;\r\n}\r\n\r\nexport function createTexture(texture: string, scene: Scene) {\r\n    const t = new Texture(\r\n        RESOURCES_LOCATION + textures[texture].filename,\r\n        scene,\r\n        false,\r\n        true,\r\n        Texture.NEAREST_SAMPLINGMODE,\r\n    );\r\n    t.uOffset = 0;\r\n    t.vOffset = 0;\r\n    t.uScale = 1 / textures[texture].width;\r\n    t.vScale = 1;\r\n    t.hasAlpha = true;\r\n    return t;\r\n}\r\n\r\nexport function getSimpleMaterial(textureAtlas: string, scene: Scene) {\r\n    if (materials[textureAtlas]) {\r\n        return materials[textureAtlas];\r\n    }\r\n\r\n    const texture = new SimpleTexture(textureAtlas, scene);\r\n    const material = createMaterial(texture.getTexture(), scene);\r\n    materials[textureAtlas] = material;\r\n\r\n    return material;\r\n}\r\n\r\nexport function createMaterial(texture: Texture, scene: Scene) {\r\n    const material = new StandardMaterial('mat', scene);\r\n    material.emissiveTexture = texture;\r\n    material.opacityTexture = texture;\r\n\r\n    return material;\r\n}\r\n\r\nexport function getImage(texture: string): HTMLImageElement | null {\r\n    if (!textures[texture]) {\r\n        console.warn('Image ' + texture + ' not found!');\r\n        return null;\r\n    }\r\n    return atlases[textures[texture].filename];\r\n}\r\n","import { Texture, Scene } from 'babylonjs';\r\nimport { textures } from './texturePack';\r\nimport { RESOURCES_LOCATION } from './textureEngine';\r\n\r\nconst TIME_PER_FRAME = 80;\r\n\r\nexport class AnimatedTexture {\r\n    private textureAtlas: string;\r\n    private texture: Texture;\r\n    private animationQueue: { texture: string; skippable: boolean }[] = [];\r\n    private frame: number = 0;\r\n    private direction: number = 1;\r\n    private interval: NodeJS.Timeout;\r\n\r\n    private textureScale = 1;\r\n\r\n    constructor(textureAtlas: string, private scene: Scene, animation: string = 'default') {\r\n        this.textureAtlas = textureAtlas;\r\n        this.textureScale = 1 / textures[textureAtlas].width;\r\n\r\n        const t = new Texture(\r\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\r\n            scene,\r\n            false,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n        t.uOffset = this.textureScale * textures[textureAtlas].animations[animation].start;\r\n        t.vOffset = 0;\r\n        t.uScale = this.textureScale;\r\n        t.vScale = 1;\r\n        t.hasAlpha = true;\r\n\r\n        this.texture = t;\r\n\r\n        this.queue(animation);\r\n        this.interval = setInterval(() => this.tick(), TIME_PER_FRAME);\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texture;\r\n    }\r\n\r\n    isLast(animation: string) {\r\n        return this.animationQueue[this.animationQueue.length - 1].texture === animation;\r\n    }\r\n\r\n    queueOnce(animation: string, unskipable?: boolean) {\r\n        if (!this.isLast(animation)) {\r\n            this.queue(animation, unskipable);\r\n        }\r\n    }\r\n\r\n    queue(animation: string, unskipable?: boolean) {\r\n        if (!Object.keys(textures[this.textureAtlas].animations).includes(animation)) {\r\n            console.warn('Animation does not exist');\r\n            this.animationQueue.push({ texture: 'default', skippable: true });\r\n            return;\r\n        }\r\n\r\n        if (this.animationQueue.length > 1 && this.animationQueue[this.animationQueue.length - 1].skippable) {\r\n            this.animationQueue[this.animationQueue.length - 1] = { texture: animation, skippable: !unskipable };\r\n        } else {\r\n            this.animationQueue.push({ texture: animation, skippable: !unskipable });\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        if (!this.texture) {\r\n            console.error('Texture is null');\r\n            return;\r\n        }\r\n\r\n        this.frame += this.direction;\r\n\r\n        const animation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\r\n        const framesCount = Math.abs(animation.start - animation.end);\r\n\r\n        const haveNextAnimation = this.animationQueue.length > 1;\r\n\r\n        if (this.frame > framesCount) {\r\n            // At the right end\r\n\r\n            switch (animation.type) {\r\n                case 'loop':\r\n                    this.direction = 1;\r\n                    this.frame = 0;\r\n                    if (haveNextAnimation) {\r\n                        this.animationQueue.shift();\r\n                    }\r\n                    break;\r\n                case 'once':\r\n                    this.direction = 1;\r\n                    if (haveNextAnimation) {\r\n                        this.frame = 0;\r\n                        this.animationQueue.shift();\r\n                    } else {\r\n                        this.frame = framesCount;\r\n                    }\r\n                    break;\r\n                case 'boomerang':\r\n                    this.direction = -1;\r\n                    this.frame -= 2;\r\n                    break;\r\n                case 'frame':\r\n                    this.direction = 1;\r\n                    this.frame = 0;\r\n                    if (haveNextAnimation) {\r\n                        this.animationQueue.shift();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (this.frame < 0) {\r\n            // At the left end - Can happen just with boomerang\r\n            this.direction = 1;\r\n            if (haveNextAnimation) {\r\n                this.frame = 0;\r\n                this.animationQueue.shift();\r\n            } else {\r\n                this.frame = 0;\r\n            }\r\n        }\r\n\r\n        const newAnimation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\r\n        const animationDir = newAnimation.start > newAnimation.end ? -1 : 1;\r\n        this.texture.uOffset = (this.frame * animationDir + newAnimation.start) * this.textureScale;\r\n    }\r\n\r\n    detach() {\r\n        this.scene.removeTexture(this.texture);\r\n    }\r\n}\r\n","export const CAMERA_DISTANCE = 1500;\r\nexport const CAMERA_ANGLE = Math.PI / 4;\r\n","import { Mesh, Vector2, Scene } from 'babylonjs';\r\nimport { GameScene } from './Scene';\r\n\r\nexport abstract class AbstractGameObject {\r\n    protected babylonScene: Scene | null = null;\r\n    protected mesh: Mesh | null = null;\r\n    public position: Vector2 = Vector2.Zero();\r\n\r\n    constructor(protected gameScene: GameScene) {}\r\n\r\n    attachBabylon(babylonScene: Scene): AbstractGameObject {\r\n        this.babylonScene = babylonScene;\r\n\r\n        return this;\r\n    }\r\n\r\n    detachBabylon(): AbstractGameObject {\r\n        if (this.babylonScene && this.mesh) {\r\n            this.babylonScene.removeMesh(this.mesh, true);\r\n            this.babylonScene = null;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    abstract serialize(): any;\r\n\r\n    abstract deserialize(serialized: any, dirty: boolean, smooth?: boolean): void;\r\n\r\n    tick(deltaTime: number): void {}\r\n\r\n    abstract async updateMesh(): Promise<void>;\r\n\r\n    setVisibility(visible: boolean) {\r\n        if (this.mesh) this.mesh.setEnabled(visible);\r\n    }\r\n\r\n    getVisibility() {\r\n        return !!this.mesh && this.mesh.isEnabled();\r\n    }\r\n\r\n    abstract get id(): string;\r\n}\r\n","import { Vector2 } from 'babylonjs';\r\nimport { CAMERA_ANGLE } from '../constants';\r\nimport { AbstractGameObject } from './00_AbstractGameObject';\r\n\r\nexport interface serializedEntity<T> {\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    type: string;\r\n    data: T;\r\n}\r\n\r\nexport abstract class AbstractGameEntity extends AbstractGameObject {\r\n    // Should be used for all entities, buildings, trees, etc.\r\n\r\n    public dirty: boolean = true;\r\n    public server_dead: boolean = false;\r\n\r\n    serialize(): serializedEntity<{}> {\r\n        return {\r\n            id: this.id,\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n            type: AbstractGameEntity.type,\r\n            data: {},\r\n        };\r\n    }\r\n\r\n    deserialize(serialized: any, dirty: boolean, smooth?: boolean): void {\r\n        this.updateMesh();\r\n        if (dirty) this.dirty = true;\r\n    }\r\n\r\n    public clean() {\r\n        this.dirty = false;\r\n    }\r\n\r\n    public server_kill() {\r\n        this.dirty = true;\r\n        this.server_dead = true;\r\n    }\r\n\r\n    public async updateMesh(): Promise<void> {\r\n        if (this.mesh) {\r\n            this.mesh.position.z = -(this.getSize().y * Math.cos(CAMERA_ANGLE)) / 2;\r\n            this.mesh.rotation.x = -CAMERA_ANGLE;\r\n\r\n            this.mesh.position.x = this.position.x * 100;\r\n            this.mesh.position.y = -this.position.y * 100 - this.getSize().y;\r\n        }\r\n    }\r\n\r\n    abstract getSize(): Vector2;\r\n\r\n    static get type(): string {\r\n        return 'unknown';\r\n    }\r\n}\r\n","import { Vector3, Mesh, Scene, MeshBuilder, DynamicTexture, Texture, Vector2 } from 'babylonjs';\r\nimport { createMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { AnimatedTexture } from '../../frontend/gameMechanics/textures/AnimatedTexture';\r\nimport { GameScene } from './Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\nimport { CAMERA_ANGLE } from '../constants';\r\n\r\nexport interface serializedPlayer {\r\n    velocityX: number;\r\n    velocityY: number;\r\n}\r\n\r\nexport interface keyBindings {\r\n    up: number;\r\n    down: number;\r\n    left: number;\r\n    right: number;\r\n}\r\n\r\nconst SPEED_CHANGE = 0.002;\r\nconst SLOWING = 0.95;\r\nconst MODIFIER = 0.1;\r\nconst SMOOTH_TIME = 50;\r\n\r\nexport class Player extends AbstractGameEntity {\r\n    private velocityX: number = 0;\r\n    private velocityY: number = 0;\r\n\r\n    // SMOOTHING\r\n    private targetX: number = 0;\r\n    private targetY: number = 0;\r\n    private finalVelocityX: number = 0;\r\n    private finalVelocityY: number = 0;\r\n    private targetTime: number = -1;\r\n\r\n    private keyBindings: keyBindings = {\r\n        up: 0,\r\n        down: 0,\r\n        left: 0,\r\n        right: 0,\r\n    };\r\n    private keysPressed: number[] = [];\r\n\r\n    private texture: AnimatedTexture;\r\n    private titleTexture: DynamicTexture;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedPlayer> {\r\n        let sup = super.serialize() as serializedEntity<serializedPlayer>;\r\n        sup.type = Player.type;\r\n        sup.data = {\r\n            velocityX: this.velocityX,\r\n            velocityY: this.velocityY,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedPlayer>, dirty: boolean, smooth?: boolean): void {\r\n        if (smooth) {\r\n            this.targetX = serialized.x;\r\n            this.targetY = serialized.y;\r\n            this.finalVelocityX = serialized.data.velocityX;\r\n            this.finalVelocityY = serialized.data.velocityY;\r\n            this.targetTime = SMOOTH_TIME;\r\n            this.velocityX = (serialized.x - this.position.x) / SMOOTH_TIME;\r\n            this.velocityY = (serialized.y - this.position.y) / SMOOTH_TIME;\r\n        } else {\r\n            this.position.x = serialized.x;\r\n            this.position.y = serialized.y;\r\n            this.velocityX = serialized.data.velocityX;\r\n            this.velocityY = serialized.data.velocityY;\r\n        }\r\n        super.deserialize(serialized, dirty, smooth);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        if (this.targetTime > 0) {\r\n            this.position.x += this.velocityX * deltaTime;\r\n            this.position.y += this.velocityY * deltaTime;\r\n            this.targetTime -= deltaTime;\r\n\r\n            if (this.targetTime <= 0) {\r\n                this.position.x = this.targetX;\r\n                this.position.y = this.targetY;\r\n                this.velocityX = this.finalVelocityX;\r\n                this.velocityY = this.finalVelocityY;\r\n            }\r\n\r\n            this.updateMesh();\r\n            return;\r\n        }\r\n\r\n        if (!this.keyBindings.up && !this.keyBindings.down && !this.keyBindings.left && !this.keyBindings.right) {\r\n            this.position.x += this.velocityX;\r\n            this.position.y += this.velocityY;\r\n\r\n            this.updateMesh();\r\n            return;\r\n        }\r\n\r\n        const deltaTimeModified = MODIFIER * deltaTime;\r\n\r\n        let movingX = false;\r\n        let movingY = false;\r\n\r\n        const diagonalModifier = Math.sqrt(2);\r\n\r\n        if (this.keysPressed.includes(this.keyBindings.left) || this.keysPressed.includes(this.keyBindings.right)) {\r\n            movingX = true;\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.up) || this.keysPressed.includes(this.keyBindings.down)) {\r\n            movingY = true;\r\n        }\r\n\r\n        if (this.keysPressed.includes(this.keyBindings.left)) {\r\n            // Left\r\n            this.velocityX -= (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.right)) {\r\n            // Right\r\n            this.velocityX += (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.up)) {\r\n            // Up\r\n            this.velocityY -= (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.down)) {\r\n            // Down\r\n            this.velocityY += (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\r\n        }\r\n\r\n        const ogX = this.position.x;\r\n        const ogY = this.position.y;\r\n\r\n        this.position.x += this.velocityX * deltaTimeModified;\r\n        this.position.y += this.velocityY * deltaTimeModified;\r\n\r\n        this.velocityX *= Math.pow(SLOWING, deltaTimeModified);\r\n        this.velocityY *= Math.pow(SLOWING, deltaTimeModified);\r\n\r\n        if (Math.abs(this.velocityX) < 0.001) {\r\n            this.velocityX = 0;\r\n        }\r\n        if (Math.abs(this.velocityY) < 0.001) {\r\n            this.velocityY = 0;\r\n        }\r\n\r\n        if (ogX !== this.position.x || ogY !== this.position.y) {\r\n            // Should check speed also, but f*ck it\r\n            this.dirty = true;\r\n        }\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    // ========== CONTROLS ===========\r\n\r\n    keyDown(keyCode: number) {\r\n        if (!this.keysPressed.includes(keyCode)) {\r\n            this.keysPressed.push(keyCode);\r\n        }\r\n    }\r\n\r\n    keyUp(keyCode: number) {\r\n        if (this.keysPressed.includes(keyCode)) {\r\n            this.keysPressed = this.keysPressed.filter((key) => key !== keyCode);\r\n        }\r\n    }\r\n\r\n    bindKeys(newBindings: Partial<keyBindings>) {\r\n        this.keyBindings = { ...this.keyBindings, ...newBindings };\r\n    }\r\n\r\n    static get type() {\r\n        return 'player';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return this;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'player',\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.texture = new AnimatedTexture('player', this.babylonScene, 'default');\r\n        this.mesh.material = createMaterial(this.texture.getTexture(), this.babylonScene);\r\n\r\n        // Player title\r\n        const title = MeshBuilder.CreatePlane(\r\n            'title',\r\n            { width: 200, height: 40, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        title.position = new Vector3(0, 110, -3);\r\n        const titleTexture = new DynamicTexture(\r\n            'titleTexture',\r\n            { width: 200, height: 40 },\r\n            this.babylonScene,\r\n            true,\r\n            Texture.LINEAR_LINEAR,\r\n        );\r\n        this.titleTexture = titleTexture;\r\n        const ctx = titleTexture.getContext();\r\n        ctx.fillStyle = '#343434AA';\r\n        ctx.fillRect(0, 0, titleTexture.getSize().width, titleTexture.getSize().height);\r\n        ctx.font = '32px pixel';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.fillText(this.id, titleTexture.getSize().width / 2, titleTexture.getSize().height / 2);\r\n        titleTexture.update();\r\n\r\n        title.parent = this.mesh;\r\n        title.material = createMaterial(titleTexture, this.babylonScene);\r\n\r\n        this.updateMesh();\r\n\r\n        return this;\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh) return;\r\n        super.updateMesh();\r\n\r\n        const WALKING_THRESHOLD = 0.01;\r\n        if (Math.abs(this.velocityX) > WALKING_THRESHOLD || Math.abs(this.velocityY) > WALKING_THRESHOLD) {\r\n            this.texture.queueOnce('walking');\r\n        } else {\r\n            this.texture.queueOnce('default');\r\n        }\r\n    }\r\n\r\n    detachBabylon() {\r\n        if (this.babylonScene && this.mesh) {\r\n            const child = this.mesh.getChildMeshes()[0];\r\n\r\n            if (this.titleTexture && child && child.material) {\r\n                this.babylonScene.removeTexture(this.titleTexture);\r\n                this.babylonScene.removeMaterial(child.material);\r\n            }\r\n        }\r\n\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 200);\r\n    }\r\n}\r\n","import { Vector3, Mesh, Scene, MeshBuilder, StandardMaterial, Texture, DynamicTexture, Vector2 } from 'babylonjs';\r\nimport { AbstractGameObject } from './00_AbstractGameObject';\r\nimport { GameScene } from './Scene';\r\nimport { getImage } from '../../frontend/gameMechanics/textures/textureEngine';\r\n\r\nexport type tileType = number;\r\n\r\nexport interface serializedChunk {\r\n    x: number;\r\n    y: number;\r\n    ground: tileType[][];\r\n}\r\n\r\nexport class Chunk extends AbstractGameObject {\r\n    public ground: tileType[][] = [[]];\r\n\r\n    private texture: DynamicTexture;\r\n\r\n    constructor(gameScene: GameScene, x: number, y: number) {\r\n        super(gameScene);\r\n        this.position = new Vector2(x, y);\r\n    }\r\n\r\n    get id(): string {\r\n        return Chunk.getId(this.position.x, this.position.y);\r\n    }\r\n\r\n    serialize(): serializedChunk {\r\n        return {\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n            ground: this.ground,\r\n        };\r\n    }\r\n\r\n    deserialize(serialized: serializedChunk): void {\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.ground = serialized.ground;\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    static getId(x: number, y: number): string {\r\n        return x.toString() + 'x' + y.toString();\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (this.babylonScene) {\r\n            this.mesh = MeshBuilder.CreatePlane(\r\n                'chunk',\r\n                { width: 1600, height: 1600, sideOrientation: Mesh.FRONTSIDE },\r\n                this.babylonScene,\r\n            );\r\n\r\n            const texture = new DynamicTexture(\r\n                'chunkTexture',\r\n                { width: 16 * 16, height: 16 * 16 },\r\n                this.babylonScene,\r\n                true,\r\n                Texture.NEAREST_NEAREST,\r\n            );\r\n\r\n            this.texture = texture;\r\n            const material = new StandardMaterial('mat', this.babylonScene);\r\n            material.emissiveTexture = texture;\r\n            this.mesh.material = material;\r\n\r\n            this.updateMesh();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) {\r\n            return;\r\n        }\r\n\r\n        this.mesh.position.x = this.position.x * 16 * 100;\r\n        this.mesh.position.y = -this.position.y * 16 * 100;\r\n\r\n        const ctx = this.texture.getContext();\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                if (this.ground[x] && this.ground[x][y]) {\r\n                    ctx.fillStyle = Chunk.getTerrainColor(this.ground[x][y]);\r\n\r\n                    ctx.fillRect(x * 16, y * 16, 16, 16);\r\n                    // if ((x + y) % 2 === 0) {\r\n                    //     ctx.fillStyle = '#00000005';\r\n                    //     ctx.fillRect(x * 16, y * 16, 16, 16);\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                if (this.ground[x] && this.ground[x][y]) {\r\n                    if (this.ground[x][y] === 2) {\r\n                        // Water, should have transition\r\n\r\n                        this.drawTransition(ctx, x, y, 1, 'grass_water');\r\n                    }\r\n\r\n                    /*\r\n\r\n                    if (this.ground[x][y] === 3) {\r\n                        // Tree\r\n\r\n                        if ((x + y) % 2 === 0) {\r\n                            const shift = Math.floor(Math.random() * 16) - 8;\r\n\r\n                            const img = getImage(Math.random() > 0.4 ? \"tree_big\" : \"tree_small\");\r\n                            if (img) ctx.drawImage(img, x * 16 + shift, y * 16 + shift);\r\n                        }\r\n                    }\r\n\r\n                    */\r\n                }\r\n            }\r\n        }\r\n\r\n        this.texture.update();\r\n    }\r\n\r\n    drawTransition(ctx: CanvasRenderingContext2D, x: number, y: number, tileType: number, filePrefix: string) {\r\n        const posX = this.position.x * 16 + x - 8;\r\n        const posY = this.position.y * 16 + y - 8;\r\n\r\n        let sides = '';\r\n        if (this.gameScene.getTile(posX, posY - 1) === tileType) sides += 'T';\r\n        if (this.gameScene.getTile(posX + 1, posY) === tileType) sides += 'R';\r\n        if (this.gameScene.getTile(posX, posY + 1) === tileType) sides += 'B';\r\n        if (this.gameScene.getTile(posX - 1, posY) === tileType) sides += 'L';\r\n\r\n        if (sides === 'TB') {\r\n            const top = getImage(filePrefix + '_T');\r\n            if (top) ctx.drawImage(top, x * 16, y * 16);\r\n            const bottom = getImage(filePrefix + '_B');\r\n            if (bottom) ctx.drawImage(bottom, x * 16, y * 16);\r\n        } else if (sides === 'RL') {\r\n            const right = getImage(filePrefix + '_R');\r\n            if (right) ctx.drawImage(right, x * 16, y * 16);\r\n            const left = getImage(filePrefix + '_L');\r\n            if (left) ctx.drawImage(left, x * 16, y * 16);\r\n        } else {\r\n            if (sides.length > 0) {\r\n                const img = getImage(filePrefix + '_' + sides);\r\n                if (img) ctx.drawImage(img, x * 16, y * 16);\r\n            }\r\n        }\r\n\r\n        const corner = (shiftX: number, shiftY: number, blackList: string[], suffix: string) => {\r\n            if (\r\n                this.gameScene.getTile(posX + shiftX, posY + shiftY) === tileType &&\r\n                !blackList.reduce((prev, letter) => prev || sides.includes(letter), false)\r\n            ) {\r\n                const img = getImage(filePrefix + '_corner_' + suffix);\r\n                if (img) ctx.drawImage(img, x * 16, y * 16);\r\n            }\r\n        };\r\n\r\n        corner(-1, -1, ['L', 'T'], 'BR');\r\n        corner(+1, -1, ['R', 'T'], 'BL');\r\n        corner(-1, +1, ['L', 'B'], 'TR');\r\n        corner(+1, +1, ['R', 'B'], 'TL');\r\n    }\r\n\r\n    detachBabylon() {\r\n        if (this.babylonScene && this.mesh && this.texture) {\r\n            this.babylonScene.removeTexture(this.texture);\r\n            if (this.mesh.material) {\r\n                this.babylonScene.removeMaterial(this.mesh.material);\r\n            }\r\n        }\r\n\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    static getTerrainColor(number: number, minimap?: boolean): string {\r\n        switch (number) {\r\n            case 1: // Grass\r\n                return '#67943F';\r\n            case 2: // Water\r\n                return '#2EB0E5';\r\n            case 3: // Forrest\r\n                return minimap ? '#6AA981' : '#67943F';\r\n            case 4: // Sand\r\n                return '#FDDC86';\r\n        }\r\n        return '#DDDDDD';\r\n    }\r\n}\r\n","import { AbstractGameObject } from '../../../shared/gameObjects/00_AbstractGameObject';\r\n\r\nexport class IndexedList<T extends AbstractGameObject> {\r\n    values: { [key: string]: T } = {};\r\n\r\n    addMore(values: { [key: string]: T }) {\r\n        this.values = { ...this.values, ...values };\r\n    }\r\n\r\n    add(key: string, value: T) {\r\n        this.values[key] = value;\r\n    }\r\n\r\n    remove(key: string) {\r\n        if (!this.includes(key)) return;\r\n        this.values[key].detachBabylon();\r\n        delete this.values[key];\r\n    }\r\n\r\n    update(key: string, serialized: any, dirty: boolean, smooth?: boolean) {\r\n        if (!this.includes(key)) return;\r\n        this.values[key].deserialize(serialized, dirty, smooth);\r\n    }\r\n\r\n    updateOrCreate(key: string, serialized: any, dirty: boolean, newObjectCreator: () => T, smooth?: boolean) {\r\n        if (!this.includes(key)) {\r\n            this.values[key] = newObjectCreator();\r\n        }\r\n        this.values[key].deserialize(serialized, dirty, smooth);\r\n    }\r\n\r\n    get(key: string) {\r\n        if (!this.includes(key)) return null;\r\n        return this.values[key];\r\n    }\r\n\r\n    includes(key: string) {\r\n        return Object.keys(this.values).includes(key);\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, key: string, index: number) => void) {\r\n        const keys = Object.keys(this.values);\r\n\r\n        keys.forEach((key, index) => {\r\n            callbackfn(this.values[key], key, index);\r\n        });\r\n    }\r\n\r\n    filter(callbackfn: (value: T, key: string, index: number) => boolean) {\r\n        const keys = Object.keys(this.values);\r\n\r\n        const result = new IndexedList<T>();\r\n\r\n        keys.forEach((key, index) => {\r\n            if (callbackfn(this.values[key], key, index)) {\r\n                result.add(key, this.values[key]);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    map(callbackfn: (value: T, key: string, index: number) => any) {\r\n        return Object.keys(this.values).map((key, index) => callbackfn(this.values[key], key, index));\r\n    }\r\n\r\n    getValues() {\r\n        return Object.values(this.values);\r\n    }\r\n\r\n    getKeys() {\r\n        return Object.keys(this.values);\r\n    }\r\n\r\n    length() {\r\n        return this.getKeys().length;\r\n    }\r\n}\r\n","import { Chunk } from './Chunk';\r\nimport { IndexedList } from '../../frontend/gameMechanics/utils/IndexedList';\r\nimport { AbstractGameEntity } from './01_AbstractGameEntity';\r\n\r\nexport class GameScene {\r\n    entities = new IndexedList<AbstractGameEntity>();\r\n    chunks = new IndexedList<Chunk>();\r\n\r\n    tickAll(deltaTime: number) {\r\n        this.entities.forEach((value) => value.tick(deltaTime));\r\n        this.chunks.forEach((value) => value.tick(deltaTime));\r\n    }\r\n\r\n    getTile(x: number, y: number) {\r\n        const calcX = Math.floor(x) + 8;\r\n        const calcY = Math.floor(y) + 8;\r\n\r\n        const chunkX = Math.floor(calcX / 16);\r\n        const chunkY = Math.floor(calcY / 16);\r\n        const chunk = this.chunks.get(Chunk.getId(chunkX, chunkY));\r\n\r\n        if (!chunk || !chunk.ground[calcX - chunkX * 16] || !chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16]) {\r\n            return -1;\r\n        }\r\n\r\n        return chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16];\r\n    }\r\n}\r\n","import { keyBindings } from '../shared/gameObjects/Player';\r\n\r\n// ARROWS\r\nexport const CONTROLS_ARROWS: keyBindings = {\r\n    left: 37,\r\n    right: 39,\r\n    up: 38,\r\n    down: 40,\r\n};\r\n\r\n// WASD\r\nexport const CONTROLS_WASD: keyBindings = {\r\n    left: 65,\r\n    right: 68,\r\n    up: 87,\r\n    down: 83,\r\n};\r\n","import { Vector3, Mesh, Scene, MeshBuilder, Vector2 } from 'babylonjs';\r\nimport { createMaterial, getSimpleMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { GameScene } from './Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\nimport { SimpleTexture } from '../../frontend/gameMechanics/textures/SimpleTexture';\r\n\r\nexport interface serializedTree {\r\n    size: 1 | 2;\r\n}\r\n\r\nexport class Tree extends AbstractGameEntity {\r\n    private texture: SimpleTexture;\r\n    public size: 1 | 2;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedTree> {\r\n        let sup = super.serialize() as serializedEntity<serializedTree>;\r\n        sup.type = Tree.type;\r\n        sup.data = {\r\n            size: this.size,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedTree>, dirty: boolean): void {\r\n        if (serialized.type !== Tree.type) return;\r\n\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.size = serialized.data.size;\r\n        super.deserialize(serialized, dirty);\r\n    }\r\n\r\n    tick(deltaTime: number) {}\r\n\r\n    static get type() {\r\n        return 'tree';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return this;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'tree',\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.mesh.material = getSimpleMaterial(this.size === 1 ? 'tree_small' : 'tree_big', this.babylonScene);\r\n\r\n        this.updateMesh();\r\n        return this;\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) return;\r\n        this.mesh.material = getSimpleMaterial(this.size === 1 ? 'tree_small' : 'tree_big', this.babylonScene);\r\n        super.updateMesh();\r\n    }\r\n\r\n    detachBabylon() {\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        const treeScale = 1.5;\r\n        return new Vector2(100 * treeScale, 200 * treeScale);\r\n    }\r\n}\r\n","import { Vector3, Mesh, Scene, MeshBuilder, Vector2 } from 'babylonjs';\r\nimport { createMaterial, getSimpleMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { GameScene } from './Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\nimport { SimpleTexture } from '../../frontend/gameMechanics/textures/SimpleTexture';\r\n\r\nexport interface serializedStone {\r\n    size: 1 | 2;\r\n}\r\n\r\nexport class Stone extends AbstractGameEntity {\r\n    private texture: SimpleTexture;\r\n    public size: 1 | 2;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedStone> {\r\n        let sup = super.serialize() as serializedEntity<serializedStone>;\r\n        sup.type = Stone.type;\r\n        sup.data = {\r\n            size: this.size,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedStone>, dirty: boolean): void {\r\n        if (serialized.type !== Stone.type) return;\r\n\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.size = serialized.data.size;\r\n        super.deserialize(serialized, dirty);\r\n    }\r\n\r\n    tick(deltaTime: number) {}\r\n\r\n    static get type() {\r\n        return 'stone';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return this;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'stone',\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.mesh.material = getSimpleMaterial(this.size === 1 ? 'rock_small' : 'rock_big', this.babylonScene);\r\n\r\n        this.updateMesh();\r\n        return this;\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) return;\r\n        this.mesh.material = getSimpleMaterial(this.size === 1 ? 'rock_small' : 'rock_big', this.babylonScene);\r\n        super.updateMesh();\r\n    }\r\n\r\n    detachBabylon() {\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 100);\r\n    }\r\n}\r\n","import io from 'socket.io-client';\r\nimport { Player, serializedPlayer } from '../../../shared/gameObjects/Player';\r\nimport { GameScene } from '../../../shared/gameObjects/Scene';\r\nimport babylonjs from 'babylonjs';\r\nimport { serializedChunk, Chunk } from '../../../shared/gameObjects/Chunk';\r\nimport { messageEntities } from '../../../shared/network/messageTypes';\r\nimport { AbstractGameEntity, serializedEntity } from '../../../shared/gameObjects/01_AbstractGameEntity';\r\nimport { Tree } from '../../../shared/gameObjects/Tree';\r\nimport { Stone } from '../../../shared/gameObjects/Stone';\r\n\r\ntype callback = (data: any) => void;\r\n\r\nexport class NetworkClient {\r\n    private socket: SocketIOClient.Socket;\r\n    private userId: string;\r\n    private opened: boolean;\r\n    private callbacks: { [key: string]: callback } = {\r\n        authenticated: () => {},\r\n        updated: () => {},\r\n    };\r\n\r\n    constructor(private apiUrl: string, private scene: GameScene, private getBabylonScene: () => babylonjs.Scene) {}\r\n\r\n    public on(event: 'authenticated' | 'updated', callback: callback) {\r\n        this.callbacks[event] = callback;\r\n    }\r\n\r\n    public close() {\r\n        this.socket.disconnect();\r\n    }\r\n\r\n    public open() {\r\n        this.opened = true;\r\n        this.socket = io(this.apiUrl);\r\n        this.setListeners();\r\n\r\n        this.socket.on('auth', (data: string) => {\r\n            this.userId = data;\r\n            this.callbacks['authenticated']({ id: data });\r\n            console.log('Joined game with player ID:', data);\r\n        });\r\n    }\r\n\r\n    public sendPlayerUpdate(player: Player) {\r\n        const payload: serializedEntity<serializedPlayer> = player.serialize();\r\n        this.socket.emit('update', payload);\r\n    }\r\n\r\n    public requestChunk(x: number, y: number) {\r\n        this.socket.emit('mapRequest', { x, y });\r\n    }\r\n\r\n    private setListeners() {\r\n        this.socket.on('entities', (data: messageEntities) => {\r\n            data.removed.forEach((entity) => entity.id !== this.userId && this.scene.entities.remove(entity.id));\r\n            data.updated.forEach(\r\n                (entity) =>\r\n                    entity.id !== this.userId &&\r\n                    this.scene.entities.updateOrCreate(entity.id, entity, false, () => this.createEntity(entity)!),\r\n            );\r\n        });\r\n\r\n        this.socket.on('mapChunk', (data: serializedChunk) => {\r\n            const id = Chunk.getId(data.x, data.y);\r\n\r\n            this.scene.chunks.updateOrCreate(id, data, false, () =>\r\n                new Chunk(this.scene, data.x, data.y).attachBabylon(this.getBabylonScene()),\r\n            );\r\n\r\n            this.scene.chunks\r\n                .filter((value) => Math.abs(value.position.x - data.x) <= 1 && Math.abs(value.position.y - data.y) <= 1)\r\n                .forEach((value) => value.updateMesh());\r\n        });\r\n    }\r\n\r\n    private createEntity(entity: serializedEntity<any>): AbstractGameEntity | undefined {\r\n        switch (entity.type) {\r\n            case 'player': {\r\n                const e = new Player(this.scene, entity.id);\r\n                e.attachBabylon(this.getBabylonScene());\r\n                e.deserialize(entity, false, true);\r\n                return e;\r\n            }\r\n            case 'tree': {\r\n                const e = new Tree(this.scene, entity.id);\r\n                e.attachBabylon(this.getBabylonScene());\r\n                e.deserialize(entity, false);\r\n                return e;\r\n            }\r\n            case 'stone': {\r\n                const e = new Stone(this.scene, entity.id);\r\n                e.attachBabylon(this.getBabylonScene());\r\n                e.deserialize(entity, false);\r\n                return e;\r\n            }\r\n        }\r\n        console.error('Entity \"' + entity.type + ' does not exist!');\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport babylonjs, { Vector3, UniversalCamera, SpotLight } from 'babylonjs';\r\nimport { Scene, Engine, SceneEventArgs } from 'react-babylonjs';\r\n\r\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { Player } from '../../shared/gameObjects/Player';\r\nimport { Chunk } from '../../shared/gameObjects/Chunk';\r\nimport { GameScene } from '../../shared/gameObjects/Scene';\r\nimport { CONTROLS_WASD } from '../keyBindings';\r\nimport { NetworkClient } from './network/Client';\r\nimport { minimap } from './gui/minimap';\r\nimport { debugInfo } from './gui/debugInfo';\r\nimport { CAMERA_ANGLE, CAMERA_DISTANCE } from '../../shared/constants';\r\n\r\nconst RENDER_DISTANCE = 3;\r\nconst REQUEST_DISTANCE = 3;\r\nconst DELETE_DISTANCE = 5;\r\n\r\ninterface IGameCoreProps {\r\n    apiUrl: string;\r\n}\r\n\r\ninterface IGameCoreState {}\r\n\r\nexport class GameCore extends React.Component<IGameCoreProps, IGameCoreState> {\r\n    gameScene: GameScene;\r\n    me: Player | null = null;\r\n\r\n    babylonScene: babylonjs.Scene | null;\r\n    guiTexture: AdvancedDynamicTexture | null;\r\n    networkClient: NetworkClient;\r\n    state: IGameCoreState = {};\r\n\r\n    timer: NodeJS.Timeout;\r\n\r\n    zoom: number = 1;\r\n\r\n    constructor(props: IGameCoreProps) {\r\n        super(props);\r\n\r\n        this.gameScene = new GameScene();\r\n        this.networkClient = new NetworkClient(this.props.apiUrl, this.gameScene, () => this.babylonScene!);\r\n        this.networkClient.on('authenticated', (data: { id: string }) => this.initGame(data.id));\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            if (this.me) {\r\n                this.me.keyDown(event.keyCode);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            if (this.me) {\r\n                this.me.keyUp(event.keyCode);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('wheel', (event) => {\r\n            event.preventDefault();\r\n\r\n            this.zoom += event.deltaY * 0.03;\r\n            if (this.zoom < 0.5) this.zoom = 0.5;\r\n            if (this.zoom > 3) this.zoom = 3;\r\n        });\r\n\r\n        window.addEventListener('resize', (event) => {\r\n            this.resize();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resize();\r\n        this.networkClient.open();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        this.networkClient.close();\r\n    }\r\n\r\n    initGame(id: string) {\r\n        this.me = new Player(this.gameScene, id);\r\n        this.me.attachBabylon(this.babylonScene!);\r\n        this.me.bindKeys(CONTROLS_WASD);\r\n        this.gameScene.entities.add(id, this.me);\r\n\r\n        (window as any).player = this.me;\r\n        (window as any).scene = this.gameScene;\r\n\r\n        this.timer = setInterval(() => {\r\n            if (this.me) this.networkClient.sendPlayerUpdate(this.me);\r\n        }, 100);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        this.gameScene.entities.forEach((entity) => entity.tick(deltaTime));\r\n\r\n        this.unloadUnusedComponents();\r\n        this.requestChunks();\r\n\r\n        if (this.guiTexture) {\r\n            if (this.me) {\r\n                const gui = this.guiTexture.getContext();\r\n                const width = this.guiTexture.getSize().width;\r\n                const height = this.guiTexture.getSize().height;\r\n                gui.clearRect(0, 0, width, height);\r\n\r\n                minimap(this.guiTexture, this.gameScene, this.me);\r\n                debugInfo(this.guiTexture, this.gameScene, deltaTime);\r\n\r\n                this.guiTexture.update();\r\n            } else {\r\n                const gui = this.guiTexture.getContext();\r\n                const width = this.guiTexture.getSize().width;\r\n                const height = this.guiTexture.getSize().height;\r\n                gui.clearRect(0, 0, width, height);\r\n\r\n                gui.fillStyle = '#FFFFFF';\r\n                gui.font = '20px pixel';\r\n                gui.textBaseline = 'middle';\r\n                gui.textAlign = 'center';\r\n\r\n                gui.fillText('Connecting to server...', width / 2, height / 2);\r\n\r\n                this.guiTexture.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        const canvas = document.getElementById('game') as HTMLCanvasElement;\r\n        if (canvas) {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        }\r\n    }\r\n\r\n    onSceneMount(event: SceneEventArgs) {\r\n        const { scene } = event;\r\n\r\n        this.babylonScene = (scene as any) as babylonjs.Scene;\r\n\r\n        const camera = new UniversalCamera('Camera', new Vector3(0, 0, CAMERA_DISTANCE), this.babylonScene);\r\n        camera.rotation = new Vector3(-CAMERA_ANGLE, 0, 0);\r\n        //camera.attachControl(event.canvas, true);\r\n\r\n        this.guiTexture = AdvancedDynamicTexture.CreateFullscreenUI('GUI', true, scene);\r\n\r\n        scene.getEngine().runRenderLoop(() => {\r\n            this.tick(scene.getEngine().getDeltaTime());\r\n\r\n            if (this.me) {\r\n                camera.position = new Vector3(\r\n                    this.me.position.x * 100,\r\n                    -this.me.position.y * 100 - CAMERA_DISTANCE * this.zoom * Math.tan(CAMERA_ANGLE),\r\n                    -CAMERA_DISTANCE * this.zoom,\r\n                );\r\n            }\r\n\r\n            if (scene) {\r\n                scene.render();\r\n            }\r\n        });\r\n    }\r\n\r\n    unloadUnusedComponents() {\r\n        if (this.me) {\r\n            this.gameScene.chunks.forEach((chunk) => {\r\n                const distX = Math.abs(Math.round(this.me!.position.x / 16) - chunk.position.x);\r\n                const distY = Math.abs(Math.round(this.me!.position.y / 16) - chunk.position.y);\r\n                if (distX > RENDER_DISTANCE || distY > RENDER_DISTANCE) {\r\n                    chunk.setVisibility(false);\r\n                    if (distX > DELETE_DISTANCE || distY > DELETE_DISTANCE) {\r\n                        this.gameScene.chunks.remove(chunk.id);\r\n                    }\r\n                } else {\r\n                    chunk.setVisibility(true);\r\n                }\r\n            });\r\n\r\n            this.gameScene.entities.forEach((entity) => {\r\n                const distX = Math.abs(Math.round(this.me!.position.x) - entity.position.x) / 16;\r\n                const distY = Math.abs(Math.round(this.me!.position.y) - entity.position.y) / 16;\r\n\r\n                if (distX > RENDER_DISTANCE || distY > RENDER_DISTANCE) {\r\n                    entity.setVisibility(false);\r\n                    if (distX > DELETE_DISTANCE || distY > DELETE_DISTANCE) {\r\n                        this.gameScene.entities.remove(entity.id);\r\n                    }\r\n                } else {\r\n                    entity.setVisibility(true);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    requestChunks() {\r\n        if (this.me) {\r\n            for (let x = -REQUEST_DISTANCE; x <= REQUEST_DISTANCE; x++) {\r\n                for (let y = -REQUEST_DISTANCE; y <= REQUEST_DISTANCE; y++) {\r\n                    const chunkX = Math.round(this.me.position.x / 16) + x;\r\n                    const chunkY = Math.round(this.me.position.y / 16) + y;\r\n                    const chunkId = Chunk.getId(chunkX, chunkY);\r\n\r\n                    if (!this.gameScene.chunks.includes(chunkId)) {\r\n                        this.networkClient.requestChunk(chunkX, chunkY);\r\n                        this.gameScene.chunks.add(\r\n                            chunkId,\r\n                            new Chunk(this.gameScene, chunkX, chunkY).attachBabylon(this.babylonScene!),\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Engine antialias={true} canvasId=\"game\">\r\n                    <Scene onSceneMount={(event: SceneEventArgs) => this.onSceneMount(event)}>\r\n                        <></>\r\n                    </Scene>\r\n                </Engine>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { Chunk } from '../../../shared/gameObjects/Chunk';\r\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { GameScene } from '../../../shared/gameObjects/Scene';\r\nimport { Player } from '../../../shared/gameObjects/Player';\r\n\r\nconst MINIMAP_DISTANCE = 32;\r\nconst MINIMAP_SCALE = 2;\r\nconst BORDER_WIDTH = 3;\r\n\r\nexport function minimap(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, me: Player) {\r\n    const gui = guiTexture.getContext();\r\n    const width = guiTexture.getSize().width;\r\n    //const height = guiTexture.getSize().height;\r\n\r\n    const x0 = width - 30 - MINIMAP_SCALE * MINIMAP_DISTANCE;\r\n    const y0 = 20 + MINIMAP_SCALE * MINIMAP_DISTANCE;\r\n\r\n    gui.fillStyle = '#000000';\r\n    gui.fillRect(\r\n        x0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\r\n        y0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\r\n    );\r\n\r\n    for (let x = -MINIMAP_DISTANCE; x <= MINIMAP_DISTANCE; x++) {\r\n        for (let y = -MINIMAP_DISTANCE; y <= MINIMAP_DISTANCE; y++) {\r\n            gui.fillStyle = Chunk.getTerrainColor(gameScene.getTile(me.position.x + x, me.position.y + y), true);\r\n            gui.fillRect(x0 + x * MINIMAP_SCALE, y0 + y * MINIMAP_SCALE, MINIMAP_SCALE, MINIMAP_SCALE);\r\n        }\r\n    }\r\n\r\n    gui.fillStyle = '#000000';\r\n    gui.font = '15px pixel';\r\n    gui.textBaseline = 'top';\r\n    gui.textAlign = 'center';\r\n    gui.fillText('x', x0, y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10);\r\n    gui.textAlign = 'right';\r\n    gui.fillText(\r\n        Math.round(me.position.x).toString(),\r\n        x0 - 10,\r\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\r\n    );\r\n    gui.textAlign = 'left';\r\n    gui.fillText(\r\n        Math.round(me.position.y).toString(),\r\n        x0 + 10,\r\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\r\n    );\r\n\r\n    gui.fillStyle = '#00000020';\r\n    gui.fillRect(x0 - MINIMAP_SCALE * 3, y0, MINIMAP_SCALE * 7, MINIMAP_SCALE);\r\n    gui.fillRect(x0, y0 - MINIMAP_SCALE * 3, MINIMAP_SCALE, MINIMAP_SCALE * 7);\r\n\r\n    guiTexture.update();\r\n}\r\n","import { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { GameScene } from '../../../shared/gameObjects/Scene';\r\n\r\nexport function debugInfo(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, deltaTime: number) {\r\n    const gui = guiTexture.getContext();\r\n\r\n    let x = 30;\r\n    let y = 20;\r\n\r\n    const values: { [key: string]: string } = {\r\n        FPS: (1000 / deltaTime).toFixed(2),\r\n        'Enabled entities':\r\n            gameScene.entities.filter((value) => value.getVisibility()).length() +\r\n            ' (of ' +\r\n            gameScene.entities.length() +\r\n            ' loaded)',\r\n        'Enabled chunks':\r\n            gameScene.chunks.filter((value) => value.getVisibility()).length() +\r\n            ' (of ' +\r\n            gameScene.chunks.length() +\r\n            ' loaded)',\r\n    };\r\n\r\n    gui.fillStyle = '#000000';\r\n    gui.font = '15px pixel';\r\n    gui.textBaseline = 'top';\r\n    gui.textAlign = 'left';\r\n\r\n    Object.keys(values).forEach((key) => {\r\n        gui.fillText(key + ': ' + values[key], x, y);\r\n        y += 20;\r\n    });\r\n\r\n    guiTexture.update();\r\n}\r\n","import React from 'react';\r\nimport { GameCore } from './gameMechanics/GameCore';\r\nimport { loadTextures } from './gameMechanics/textures/textureEngine';\r\n\r\ninterface IAppProps {}\r\n\r\ninterface IAppState {\r\n    status: 'loading' | 'menu' | 'paused' | 'ingame';\r\n    textures: {\r\n        loaded: number;\r\n        of: number;\r\n    };\r\n}\r\n\r\nclass App extends React.Component<IAppProps, IAppState> {\r\n    //apiUrl = 'http://localhost:80/';\r\n    apiUrl = 'https://randombot-server.herokuapp.com/';\r\n\r\n    state: IAppState = {\r\n        status: 'loading',\r\n        textures: {\r\n            loaded: 0,\r\n            of: 0,\r\n        },\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            textures: {\r\n                loaded: 0,\r\n                of: loadTextures(\r\n                    () => {\r\n                        this.setState({ status: 'ingame' });\r\n                    },\r\n                    (loaded, of) => {\r\n                        this.setState({\r\n                            textures: {\r\n                                loaded,\r\n                                of,\r\n                            },\r\n                        });\r\n                    },\r\n                ),\r\n            },\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.status === 'loading' && (\r\n                    <div\r\n                        style={{\r\n                            textAlign: 'center',\r\n                            position: 'absolute',\r\n                            top: '50%',\r\n                            transform: 'translate(0, -50%)',\r\n                            width: '100%',\r\n                            color: 'white',\r\n                        }}\r\n                    >\r\n                        Textures are loading ({this.state.textures.loaded}/{this.state.textures.of})\r\n                    </div>\r\n                )}\r\n                {this.state.status === 'ingame' && <GameCore apiUrl={this.apiUrl} />}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './frontend/index.css';\r\nimport App from './frontend/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}