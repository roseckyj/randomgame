{"version":3,"sources":["frontend/gameMechanics/textures/texturePack.ts","frontend/gameMechanics/textures/SimpleTexture.ts","frontend/gameMechanics/textures/textureEngine.ts","frontend/gameMechanics/textures/AnimatedTexture.ts","shared/constants.ts","shared/gameObjects/00_AbstractGameObject.ts","shared/gameObjects/01_AbstractGameEntity.ts","shared/gameObjects/Player.tsx","shared/gameObjects/Chunk.tsx","frontend/gameMechanics/utils/IndexedList.ts","shared/gameObjects/Scene.ts","frontend/keyBindings.ts","shared/gameObjects/Tree.tsx","shared/gameObjects/Stone.tsx","frontend/gameMechanics/network/Client.ts","frontend/gameMechanics/utils/shadeText.ts","frontend/gameMechanics/gui/minimap.ts","frontend/gameMechanics/GameCore.tsx","frontend/gameMechanics/gui/debugInfo.ts","frontend/App.tsx","serviceWorker.js","index.tsx"],"names":["textures","player","filename","width","animations","default","start","end","type","walking","inventory_opening","inventory_open","inventory_closing","equip","unequip","mine","eat","interact","rock_big","rock_small","bush","tree_small","tree_big","tree_short","tree_tall","grass_water_L","grass_water_R","grass_water_T","grass_water_B","grass_water_TL","grass_water_RB","grass_water_TR","grass_water_BL","grass_water_TBL","grass_water_TRL","grass_water_RBL","grass_water_TRB","grass_water_TRBL","grass_water_corner_BL","grass_water_corner_BR","grass_water_corner_TL","grass_water_corner_TR","SimpleTexture","textureAtlas","scene","texture","this","t","Texture","RESOURCES_LOCATION","NEAREST_NEAREST","hasAlpha","removeTexture","resourceFiles","Object","values","map","filter","v","i","indexOf","atlases","materials","loaded","getSimpleMaterial","material","createMaterial","getTexture","StandardMaterial","emissiveTexture","opacityTexture","getImage","console","warn","AnimatedTexture","animation","animationQueue","frame","direction","interval","textureScale","uOffset","vOffset","uScale","vScale","queue","setInterval","tick","length","unskipable","isLast","keys","includes","push","skippable","framesCount","Math","abs","haveNextAnimation","shift","newAnimation","animationDir","error","CAMERA_ANGLE","PI","AbstractGameObject","gameScene","babylonScene","mesh","position","Vector2","Zero","removeMesh","deltaTime","visible","setEnabled","isEnabled","AbstractGameEntity","dirty","server_dead","id","x","y","data","serialized","smooth","updateMesh","z","getSize","cos","rotation","sin","Player","velocityX","velocityY","name","targetX","targetY","finalVelocityX","finalVelocityY","targetTime","keyBindings","up","down","left","right","keysPressed","titleTexture","sup","deltaTimeModified","movingX","movingY","diagonalModifier","sqrt","ogX","ogY","pow","keyCode","key","newBindings","size","MeshBuilder","CreatePlane","height","sideOrientation","Mesh","FRONTSIDE","title","Vector3","DynamicTexture","LINEAR_LINEAR","parent","ctx","getContext","clearRect","fillStyle","fillRect","font","textBaseline","textAlign","fillText","update","queueOnce","child","getChildMeshes","removeMaterial","Chunk","ground","getTerrainColor","drawTransition","tileType","filePrefix","posX","posY","sides","getTile","top","drawImage","bottom","img","corner","shiftX","shiftY","blackList","suffix","reduce","prev","letter","getId","toString","number","IndexedList","value","detachBabylon","deserialize","newObjectCreator","callbackfn","forEach","index","result","add","getKeys","GameScene","entities","chunks","calcX","floor","calcY","chunkX","chunkY","chunk","get","CONTROLS_WASD","Tree","setMaterial","Stone","NetworkClient","apiUrl","getBabylonScene","socket","userId","opened","callbacks","authenticated","updated","invalidPassword","disconnect","event","callback","io","setListeners","on","log","payload","serialize","emit","password","passwordHash","md5","a","removed","entity","remove","updateOrCreate","createEntity","attachBabylon","e","shadeText","text","strokeStyle","lineWidth","strokeText","GameCore","props","me","guiTexture","networkClient","state","loggedIn","timer","zoom","renderDistance","debug","loginRef","createRef","passwordRef","initGame","current","classList","setTimeout","document","addEventListener","keyDown","keyUp","preventDefault","deltaY","window","resize","open","clearInterval","close","setState","bindKeys","enableDebug","sendPlayerUpdate","unloadUnusedComponents","requestChunks","gui","x0","MINIMAP_SCALE","y0","MINIMAP_DISTANCE","getEntityColor","strokeRect","round","minimap","FPS","toFixed","getVisibility","debugInfo","canvas","getElementById","innerWidth","innerHeight","camera","UniversalCamera","skybox","CreateCylinder","CAMERA_DISTANCE","diameterTop","MAX_RENDER_DISTANCE","diameterBottom","tessellation","skyboxMaterial","backFaceCulling","diffuseColor","BABYLON","Color3","specularColor","disableLighting","AdvancedDynamicTexture","CreateFullscreenUI","getEngine","runRenderLoop","getDeltaTime","tan","min","ceil","render","distX","distY","setVisibility","chunkId","requestChunk","className","placeholder","ref","onClick","auth","antialias","canvasId","onSceneMount","React","Component","App","status","of","onLoad","onStateChange","Image","onload","onerror","src","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1427b5b7.chunk.js","sourcesContent":["import { texturePack } from './textureEngine';\r\n\r\nexport const textures: texturePack = {\r\n    player: {\r\n        filename: 'Character.png',\r\n        width: 57,\r\n        animations: {\r\n            default: {\r\n                start: 0,\r\n                end: 0,\r\n                type: 'frame',\r\n            },\r\n            walking: {\r\n                start: 0,\r\n                end: 7,\r\n                type: 'loop',\r\n            },\r\n            inventory_opening: {\r\n                start: 8,\r\n                end: 11,\r\n                type: 'once',\r\n            },\r\n            inventory_open: {\r\n                start: 11,\r\n                end: 11,\r\n                type: 'frame',\r\n            },\r\n            inventory_closing: {\r\n                start: 11,\r\n                end: 8,\r\n                type: 'once',\r\n            },\r\n            equip: {\r\n                start: 12,\r\n                end: 19,\r\n                type: 'once',\r\n            },\r\n            unequip: {\r\n                start: 19,\r\n                end: 12,\r\n                type: 'once',\r\n            },\r\n            mine: {\r\n                start: 20,\r\n                end: 22,\r\n                type: 'boomerang',\r\n            },\r\n            eat: {\r\n                start: 23,\r\n                end: 51,\r\n                type: 'once',\r\n            },\r\n            interact: {\r\n                start: 52,\r\n                end: 56,\r\n                type: 'once',\r\n            },\r\n        },\r\n    },\r\n    rock_big: {\r\n        filename: 'rock_big.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    rock_small: {\r\n        filename: 'rock_small.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    bush: {\r\n        filename: 'bush.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_small: {\r\n        filename: 'tree_small.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_big: {\r\n        filename: 'tree_big.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_short: {\r\n        filename: 'tree_short.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    tree_tall: {\r\n        filename: 'tree_tall.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_L: {\r\n        filename: 'grass_water_L.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_R: {\r\n        filename: 'grass_water_R.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_T: {\r\n        filename: 'grass_water_T.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_B: {\r\n        filename: 'grass_water_B.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TL: {\r\n        filename: 'grass_water_TL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_RB: {\r\n        filename: 'grass_water_RB.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TR: {\r\n        filename: 'grass_water_TR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_BL: {\r\n        filename: 'grass_water_BL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TBL: {\r\n        filename: 'grass_water_TBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRL: {\r\n        filename: 'grass_water_TRL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_RBL: {\r\n        filename: 'grass_water_RBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRB: {\r\n        filename: 'grass_water_TRB.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_TRBL: {\r\n        filename: 'grass_water_TRBL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_BL: {\r\n        filename: 'grass_water_corner_BL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_BR: {\r\n        filename: 'grass_water_corner_BR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_TL: {\r\n        filename: 'grass_water_corner_TL.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n    grass_water_corner_TR: {\r\n        filename: 'grass_water_corner_TR.png',\r\n        width: 1,\r\n        animations: {},\r\n    },\r\n};\r\n","import { Texture, Scene } from 'babylonjs';\r\nimport { textures } from './texturePack';\r\nimport { RESOURCES_LOCATION } from './textureEngine';\r\n\r\nexport class SimpleTexture {\r\n    private textureAtlas: string;\r\n    private texture: Texture;\r\n    constructor(textureAtlas: string, private scene: Scene) {\r\n        this.textureAtlas = textureAtlas;\r\n        const t = new Texture(\r\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\r\n            scene,\r\n            false,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n        t.hasAlpha = true;\r\n        this.texture = t;\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texture;\r\n    }\r\n\r\n    detach() {\r\n        this.scene.removeTexture(this.texture);\r\n    }\r\n}\r\n","import { Texture, Scene, StandardMaterial, Material } from 'babylonjs';\r\nimport { SimpleTexture } from './SimpleTexture';\r\nimport { textures } from './texturePack';\r\n\r\nexport interface texturePack {\r\n    [name: string]: {\r\n        filename: string;\r\n        width: number;\r\n        animations: { [name: string]: { start: number; end: number; type: 'loop' | 'once' | 'boomerang' | 'frame' } };\r\n    };\r\n}\r\n\r\nlet resourceFiles = Object.values(textures).map((texture) => texture.filename);\r\nresourceFiles = resourceFiles.filter((v, i) => resourceFiles.indexOf(v) === i);\r\n\r\nlet atlases: { [key: string]: HTMLImageElement } = {};\r\nlet materials: { [key: string]: Material } = {};\r\n\r\nlet loaded = 0;\r\n\r\nexport const RESOURCES_LOCATION = '/randomgame/resources/textures/';\r\n\r\nexport function loadTextures(onLoad: () => void, onStateChange?: (loaded: number, of: number) => void) {\r\n    if (resourceFiles.length === 0) {\r\n        onStateChange && onStateChange(0, resourceFiles.length);\r\n        onLoad();\r\n    }\r\n\r\n    resourceFiles.forEach((filename) => {\r\n        atlases[filename] = new Image();\r\n        atlases[filename].onload = () => {\r\n            loaded++;\r\n            onStateChange && onStateChange(loaded, resourceFiles.length);\r\n\r\n            if (loaded === resourceFiles.length) {\r\n                onLoad();\r\n            }\r\n        };\r\n        atlases[filename].onerror = () => {\r\n            console.error('Error loading resource file: ', filename);\r\n        };\r\n        atlases[filename].src = RESOURCES_LOCATION + filename;\r\n    });\r\n\r\n    return resourceFiles.length;\r\n}\r\n\r\nexport function createTexture(texture: string, scene: Scene) {\r\n    const t = new Texture(\r\n        RESOURCES_LOCATION + textures[texture].filename,\r\n        scene,\r\n        false,\r\n        true,\r\n        Texture.NEAREST_SAMPLINGMODE,\r\n    );\r\n    t.uOffset = 0;\r\n    t.vOffset = 0;\r\n    t.uScale = 1 / textures[texture].width;\r\n    t.vScale = 1;\r\n    t.hasAlpha = true;\r\n    return t;\r\n}\r\n\r\nexport function getSimpleMaterial(textureAtlas: string, scene: Scene) {\r\n    if (materials[textureAtlas]) {\r\n        return materials[textureAtlas];\r\n    }\r\n\r\n    const texture = new SimpleTexture(textureAtlas, scene);\r\n    const material = createMaterial(texture.getTexture(), scene);\r\n    materials[textureAtlas] = material;\r\n\r\n    return material;\r\n}\r\n\r\nexport function createMaterial(texture: Texture, scene: Scene) {\r\n    const material = new StandardMaterial('mat', scene);\r\n    material.emissiveTexture = texture;\r\n    material.opacityTexture = texture;\r\n\r\n    return material;\r\n}\r\n\r\nexport function getImage(texture: string): HTMLImageElement | null {\r\n    if (!textures[texture]) {\r\n        console.warn('Image ' + texture + ' not found!');\r\n        return null;\r\n    }\r\n    return atlases[textures[texture].filename];\r\n}\r\n","import { Texture, Scene } from 'babylonjs';\r\nimport { textures } from './texturePack';\r\nimport { RESOURCES_LOCATION } from './textureEngine';\r\n\r\nconst TIME_PER_FRAME = 80;\r\n\r\nexport class AnimatedTexture {\r\n    private textureAtlas: string;\r\n    private texture: Texture;\r\n    private animationQueue: { texture: string; skippable: boolean }[] = [];\r\n    private frame: number = 0;\r\n    private direction: number = 1;\r\n    private interval: NodeJS.Timeout;\r\n\r\n    private textureScale = 1;\r\n\r\n    constructor(textureAtlas: string, private scene: Scene, animation: string = 'default') {\r\n        this.textureAtlas = textureAtlas;\r\n        this.textureScale = 1 / textures[textureAtlas].width;\r\n\r\n        const t = new Texture(\r\n            RESOURCES_LOCATION + textures[textureAtlas].filename,\r\n            scene,\r\n            false,\r\n            true,\r\n            Texture.NEAREST_NEAREST,\r\n        );\r\n        t.uOffset = this.textureScale * textures[textureAtlas].animations[animation].start;\r\n        t.vOffset = 0;\r\n        t.uScale = this.textureScale;\r\n        t.vScale = 1;\r\n        t.hasAlpha = true;\r\n\r\n        this.texture = t;\r\n\r\n        this.queue(animation);\r\n        this.interval = setInterval(() => this.tick(), TIME_PER_FRAME);\r\n    }\r\n\r\n    getTexture() {\r\n        return this.texture;\r\n    }\r\n\r\n    isLast(animation: string) {\r\n        return this.animationQueue[this.animationQueue.length - 1].texture === animation;\r\n    }\r\n\r\n    queueOnce(animation: string, unskipable?: boolean) {\r\n        if (!this.isLast(animation)) {\r\n            this.queue(animation, unskipable);\r\n        }\r\n    }\r\n\r\n    queue(animation: string, unskipable?: boolean) {\r\n        if (!Object.keys(textures[this.textureAtlas].animations).includes(animation)) {\r\n            console.warn('Animation does not exist');\r\n            this.animationQueue.push({ texture: 'default', skippable: true });\r\n            return;\r\n        }\r\n\r\n        if (this.animationQueue.length > 1 && this.animationQueue[this.animationQueue.length - 1].skippable) {\r\n            this.animationQueue[this.animationQueue.length - 1] = { texture: animation, skippable: !unskipable };\r\n        } else {\r\n            this.animationQueue.push({ texture: animation, skippable: !unskipable });\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        if (!this.texture) {\r\n            console.error('Texture is null');\r\n            return;\r\n        }\r\n\r\n        this.frame += this.direction;\r\n\r\n        const animation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\r\n        const framesCount = Math.abs(animation.start - animation.end);\r\n\r\n        const haveNextAnimation = this.animationQueue.length > 1;\r\n\r\n        if (this.frame > framesCount) {\r\n            // At the right end\r\n\r\n            switch (animation.type) {\r\n                case 'loop':\r\n                    this.direction = 1;\r\n                    this.frame = 0;\r\n                    if (haveNextAnimation) {\r\n                        this.animationQueue.shift();\r\n                    }\r\n                    break;\r\n                case 'once':\r\n                    this.direction = 1;\r\n                    if (haveNextAnimation) {\r\n                        this.frame = 0;\r\n                        this.animationQueue.shift();\r\n                    } else {\r\n                        this.frame = framesCount;\r\n                    }\r\n                    break;\r\n                case 'boomerang':\r\n                    this.direction = -1;\r\n                    this.frame -= 2;\r\n                    break;\r\n                case 'frame':\r\n                    this.direction = 1;\r\n                    this.frame = 0;\r\n                    if (haveNextAnimation) {\r\n                        this.animationQueue.shift();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (this.frame < 0) {\r\n            // At the left end - Can happen just with boomerang\r\n            this.direction = 1;\r\n            if (haveNextAnimation) {\r\n                this.frame = 0;\r\n                this.animationQueue.shift();\r\n            } else {\r\n                this.frame = 0;\r\n            }\r\n        }\r\n\r\n        const newAnimation = textures[this.textureAtlas].animations[this.animationQueue[0].texture];\r\n        const animationDir = newAnimation.start > newAnimation.end ? -1 : 1;\r\n        this.texture.uOffset = (this.frame * animationDir + newAnimation.start) * this.textureScale;\r\n    }\r\n\r\n    detach() {\r\n        this.scene.removeTexture(this.texture);\r\n    }\r\n}\r\n","export const CAMERA_DISTANCE = 1500;\r\nexport const CAMERA_ANGLE = Math.PI / 4;\r\n","import { Mesh, Vector2, Scene } from 'babylonjs';\r\nimport { GameScene } from './Scene';\r\n\r\nexport abstract class AbstractGameObject {\r\n    protected babylonScene: Scene | null = null;\r\n    protected mesh: Mesh | null = null;\r\n    public position: Vector2 = Vector2.Zero();\r\n\r\n    constructor(protected gameScene: GameScene) {}\r\n\r\n    attachBabylon(babylonScene: Scene): AbstractGameObject {\r\n        this.babylonScene = babylonScene;\r\n\r\n        return this;\r\n    }\r\n\r\n    detachBabylon(): AbstractGameObject {\r\n        if (this.babylonScene && this.mesh) {\r\n            this.babylonScene.removeMesh(this.mesh, true);\r\n            this.babylonScene = null;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    abstract serialize(): any;\r\n\r\n    abstract deserialize(serialized: any, dirty: boolean, smooth?: boolean): void;\r\n\r\n    tick(deltaTime: number): void {}\r\n\r\n    abstract async updateMesh(): Promise<void>;\r\n\r\n    setVisibility(visible: boolean) {\r\n        if (this.mesh) this.mesh.setEnabled(visible);\r\n    }\r\n\r\n    getVisibility() {\r\n        return !!this.mesh && this.mesh.isEnabled();\r\n    }\r\n\r\n    abstract get id(): string;\r\n}\r\n","import { Vector2 } from 'babylonjs';\r\nimport { CAMERA_ANGLE } from '../constants';\r\nimport { AbstractGameObject } from './00_AbstractGameObject';\r\n\r\nexport interface serializedEntity<T> {\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    type: string;\r\n    data: T;\r\n}\r\n\r\nexport abstract class AbstractGameEntity extends AbstractGameObject {\r\n    // Should be used for all entities, buildings, trees, etc.\r\n\r\n    public dirty: boolean = true;\r\n    public server_dead: boolean = false;\r\n\r\n    serialize(): serializedEntity<{}> {\r\n        return {\r\n            id: this.id,\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n            type: AbstractGameEntity.type,\r\n            data: {},\r\n        };\r\n    }\r\n\r\n    deserialize(serialized: any, dirty: boolean, smooth?: boolean): void {\r\n        this.updateMesh();\r\n        if (dirty) this.dirty = true;\r\n    }\r\n\r\n    public clean() {\r\n        this.dirty = false;\r\n    }\r\n\r\n    public server_kill() {\r\n        this.dirty = true;\r\n        this.server_dead = true;\r\n    }\r\n\r\n    public async updateMesh(): Promise<void> {\r\n        if (this.mesh) {\r\n            this.mesh.position.z = -(this.getSize().y * Math.cos(CAMERA_ANGLE)) / 2;\r\n            this.mesh.rotation.x = -CAMERA_ANGLE;\r\n\r\n            this.mesh.position.x = this.position.x * 100;\r\n            this.mesh.position.y = -this.position.y * 100 + (this.getSize().y * Math.sin(CAMERA_ANGLE)) / 2;\r\n        }\r\n    }\r\n\r\n    abstract getSize(): Vector2;\r\n\r\n    static get type(): string {\r\n        return 'unknown';\r\n    }\r\n}\r\n","import { Vector3, Mesh, Scene, MeshBuilder, DynamicTexture, Texture, Vector2 } from 'babylonjs';\r\nimport { createMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { AnimatedTexture } from '../../frontend/gameMechanics/textures/AnimatedTexture';\r\nimport { GameScene } from './Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\n\r\nexport interface serializedPlayer {\r\n    velocityX: number;\r\n    velocityY: number;\r\n    name: string;\r\n}\r\n\r\nexport interface keyBindings {\r\n    up: number;\r\n    down: number;\r\n    left: number;\r\n    right: number;\r\n}\r\n\r\nconst SPEED_CHANGE = 0.002;\r\nconst SLOWING = 0.95;\r\nconst MODIFIER = 0.1;\r\nconst SMOOTH_TIME = 50;\r\n\r\nexport class Player extends AbstractGameEntity {\r\n    private velocityX: number = 0;\r\n    private velocityY: number = 0;\r\n\r\n    public name = '';\r\n\r\n    // SMOOTHING\r\n    private targetX: number = 0;\r\n    private targetY: number = 0;\r\n    private finalVelocityX: number = 0;\r\n    private finalVelocityY: number = 0;\r\n    private targetTime: number = -1;\r\n\r\n    private keyBindings: keyBindings = {\r\n        up: 0,\r\n        down: 0,\r\n        left: 0,\r\n        right: 0,\r\n    };\r\n    private keysPressed: number[] = [];\r\n\r\n    private texture: AnimatedTexture;\r\n    private titleTexture: DynamicTexture;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedPlayer> {\r\n        let sup = super.serialize() as serializedEntity<serializedPlayer>;\r\n        sup.type = Player.type;\r\n        sup.data = {\r\n            velocityX: this.velocityX,\r\n            velocityY: this.velocityY,\r\n            name: this.name,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedPlayer>, dirty: boolean, smooth?: boolean): void {\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.name = serialized.data.name;\r\n\r\n        if (smooth) {\r\n            this.finalVelocityX = serialized.data.velocityX;\r\n            this.finalVelocityY = serialized.data.velocityY;\r\n            this.targetTime = SMOOTH_TIME;\r\n            this.velocityX = (serialized.x - this.position.x) / SMOOTH_TIME;\r\n            this.velocityY = (serialized.y - this.position.y) / SMOOTH_TIME;\r\n        } else {\r\n            this.velocityX = serialized.data.velocityX;\r\n            this.velocityY = serialized.data.velocityY;\r\n        }\r\n        super.deserialize(serialized, dirty, smooth);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        if (this.targetTime > 0) {\r\n            this.position.x += this.velocityX * deltaTime;\r\n            this.position.y += this.velocityY * deltaTime;\r\n            this.targetTime -= deltaTime;\r\n\r\n            if (this.targetTime <= 0) {\r\n                this.position.x = this.targetX;\r\n                this.position.y = this.targetY;\r\n                this.velocityX = this.finalVelocityX;\r\n                this.velocityY = this.finalVelocityY;\r\n            }\r\n\r\n            this.updateMesh();\r\n            return;\r\n        }\r\n\r\n        if (!this.keyBindings.up && !this.keyBindings.down && !this.keyBindings.left && !this.keyBindings.right) {\r\n            this.position.x += this.velocityX;\r\n            this.position.y += this.velocityY;\r\n\r\n            this.updateMesh();\r\n            return;\r\n        }\r\n\r\n        const deltaTimeModified = MODIFIER * deltaTime;\r\n\r\n        let movingX = false;\r\n        let movingY = false;\r\n\r\n        const diagonalModifier = Math.sqrt(2);\r\n\r\n        if (this.keysPressed.includes(this.keyBindings.left) || this.keysPressed.includes(this.keyBindings.right)) {\r\n            movingX = true;\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.up) || this.keysPressed.includes(this.keyBindings.down)) {\r\n            movingY = true;\r\n        }\r\n\r\n        if (this.keysPressed.includes(this.keyBindings.left)) {\r\n            // Left\r\n            this.velocityX -= (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.right)) {\r\n            // Right\r\n            this.velocityX += (SPEED_CHANGE * deltaTimeModified) / (movingY ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.up)) {\r\n            // Up\r\n            this.velocityY -= (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\r\n        }\r\n        if (this.keysPressed.includes(this.keyBindings.down)) {\r\n            // Down\r\n            this.velocityY += (SPEED_CHANGE * deltaTimeModified) / (movingX ? diagonalModifier : 1);\r\n        }\r\n\r\n        const ogX = this.position.x;\r\n        const ogY = this.position.y;\r\n\r\n        this.position.x += this.velocityX * deltaTimeModified;\r\n        this.position.y += this.velocityY * deltaTimeModified;\r\n\r\n        this.velocityX *= Math.pow(SLOWING, deltaTimeModified);\r\n        this.velocityY *= Math.pow(SLOWING, deltaTimeModified);\r\n\r\n        if (Math.abs(this.velocityX) < 0.001) {\r\n            this.velocityX = 0;\r\n        }\r\n        if (Math.abs(this.velocityY) < 0.001) {\r\n            this.velocityY = 0;\r\n        }\r\n\r\n        if (ogX !== this.position.x || ogY !== this.position.y) {\r\n            // Should check speed also, but f*ck it\r\n            this.dirty = true;\r\n        }\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    // ========== CONTROLS ===========\r\n\r\n    keyDown(keyCode: number) {\r\n        if (!this.keysPressed.includes(keyCode)) {\r\n            this.keysPressed.push(keyCode);\r\n        }\r\n    }\r\n\r\n    keyUp(keyCode: number) {\r\n        if (this.keysPressed.includes(keyCode)) {\r\n            this.keysPressed = this.keysPressed.filter((key) => key !== keyCode);\r\n        }\r\n    }\r\n\r\n    bindKeys(newBindings: Partial<keyBindings>) {\r\n        this.keyBindings = { ...this.keyBindings, ...newBindings };\r\n    }\r\n\r\n    static get type() {\r\n        return 'player';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return this;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'player',\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.texture = new AnimatedTexture('player', this.babylonScene, 'default');\r\n        this.mesh.material = createMaterial(this.texture.getTexture(), this.babylonScene);\r\n\r\n        // Player title\r\n        const title = MeshBuilder.CreatePlane(\r\n            'title',\r\n            { width: 200, height: 40, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        title.position = new Vector3(0, 110, -3);\r\n        const titleTexture = new DynamicTexture(\r\n            'titleTexture',\r\n            { width: 200, height: 40 },\r\n            this.babylonScene,\r\n            true,\r\n            Texture.LINEAR_LINEAR,\r\n        );\r\n        this.titleTexture = titleTexture;\r\n\r\n        title.parent = this.mesh;\r\n        title.material = createMaterial(titleTexture, this.babylonScene);\r\n\r\n        this.updateMesh();\r\n\r\n        return this;\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh) return;\r\n        super.updateMesh();\r\n\r\n        const ctx = this.titleTexture.getContext();\r\n        ctx.clearRect(0, 0, this.titleTexture.getSize().width, this.titleTexture.getSize().height);\r\n        ctx.fillStyle = '#343434AA';\r\n        ctx.fillRect(0, 0, this.titleTexture.getSize().width, this.titleTexture.getSize().height);\r\n\r\n        ctx.font = '32px pixel';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.fillText(this.name, this.titleTexture.getSize().width / 2, this.titleTexture.getSize().height / 2);\r\n        this.titleTexture.update();\r\n\r\n        const WALKING_THRESHOLD = 0.01;\r\n        if (Math.abs(this.velocityX) > WALKING_THRESHOLD || Math.abs(this.velocityY) > WALKING_THRESHOLD) {\r\n            this.texture.queueOnce('walking');\r\n        } else {\r\n            this.texture.queueOnce('default');\r\n        }\r\n    }\r\n\r\n    detachBabylon() {\r\n        if (this.babylonScene && this.mesh) {\r\n            const child = this.mesh.getChildMeshes()[0];\r\n\r\n            if (this.titleTexture && child && child.material) {\r\n                this.babylonScene.removeTexture(this.titleTexture);\r\n                this.babylonScene.removeMaterial(child.material);\r\n            }\r\n        }\r\n\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 200);\r\n    }\r\n}\r\n","import { Mesh, Scene, MeshBuilder, StandardMaterial, Texture, DynamicTexture, Vector2 } from 'babylonjs';\r\nimport { AbstractGameObject } from './00_AbstractGameObject';\r\nimport { GameScene } from './Scene';\r\nimport { getImage } from '../../frontend/gameMechanics/textures/textureEngine';\r\n\r\nexport type tileType = number;\r\n\r\nexport interface serializedChunk {\r\n    x: number;\r\n    y: number;\r\n    ground: tileType[][];\r\n}\r\n\r\nexport class Chunk extends AbstractGameObject {\r\n    public ground: tileType[][] = [[]];\r\n\r\n    private texture: DynamicTexture;\r\n\r\n    constructor(gameScene: GameScene, x: number, y: number) {\r\n        super(gameScene);\r\n        this.position = new Vector2(x, y);\r\n    }\r\n\r\n    get id(): string {\r\n        return Chunk.getId(this.position.x, this.position.y);\r\n    }\r\n\r\n    serialize(): serializedChunk {\r\n        return {\r\n            x: this.position.x,\r\n            y: this.position.y,\r\n            ground: this.ground,\r\n        };\r\n    }\r\n\r\n    deserialize(serialized: serializedChunk): void {\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.ground = serialized.ground;\r\n\r\n        this.updateMesh();\r\n    }\r\n\r\n    static getId(x: number, y: number): string {\r\n        return x.toString() + 'x' + y.toString();\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (this.babylonScene) {\r\n            this.mesh = MeshBuilder.CreatePlane(\r\n                'chunk',\r\n                { width: 1600, height: 1600, sideOrientation: Mesh.FRONTSIDE },\r\n                this.babylonScene,\r\n            );\r\n\r\n            const texture = new DynamicTexture(\r\n                'chunkTexture',\r\n                { width: 16 * 16, height: 16 * 16 },\r\n                this.babylonScene,\r\n                true,\r\n                Texture.NEAREST_NEAREST,\r\n            );\r\n\r\n            this.texture = texture;\r\n            const material = new StandardMaterial('mat', this.babylonScene);\r\n            material.emissiveTexture = texture;\r\n            this.mesh.material = material;\r\n\r\n            this.updateMesh();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) {\r\n            return;\r\n        }\r\n\r\n        this.mesh.position.x = this.position.x * 16 * 100;\r\n        this.mesh.position.y = -this.position.y * 16 * 100;\r\n\r\n        const ctx = this.texture.getContext();\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                if (this.ground[x] && this.ground[x][y]) {\r\n                    ctx.fillStyle = Chunk.getTerrainColor(this.ground[x][y]);\r\n\r\n                    ctx.fillRect(x * 16, y * 16, 16, 16);\r\n                    // if ((x + y) % 2 === 0) {\r\n                    //     ctx.fillStyle = '#00000005';\r\n                    //     ctx.fillRect(x * 16, y * 16, 16, 16);\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let x = 0; x < 16; x++) {\r\n            for (let y = 0; y < 16; y++) {\r\n                if (this.ground[x] && this.ground[x][y]) {\r\n                    if (this.ground[x][y] === 2) {\r\n                        // Water, should have transition\r\n\r\n                        this.drawTransition(ctx, x, y, [1, 3], 'grass_water');\r\n                    }\r\n\r\n                    /*\r\n\r\n                    if (this.ground[x][y] === 3) {\r\n                        // Tree\r\n\r\n                        if ((x + y) % 2 === 0) {\r\n                            const shift = Math.floor(Math.random() * 16) - 8;\r\n\r\n                            const img = getImage(Math.random() > 0.4 ? \"tree_big\" : \"tree_small\");\r\n                            if (img) ctx.drawImage(img, x * 16 + shift, y * 16 + shift);\r\n                        }\r\n                    }\r\n\r\n                    */\r\n                }\r\n            }\r\n        }\r\n\r\n        this.texture.update();\r\n    }\r\n\r\n    drawTransition(ctx: CanvasRenderingContext2D, x: number, y: number, tileType: number[], filePrefix: string) {\r\n        const posX = this.position.x * 16 + x - 8;\r\n        const posY = this.position.y * 16 + y - 8;\r\n\r\n        let sides = '';\r\n        if (tileType.includes(this.gameScene.getTile(posX, posY - 1))) sides += 'T';\r\n        if (tileType.includes(this.gameScene.getTile(posX + 1, posY))) sides += 'R';\r\n        if (tileType.includes(this.gameScene.getTile(posX, posY + 1))) sides += 'B';\r\n        if (tileType.includes(this.gameScene.getTile(posX - 1, posY))) sides += 'L';\r\n\r\n        if (sides === 'TB') {\r\n            const top = getImage(filePrefix + '_T');\r\n            if (top) ctx.drawImage(top, x * 16, y * 16);\r\n            const bottom = getImage(filePrefix + '_B');\r\n            if (bottom) ctx.drawImage(bottom, x * 16, y * 16);\r\n        } else if (sides === 'RL') {\r\n            const right = getImage(filePrefix + '_R');\r\n            if (right) ctx.drawImage(right, x * 16, y * 16);\r\n            const left = getImage(filePrefix + '_L');\r\n            if (left) ctx.drawImage(left, x * 16, y * 16);\r\n        } else {\r\n            if (sides.length > 0) {\r\n                const img = getImage(filePrefix + '_' + sides);\r\n                if (img) ctx.drawImage(img, x * 16, y * 16);\r\n            }\r\n        }\r\n\r\n        const corner = (shiftX: number, shiftY: number, blackList: string[], suffix: string) => {\r\n            if (\r\n                tileType.includes(this.gameScene.getTile(posX + shiftX, posY + shiftY)) &&\r\n                !blackList.reduce((prev, letter) => prev || sides.includes(letter), false)\r\n            ) {\r\n                const img = getImage(filePrefix + '_corner_' + suffix);\r\n                if (img) ctx.drawImage(img, x * 16, y * 16);\r\n            }\r\n        };\r\n\r\n        corner(-1, -1, ['L', 'T'], 'BR');\r\n        corner(+1, -1, ['R', 'T'], 'BL');\r\n        corner(-1, +1, ['L', 'B'], 'TR');\r\n        corner(+1, +1, ['R', 'B'], 'TL');\r\n    }\r\n\r\n    detachBabylon() {\r\n        if (this.babylonScene && this.mesh && this.texture) {\r\n            this.babylonScene.removeTexture(this.texture);\r\n            if (this.mesh.material) {\r\n                this.babylonScene.removeMaterial(this.mesh.material);\r\n            }\r\n        }\r\n\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    static getTerrainColor(number: number): string {\r\n        switch (number) {\r\n            case 1: // Grass\r\n                return '#67943F';\r\n            case 2: // Water\r\n                return '#2EB0E5';\r\n            case 4: // Sand\r\n                return '#FDDC86';\r\n        }\r\n        return '#DDDDDD';\r\n    }\r\n}\r\n","import { AbstractGameObject } from '../../../shared/gameObjects/00_AbstractGameObject';\r\n\r\nexport class IndexedList<T extends AbstractGameObject> {\r\n    values: { [key: string]: T } = {};\r\n\r\n    addMore(values: { [key: string]: T }) {\r\n        this.values = { ...this.values, ...values };\r\n    }\r\n\r\n    add(key: string, value: T) {\r\n        this.values[key] = value;\r\n    }\r\n\r\n    remove(key: string) {\r\n        if (!this.includes(key)) return;\r\n        this.values[key].detachBabylon();\r\n        delete this.values[key];\r\n    }\r\n\r\n    update(key: string, serialized: any, dirty: boolean, smooth?: boolean) {\r\n        if (!this.includes(key)) return;\r\n        this.values[key].deserialize(serialized, dirty, smooth);\r\n    }\r\n\r\n    updateOrCreate(key: string, serialized: any, dirty: boolean, newObjectCreator: () => T, smooth?: boolean) {\r\n        if (!this.includes(key)) {\r\n            this.values[key] = newObjectCreator();\r\n        }\r\n        this.values[key].deserialize(serialized, dirty, smooth);\r\n    }\r\n\r\n    get(key: string) {\r\n        if (!this.includes(key)) return null;\r\n        return this.values[key];\r\n    }\r\n\r\n    includes(key: string) {\r\n        return Object.keys(this.values).includes(key);\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, key: string, index: number) => void) {\r\n        const keys = Object.keys(this.values);\r\n\r\n        keys.forEach((key, index) => {\r\n            callbackfn(this.values[key], key, index);\r\n        });\r\n    }\r\n\r\n    filter(callbackfn: (value: T, key: string, index: number) => boolean) {\r\n        const keys = Object.keys(this.values);\r\n\r\n        const result = new IndexedList<T>();\r\n\r\n        keys.forEach((key, index) => {\r\n            if (callbackfn(this.values[key], key, index)) {\r\n                result.add(key, this.values[key]);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    map(callbackfn: (value: T, key: string, index: number) => any) {\r\n        return Object.keys(this.values).map((key, index) => callbackfn(this.values[key], key, index));\r\n    }\r\n\r\n    getValues() {\r\n        return Object.values(this.values);\r\n    }\r\n\r\n    getKeys() {\r\n        return Object.keys(this.values);\r\n    }\r\n\r\n    length() {\r\n        return this.getKeys().length;\r\n    }\r\n}\r\n","import { Chunk } from './Chunk';\r\nimport { IndexedList } from '../../frontend/gameMechanics/utils/IndexedList';\r\nimport { AbstractGameEntity } from './01_AbstractGameEntity';\r\n\r\nexport class GameScene {\r\n    entities = new IndexedList<AbstractGameEntity>();\r\n    chunks = new IndexedList<Chunk>();\r\n\r\n    tickAll(deltaTime: number) {\r\n        this.entities.forEach((value) => value.tick(deltaTime));\r\n        this.chunks.forEach((value) => value.tick(deltaTime));\r\n    }\r\n\r\n    getTile(x: number, y: number) {\r\n        const calcX = Math.floor(x) + 8;\r\n        const calcY = Math.floor(y) + 8;\r\n\r\n        const chunkX = Math.floor(calcX / 16);\r\n        const chunkY = Math.floor(calcY / 16);\r\n        const chunk = this.chunks.get(Chunk.getId(chunkX, chunkY));\r\n\r\n        if (!chunk || !chunk.ground[calcX - chunkX * 16] || !chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16]) {\r\n            return -1;\r\n        }\r\n\r\n        return chunk.ground[calcX - chunkX * 16][calcY - chunkY * 16];\r\n    }\r\n}\r\n","import { keyBindings } from '../shared/gameObjects/Player';\r\n\r\n// ARROWS\r\nexport const CONTROLS_ARROWS: keyBindings = {\r\n    left: 37,\r\n    right: 39,\r\n    up: 38,\r\n    down: 40,\r\n};\r\n\r\n// WASD\r\nexport const CONTROLS_WASD: keyBindings = {\r\n    left: 65,\r\n    right: 68,\r\n    up: 87,\r\n    down: 83,\r\n};\r\n","import { Mesh, Scene, MeshBuilder, Vector2 } from 'babylonjs';\r\nimport { getSimpleMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { GameScene } from './Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\nimport { SimpleTexture } from '../../frontend/gameMechanics/textures/SimpleTexture';\r\n\r\ntype treeTypes = 1 | 2 | 3 | 4;\r\n\r\nexport interface serializedTree {\r\n    size: treeTypes;\r\n}\r\n\r\nexport class Tree extends AbstractGameEntity {\r\n    private texture: SimpleTexture;\r\n    public size: treeTypes;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedTree> {\r\n        let sup = super.serialize() as serializedEntity<serializedTree>;\r\n        sup.type = Tree.type;\r\n        sup.data = {\r\n            size: this.size,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedTree>, dirty: boolean): void {\r\n        if (serialized.type !== Tree.type) return;\r\n\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.size = serialized.data.size;\r\n        super.deserialize(serialized, dirty);\r\n    }\r\n\r\n    tick(deltaTime: number) {}\r\n\r\n    static get type() {\r\n        return 'tree';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return this;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'tree',\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.setMaterial();\r\n\r\n        this.updateMesh();\r\n        return this;\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) return;\r\n        this.setMaterial();\r\n        super.updateMesh();\r\n    }\r\n\r\n    setMaterial() {\r\n        if (this.mesh && this.babylonScene) {\r\n            switch (this.size) {\r\n                case 1:\r\n                    this.mesh.material = getSimpleMaterial('tree_small', this.babylonScene);\r\n                    break;\r\n                case 2:\r\n                    this.mesh.material = getSimpleMaterial('tree_big', this.babylonScene);\r\n                    break;\r\n                case 3:\r\n                    this.mesh.material = getSimpleMaterial('tree_short', this.babylonScene);\r\n                    break;\r\n                case 4:\r\n                    this.mesh.material = getSimpleMaterial('tree_tall', this.babylonScene);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    detachBabylon() {\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(200, 400);\r\n    }\r\n}\r\n","import { Mesh, Scene, MeshBuilder, Vector2 } from 'babylonjs';\r\nimport { getSimpleMaterial } from '../../frontend/gameMechanics/textures/textureEngine';\r\nimport { GameScene } from './Scene';\r\nimport { AbstractGameEntity, serializedEntity } from './01_AbstractGameEntity';\r\nimport { SimpleTexture } from '../../frontend/gameMechanics/textures/SimpleTexture';\r\n\r\nexport interface serializedStone {\r\n    size: 1 | 2;\r\n}\r\n\r\nexport class Stone extends AbstractGameEntity {\r\n    private texture: SimpleTexture;\r\n    public size: 1 | 2;\r\n\r\n    constructor(gameScene: GameScene, public id: string) {\r\n        super(gameScene);\r\n    }\r\n\r\n    serialize(): serializedEntity<serializedStone> {\r\n        let sup = super.serialize() as serializedEntity<serializedStone>;\r\n        sup.type = Stone.type;\r\n        sup.data = {\r\n            size: this.size,\r\n        };\r\n        return sup;\r\n    }\r\n\r\n    deserialize(serialized: serializedEntity<serializedStone>, dirty: boolean): void {\r\n        if (serialized.type !== Stone.type) return;\r\n\r\n        this.position.x = serialized.x;\r\n        this.position.y = serialized.y;\r\n        this.size = serialized.data.size;\r\n        super.deserialize(serialized, dirty);\r\n    }\r\n\r\n    tick(deltaTime: number) {}\r\n\r\n    static get type() {\r\n        return 'stone';\r\n    }\r\n\r\n    // ========== BABYLON ===========\r\n\r\n    attachBabylon(scene: Scene) {\r\n        super.attachBabylon(scene);\r\n\r\n        if (!this.babylonScene) return this;\r\n\r\n        const size = this.getSize();\r\n\r\n        this.mesh = MeshBuilder.CreatePlane(\r\n            'stone',\r\n            { width: size.x, height: size.y, sideOrientation: Mesh.FRONTSIDE },\r\n            this.babylonScene,\r\n        );\r\n        this.mesh.material = getSimpleMaterial(this.size === 1 ? 'rock_small' : 'rock_big', this.babylonScene);\r\n\r\n        this.updateMesh();\r\n        return this;\r\n    }\r\n\r\n    async updateMesh() {\r\n        if (!this.mesh || !this.babylonScene) return;\r\n        this.mesh.material = getSimpleMaterial(this.size === 1 ? 'rock_small' : 'rock_big', this.babylonScene);\r\n        super.updateMesh();\r\n    }\r\n\r\n    detachBabylon() {\r\n        // Mesh detached by super\r\n        return super.detachBabylon();\r\n    }\r\n\r\n    getSize() {\r\n        return new Vector2(100, 100);\r\n    }\r\n}\r\n","import io from 'socket.io-client';\r\nimport { Player, serializedPlayer } from '../../../shared/gameObjects/Player';\r\nimport { GameScene } from '../../../shared/gameObjects/Scene';\r\nimport babylonjs from 'babylonjs';\r\nimport { serializedChunk, Chunk } from '../../../shared/gameObjects/Chunk';\r\nimport { messageEntities, messageError, messageLogin } from '../../../shared/network/messageTypes';\r\nimport { AbstractGameEntity, serializedEntity } from '../../../shared/gameObjects/01_AbstractGameEntity';\r\nimport { Tree } from '../../../shared/gameObjects/Tree';\r\nimport { Stone } from '../../../shared/gameObjects/Stone';\r\nimport md5 from 'md5';\r\n\r\ntype callback = (data: any) => void;\r\n\r\nexport class NetworkClient {\r\n    private socket: SocketIOClient.Socket;\r\n    private userId: string;\r\n    private opened: boolean;\r\n    private callbacks: { [key: string]: callback } = {\r\n        authenticated: () => {},\r\n        updated: () => {},\r\n        invalidPassword: () => {},\r\n        disconnect: () => {},\r\n    };\r\n\r\n    constructor(private apiUrl: string, private scene: GameScene, private getBabylonScene: () => babylonjs.Scene) {}\r\n\r\n    public on(event: 'authenticated' | 'updated' | 'invalidPassword' | 'disconnect', callback: callback) {\r\n        this.callbacks[event] = callback;\r\n    }\r\n\r\n    public close() {\r\n        this.socket.disconnect();\r\n    }\r\n\r\n    public open() {\r\n        this.opened = true;\r\n        this.socket = io(this.apiUrl);\r\n        this.setListeners();\r\n\r\n        this.socket.on('auth', (data: serializedEntity<serializedPlayer>) => {\r\n            this.userId = data.id;\r\n            this.callbacks['authenticated'](data);\r\n            console.log('Joined game with player ', data.data.name, ' (' + data.id + ')');\r\n        });\r\n    }\r\n\r\n    public sendPlayerUpdate(player: Player) {\r\n        const payload: serializedEntity<serializedPlayer> = player.serialize();\r\n        this.socket.emit('update', payload);\r\n    }\r\n\r\n    public requestChunk(x: number, y: number) {\r\n        this.socket.emit('mapRequest', { x, y });\r\n    }\r\n\r\n    public auth(name: string, password: string) {\r\n        const payload: messageLogin = {\r\n            name,\r\n            passwordHash: md5(password),\r\n        };\r\n        this.socket.emit('login', payload);\r\n    }\r\n\r\n    private setListeners() {\r\n        this.socket.on('entities', async (data: messageEntities) => {\r\n            data.removed.forEach((entity) => entity.id !== this.userId && this.scene.entities.remove(entity.id));\r\n            data.updated.forEach(\r\n                (entity) =>\r\n                    entity.id !== this.userId &&\r\n                    this.scene.entities.updateOrCreate(entity.id, entity, false, () => this.createEntity(entity)!),\r\n            );\r\n            this.callbacks.updated({});\r\n        });\r\n\r\n        this.socket.on('mapChunk', async (data: serializedChunk) => {\r\n            const id = Chunk.getId(data.x, data.y);\r\n\r\n            this.scene.chunks.updateOrCreate(id, data, false, () =>\r\n                new Chunk(this.scene, data.x, data.y).attachBabylon(this.getBabylonScene()),\r\n            );\r\n\r\n            this.scene.chunks\r\n                .filter((value) => Math.abs(value.position.x - data.x) <= 1 && Math.abs(value.position.y - data.y) <= 1)\r\n                .forEach((value) => value.updateMesh());\r\n        });\r\n\r\n        this.socket.on('err', async (data: messageError) => {\r\n            switch (data.error) {\r\n                case 'credentials':\r\n                    this.callbacks.invalidPassword(data);\r\n            }\r\n        });\r\n    }\r\n\r\n    private createEntity(entity: serializedEntity<any>): AbstractGameEntity | undefined {\r\n        switch (entity.type) {\r\n            case 'player': {\r\n                const e = new Player(this.scene, entity.id);\r\n                e.attachBabylon(this.getBabylonScene());\r\n                e.deserialize(entity, false, true);\r\n                return e;\r\n            }\r\n            case 'tree': {\r\n                const e = new Tree(this.scene, entity.id);\r\n                e.attachBabylon(this.getBabylonScene());\r\n                e.deserialize(entity, false);\r\n                return e;\r\n            }\r\n            case 'stone': {\r\n                const e = new Stone(this.scene, entity.id);\r\n                e.attachBabylon(this.getBabylonScene());\r\n                e.deserialize(entity, false);\r\n                return e;\r\n            }\r\n        }\r\n        console.error('Entity \"' + entity.type + ' does not exist!');\r\n    }\r\n}\r\n","export function shadeText(ctx: CanvasRenderingContext2D, text: string, x: number, y: number) {\r\n    ctx.strokeStyle = '#000000';\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.lineWidth = 2;\r\n\r\n    ctx.strokeText(text, x, y);\r\n    ctx.strokeText(text, x + 1, y + 1);\r\n    ctx.fillText(text, x, y);\r\n}\r\n","import { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { GameScene } from '../../../shared/gameObjects/Scene';\r\nimport { Player } from '../../../shared/gameObjects/Player';\r\nimport { shadeText } from '../utils/shadeText';\r\n\r\nconst MINIMAP_DISTANCE = 32;\r\nconst MINIMAP_SCALE = 2;\r\nconst BORDER_WIDTH = MINIMAP_SCALE + 1;\r\n\r\nexport function minimap(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, me: Player) {\r\n    const gui = guiTexture.getContext();\r\n    const width = guiTexture.getSize().width;\r\n    //const height = guiTexture.getSize().height;\r\n\r\n    const x0 = width - 30 - MINIMAP_SCALE * MINIMAP_DISTANCE;\r\n    const y0 = 20 + MINIMAP_SCALE * MINIMAP_DISTANCE;\r\n\r\n    const shiftX = Math.floor((Math.floor(me.position.x) - me.position.x) * MINIMAP_SCALE);\r\n    const shiftY = Math.floor((Math.floor(me.position.y) - me.position.y) * MINIMAP_SCALE);\r\n\r\n    gui.fillStyle = '#000000';\r\n    gui.fillRect(\r\n        x0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\r\n        y0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 + MINIMAP_SCALE,\r\n    );\r\n\r\n    for (let x = -MINIMAP_DISTANCE; x <= MINIMAP_DISTANCE + 1; x++) {\r\n        for (let y = -MINIMAP_DISTANCE; y <= MINIMAP_DISTANCE + 1; y++) {\r\n            gui.fillStyle = getTerrainColor(gameScene.getTile(me.position.x + x, me.position.y + y));\r\n            gui.fillRect(\r\n                x0 + x * MINIMAP_SCALE + shiftX,\r\n                y0 + y * MINIMAP_SCALE + shiftY,\r\n                MINIMAP_SCALE,\r\n                MINIMAP_SCALE,\r\n            );\r\n        }\r\n    }\r\n\r\n    gameScene.entities\r\n        .filter(\r\n            (entity) =>\r\n                Math.abs(entity.position.x - me.position.x) <= MINIMAP_DISTANCE + 1.5 &&\r\n                Math.abs(entity.position.y - me.position.y) <= MINIMAP_DISTANCE + 1.5,\r\n        )\r\n        .forEach((entity) => {\r\n            gui.fillStyle = getEntityColor(entity.serialize().type);\r\n            gui.fillRect(\r\n                Math.floor(x0 + (entity.position.x - me.position.x) * MINIMAP_SCALE),\r\n                Math.floor(y0 + (entity.position.y - me.position.y) * MINIMAP_SCALE),\r\n                MINIMAP_SCALE,\r\n                MINIMAP_SCALE,\r\n            );\r\n        });\r\n\r\n    gui.lineWidth = BORDER_WIDTH;\r\n    gui.strokeStyle = '#000000';\r\n    gui.strokeRect(\r\n        x0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH + 2,\r\n        y0 - MINIMAP_SCALE * MINIMAP_DISTANCE - BORDER_WIDTH + 2,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 - 4 + MINIMAP_SCALE,\r\n        MINIMAP_SCALE * MINIMAP_DISTANCE * 2 + BORDER_WIDTH * 2 - 4 + MINIMAP_SCALE,\r\n    );\r\n\r\n    gui.font = '16px pixel';\r\n    gui.textBaseline = 'top';\r\n    gui.textAlign = 'center';\r\n    shadeText(gui, 'x', x0, y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10);\r\n    gui.textAlign = 'right';\r\n    shadeText(\r\n        gui,\r\n        Math.round(me.position.x).toString(),\r\n        x0 - 10,\r\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\r\n    );\r\n    gui.textAlign = 'left';\r\n    shadeText(\r\n        gui,\r\n        Math.round(me.position.y).toString(),\r\n        x0 + 10,\r\n        y0 + MINIMAP_SCALE * MINIMAP_DISTANCE + BORDER_WIDTH + 10,\r\n    );\r\n\r\n    guiTexture.update();\r\n}\r\n\r\nfunction getTerrainColor(number: number): string {\r\n    switch (number) {\r\n        case 1: // Grass\r\n            return '#67943F';\r\n        case 2: // Water\r\n            return '#2EB0E5';\r\n        case 4: // Sand\r\n            return '#FDDC86';\r\n    }\r\n    return '#DDDDDD';\r\n}\r\n\r\nfunction getEntityColor(type: string): string {\r\n    switch (type) {\r\n        case 'tree':\r\n            return '#2A4323';\r\n        case 'player':\r\n            return '#000dff';\r\n        case 'stone':\r\n            return '#dddddd';\r\n    }\r\n    return '#DDDDDD';\r\n}\r\n","import React, { createRef } from 'react';\r\n\r\nimport babylonjs, { Vector3, UniversalCamera, StandardMaterial, MeshBuilder } from 'babylonjs';\r\nimport { Scene, Engine, SceneEventArgs } from 'react-babylonjs';\r\n\r\nimport { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { Player, serializedPlayer } from '../../shared/gameObjects/Player';\r\nimport { Chunk } from '../../shared/gameObjects/Chunk';\r\nimport { GameScene } from '../../shared/gameObjects/Scene';\r\nimport { CONTROLS_WASD } from '../keyBindings';\r\nimport { NetworkClient } from './network/Client';\r\nimport { minimap } from './gui/minimap';\r\nimport { debugInfo } from './gui/debugInfo';\r\nimport { CAMERA_ANGLE, CAMERA_DISTANCE } from '../../shared/constants';\r\nimport { shadeText } from './utils/shadeText';\r\nimport { serializedEntity } from '../../shared/gameObjects/01_AbstractGameEntity';\r\n\r\nconst MAX_RENDER_DISTANCE = 3;\r\nconst REQUEST_DISTANCE = 3;\r\nconst DELETE_DISTANCE = 5;\r\n\r\ninterface IGameCoreProps {\r\n    apiUrl: string;\r\n}\r\n\r\ninterface IGameCoreState {\r\n    loggedIn: boolean;\r\n}\r\n\r\nexport class GameCore extends React.Component<IGameCoreProps, IGameCoreState> {\r\n    gameScene: GameScene;\r\n    me: Player | null = null;\r\n\r\n    babylonScene: babylonjs.Scene | null;\r\n    guiTexture: AdvancedDynamicTexture | null;\r\n    networkClient: NetworkClient;\r\n    state: IGameCoreState = {\r\n        loggedIn: false,\r\n    };\r\n\r\n    timer: NodeJS.Timeout;\r\n\r\n    zoom: number = 1;\r\n    renderDistance: number = MAX_RENDER_DISTANCE;\r\n\r\n    debug: boolean = false;\r\n\r\n    loginRef = createRef<HTMLInputElement>();\r\n    passwordRef = createRef<HTMLInputElement>();\r\n\r\n    constructor(props: IGameCoreProps) {\r\n        super(props);\r\n\r\n        this.gameScene = new GameScene();\r\n        this.networkClient = new NetworkClient(this.props.apiUrl, this.gameScene, () => this.babylonScene!);\r\n        this.networkClient.on('authenticated', (data: serializedEntity<serializedPlayer>) => this.initGame(data));\r\n        this.networkClient.on('invalidPassword', () => {\r\n            if (this.loginRef.current && this.passwordRef.current) {\r\n                this.loginRef.current.classList.add('shake');\r\n                this.passwordRef.current.classList.add('shake');\r\n                setTimeout(() => {\r\n                    if (this.loginRef.current && this.passwordRef.current) {\r\n                        this.loginRef.current.classList.remove('shake');\r\n                        this.passwordRef.current.classList.remove('shake');\r\n                    }\r\n                }, 600);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            if (this.me) {\r\n                this.me.keyDown(event.keyCode);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event) => {\r\n            if (this.me) {\r\n                this.me.keyUp(event.keyCode);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('wheel', (event) => {\r\n            event.preventDefault();\r\n\r\n            this.zoom += (event.deltaY / Math.abs(event.deltaY)) * 0.12;\r\n            if (this.zoom < 0.5) this.zoom = 0.5;\r\n            if (this.zoom > 3) this.zoom = 3;\r\n        });\r\n\r\n        window.addEventListener('resize', (event) => {\r\n            this.resize();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resize();\r\n        this.networkClient.open();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        this.networkClient.close();\r\n    }\r\n\r\n    initGame(player: serializedEntity<serializedPlayer>) {\r\n        this.setState({\r\n            loggedIn: true,\r\n        });\r\n        this.me = new Player(this.gameScene, player.id);\r\n        this.me.attachBabylon(this.babylonScene!);\r\n        this.me.bindKeys(CONTROLS_WASD);\r\n        this.me.deserialize(player, false, false);\r\n        this.gameScene.entities.add(player.id, this.me);\r\n\r\n        (window as any).player = this.me;\r\n        (window as any).scene = this.gameScene;\r\n        (window as any).enableDebug = () => {\r\n            this.debug = true;\r\n        };\r\n\r\n        this.timer = setInterval(() => {\r\n            if (this.me) this.networkClient.sendPlayerUpdate(this.me);\r\n        }, 100);\r\n    }\r\n\r\n    tick(deltaTime: number) {\r\n        this.gameScene.entities.forEach((entity) => entity.tick(deltaTime));\r\n\r\n        this.unloadUnusedComponents();\r\n        this.requestChunks();\r\n\r\n        if (this.guiTexture) {\r\n            if (this.me) {\r\n                const gui = this.guiTexture.getContext();\r\n                const width = this.guiTexture.getSize().width;\r\n                const height = this.guiTexture.getSize().height;\r\n                gui.clearRect(0, 0, width, height);\r\n\r\n                minimap(this.guiTexture, this.gameScene, this.me);\r\n                if (this.debug) {\r\n                    debugInfo(this.guiTexture, this.gameScene, deltaTime);\r\n                }\r\n\r\n                this.guiTexture.update();\r\n            } else {\r\n                const gui = this.guiTexture.getContext();\r\n                const width = this.guiTexture.getSize().width;\r\n                const height = this.guiTexture.getSize().height;\r\n                gui.fillStyle = '#33334C';\r\n                gui.fillRect(0, 0, width, height);\r\n\r\n                gui.fillStyle = '#FFFFFF';\r\n                gui.font = '20px pixel';\r\n                gui.textBaseline = 'middle';\r\n                gui.textAlign = 'center';\r\n\r\n                shadeText(gui, 'Připojování k serveru...', width / 2, height / 2);\r\n\r\n                this.guiTexture.update();\r\n            }\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        const canvas = document.getElementById('game') as HTMLCanvasElement;\r\n        if (canvas) {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        }\r\n    }\r\n\r\n    onSceneMount(event: SceneEventArgs) {\r\n        const { scene } = event;\r\n\r\n        this.babylonScene = (scene as any) as babylonjs.Scene;\r\n\r\n        const camera = new UniversalCamera('Camera', new Vector3(0, 0, CAMERA_DISTANCE), this.babylonScene);\r\n        camera.rotation = new Vector3(-CAMERA_ANGLE, 0, 0);\r\n        //camera.attachControl(event.canvas, true);\r\n\r\n        const skybox = MeshBuilder.CreateCylinder(\r\n            'skyBox',\r\n            {\r\n                height: CAMERA_DISTANCE * 100,\r\n                diameterTop: MAX_RENDER_DISTANCE * 16 * 100 * 3,\r\n                diameterBottom: MAX_RENDER_DISTANCE * 16 * 100 * 1,\r\n                tessellation: 24,\r\n            },\r\n            this.babylonScene,\r\n        );\r\n        const skyboxMaterial = new StandardMaterial('skyBox', this.babylonScene);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);\r\n        skyboxMaterial.disableLighting = true;\r\n        skybox.material = skyboxMaterial;\r\n        skybox.rotation = new Vector3(Math.PI / 2, 0, 0);\r\n\r\n        this.guiTexture = AdvancedDynamicTexture.CreateFullscreenUI('GUI', true, scene);\r\n\r\n        scene.getEngine().runRenderLoop(() => {\r\n            this.tick(scene.getEngine().getDeltaTime());\r\n\r\n            (async () => {\r\n                if (this.me) {\r\n                    camera.position = new Vector3(\r\n                        this.me.position.x * 100,\r\n                        -this.me.position.y * 100 - CAMERA_DISTANCE * this.zoom * Math.tan(CAMERA_ANGLE),\r\n                        -CAMERA_DISTANCE * this.zoom,\r\n                    );\r\n\r\n                    skybox.position.x = this.me.position.x * 100;\r\n                    skybox.position.y = -this.me.position.y * 100;\r\n                }\r\n\r\n                this.renderDistance = Math.min(Math.ceil(this.zoom + 0.5), MAX_RENDER_DISTANCE);\r\n            })();\r\n\r\n            if (scene) {\r\n                scene.render();\r\n            }\r\n        });\r\n    }\r\n\r\n    unloadUnusedComponents() {\r\n        if (this.me) {\r\n            this.gameScene.chunks.forEach((chunk) => {\r\n                const distX = Math.abs(Math.round(this.me!.position.x / 16) - chunk.position.x);\r\n                const distY = Math.abs(Math.round(this.me!.position.y / 16) - chunk.position.y);\r\n                if (distX > this.renderDistance || distY > this.renderDistance) {\r\n                    chunk.setVisibility(false);\r\n                    if (distX > DELETE_DISTANCE || distY > DELETE_DISTANCE) {\r\n                        this.gameScene.chunks.remove(chunk.id);\r\n                    }\r\n                } else {\r\n                    chunk.setVisibility(true);\r\n                }\r\n            });\r\n\r\n            this.gameScene.entities.forEach((entity) => {\r\n                const distX = Math.abs(Math.round(this.me!.position.x) - entity.position.x) / 16;\r\n                const distY = Math.abs(Math.round(this.me!.position.y) - entity.position.y) / 16;\r\n\r\n                if (distX > this.renderDistance || distY > this.renderDistance) {\r\n                    entity.setVisibility(false);\r\n                    if (distX > DELETE_DISTANCE || distY > DELETE_DISTANCE) {\r\n                        this.gameScene.entities.remove(entity.id);\r\n                    }\r\n                } else {\r\n                    entity.setVisibility(true);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    requestChunks() {\r\n        if (this.me) {\r\n            for (let x = -REQUEST_DISTANCE; x <= REQUEST_DISTANCE; x++) {\r\n                for (let y = -REQUEST_DISTANCE; y <= REQUEST_DISTANCE; y++) {\r\n                    const chunkX = Math.round(this.me.position.x / 16) + x;\r\n                    const chunkY = Math.round(this.me.position.y / 16) + y;\r\n                    const chunkId = Chunk.getId(chunkX, chunkY);\r\n\r\n                    if (!this.gameScene.chunks.includes(chunkId)) {\r\n                        this.networkClient.requestChunk(chunkX, chunkY);\r\n                        this.gameScene.chunks.add(\r\n                            chunkId,\r\n                            new Chunk(this.gameScene, chunkX, chunkY).attachBabylon(this.babylonScene!),\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.state.loggedIn && (\r\n                    <div className=\"center\">\r\n                        <p>Přihlaste se, nebo si vytvořte účet:</p>\r\n                        <p>\r\n                            <input type=\"text\" placeholder=\"Jméno\" ref={this.loginRef} />\r\n                        </p>\r\n                        <p>\r\n                            <input type=\"password\" placeholder=\"Heslo\" ref={this.passwordRef} />\r\n                        </p>\r\n                        <p>\r\n                            <button\r\n                                onClick={() =>\r\n                                    this.networkClient.auth(\r\n                                        this.loginRef!.current!.value,\r\n                                        this.passwordRef!.current!.value,\r\n                                    )\r\n                                }\r\n                            >\r\n                                Přihlásit se!\r\n                            </button>\r\n                        </p>\r\n                    </div>\r\n                )}\r\n                <Engine antialias={true} canvasId=\"game\">\r\n                    <Scene onSceneMount={(event: SceneEventArgs) => this.onSceneMount(event)}>\r\n                        <></>\r\n                    </Scene>\r\n                </Engine>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from '@babylonjs/gui/2D/advancedDynamicTexture';\r\nimport { GameScene } from '../../../shared/gameObjects/Scene';\r\nimport { shadeText } from '../utils/shadeText';\r\n\r\nexport function debugInfo(guiTexture: AdvancedDynamicTexture, gameScene: GameScene, deltaTime: number) {\r\n    const gui = guiTexture.getContext();\r\n\r\n    let x = 30;\r\n    let y = 20;\r\n\r\n    const values: { [key: string]: string } = {\r\n        FPS: (1000 / deltaTime).toFixed(2),\r\n        'Enabled entities':\r\n            gameScene.entities.filter((value) => value.getVisibility()).length() +\r\n            ' (of ' +\r\n            gameScene.entities.length() +\r\n            ' loaded)',\r\n        'Enabled chunks':\r\n            gameScene.chunks.filter((value) => value.getVisibility()).length() +\r\n            ' (of ' +\r\n            gameScene.chunks.length() +\r\n            ' loaded)',\r\n    };\r\n\r\n    gui.font = '16px pixel';\r\n    gui.textBaseline = 'top';\r\n    gui.textAlign = 'left';\r\n\r\n    Object.keys(values).forEach((key) => {\r\n        shadeText(gui, key + ': ' + values[key], x, y);\r\n        y += 20;\r\n    });\r\n\r\n    guiTexture.update();\r\n}\r\n","import React from 'react';\r\nimport { GameCore } from './gameMechanics/GameCore';\r\nimport { loadTextures } from './gameMechanics/textures/textureEngine';\r\n\r\ninterface IAppProps {}\r\n\r\ninterface IAppState {\r\n    status: 'loading' | 'ingame';\r\n    textures: {\r\n        loaded: number;\r\n        of: number;\r\n    };\r\n}\r\n\r\nclass App extends React.Component<IAppProps, IAppState> {\r\n    //apiUrl = 'http://localhost:80/';\r\n    apiUrl = 'https://randombot-server.herokuapp.com/';\r\n\r\n    state: IAppState = {\r\n        status: 'loading',\r\n        textures: {\r\n            loaded: 0,\r\n            of: 0,\r\n        },\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            textures: {\r\n                loaded: 0,\r\n                of: loadTextures(\r\n                    () => {\r\n                        this.setState({ status: 'ingame' });\r\n                    },\r\n                    (loaded, of) => {\r\n                        this.setState({\r\n                            textures: {\r\n                                loaded,\r\n                                of,\r\n                            },\r\n                        });\r\n                    },\r\n                ),\r\n            },\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.status === 'loading' && (\r\n                    <div className=\"center\">\r\n                        Načítání textur... ({this.state.textures.loaded}/{this.state.textures.of})\r\n                    </div>\r\n                )}\r\n                {this.state.status === 'ingame' && <GameCore apiUrl={this.apiUrl} />}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './frontend/index.css';\r\nimport App from './frontend/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}